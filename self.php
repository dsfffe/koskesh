<?php

/**
 * @var Creator : T.me/SylixDeveloper
 * @version SylixTeam PHP Self By SylixDeveloper v1.0.0
 */

use \danog\MadelineProto\API;
use \danog\Loop\Generic\GenericLoop;
use \danog\MadelineProto\EventHandler;
use \danog\MadelineProto\RPCErrorException;
use function Amp\File\{get, put, exists, unlink};

error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('memory_limit', '-1');
ini_set('max_execution_time', '0');
ini_set('display_startup_errors', '1');

date_default_timezone_set('Asia/Tehran');
if (!is_dir('data')) {
    mkdir('data');
}
if (!file_exists('madeline.php')) {
    copy('https://phar.madelineproto.xyz/madeline.php', 'madeline.php');
}

$ez        = ["😀", "😃", "😄", "😁", "😆", "😅", "😂", "🤣", "😭", "😗", "😙", "😚", "😘", "🥰", "😍", "🤩", "🥳", "🤗", "🙃", "🙂", "☺️", "😊", "😏", "😌", "😉", "🤭", "😶", "🤔", "🤪", "😜", "😝", "😛", "😋", "😔", "😑", "😐", "🤨", "🧐", "🙄", "😒", "😤", "😠", "😡", "🤬", "☹️", "😰", "🤫", "🤐", "😬", "😳", "🥺", "😟", "😕", "🙁", "😨", "😧", "😦", "😮", "😯", "😲", "😱", "🤯", "😢", "😥", "😓", "😞", "😣", "😖", "😩", "😫", "🤤", "🥱", "🤮", "😇", "😵", "🤥", "🤓", "😎", "🤑", "🤠"];
$fz        = ["کیرم تو خارت", "بصیک بچه کونی", "بای بده ننه پولی", "کیرم تو ننت اوبی", "نگامت کص ننه ", "کص ننه پرده ارتجاعیت", "ننتو شبی چند میدی؟", "خارتو با روغن جامد گاییدم", "کص آبجیت ", "زنا زادع ", "ننه خیابونی", "گی ننه", "آبم لا کص ننت چجوری میشه", "بالا باش ننه کیر دزد", "ننت مجلسی میزنه؟کصصصص ننت جووووون", "ننه جریده", "گی پدر زنا زادع ", "ننتو کرایه میدی؟", "شل ننه بالا باش", "خارکصده به ننت بگو رو کیرم خوش میگذره؟", "ننه توله کص ننتو جر میدم", "بیا ننتو ببر زخمش کردم", "کص ننتو بزارم یکم بخندیم", "به ننت بگو بیاد واسم پر توف بزنه خرجتونو بدم یتیم", "فلج تیز باش ننتو بیار", "ننت پر توف میزنی بابات شم؟", "اوب کونی بزن به چاک تا ننتو جلوت حامله نکردمننه کون طلا بیا بالا😂", "یتیم بیا بغلم ", "ننت گنگ بنگ دوس داره؟", "بیا بگامت شاد شی خار کصده", "کیرم تو کص ننت بگو باشه😂", "داداش دوس داری یا آبجی ننه پولی", "۵۰ میدم ننتو بدهکیرم کص آبجی کص طلاااات", "ننه پولی چند سانت دوس داری؟", "دست و پا نزن ننه کص گشاد", "ننه ساکر هویت میخوای؟", "کیر سگا تو کص آبجیت ", "از ننت بپرس آب کیر پرتقالی دوس داره؟", "پستون ننت چنده", "تخخخخ بیا بالا ادبی", "مادرت دستو پا میزنه زیرم", "ننه سکسی بیا یه ساک بزن بخندیم", "خمینی اومد جاده دهاتتونو آسفالت کرد اومدید شهر و گرنه ننت کجا کص میداد؟", "گص کش", "کس ننه", "کص ننت", "کس خواهر", "کس خوار", "کس خارت", "کس ابجیت", "کص لیس", "ساک بزن", "ساک مجلسی", "ننه الکسیس", "نن الکسیس", "ناموستو گاییدم", "ننه زنا", "کس خل", "کس مخ", "کس مغز", "کس مغذ", "خوارکس", "خوار کس", "خواهرکس", "خواهر کس", "حروم زاده", "حرومزاده", "خار کس", "تخم سگ", "پدر سگ", "پدرسگ", "پدر صگ", "پدرصگ", "ننه سگ", "نن سگ", "نن صگ", "ننه صگ", "ننه خراب", "تخخخخخخخخخ", "نن خراب", "مادر سگ", "مادر خراب", "مادرتو گاییدم", "تخم جن", "تخم سگ", "مادرتو گاییدم", "ننه حمومی", "نن حمومی", "نن گشاد", "ننه گشاد", "نن خایه خور", "تخخخخخخخخخ", "نن ممه", "کس عمت", "کس کش", "کس بیبیت", "کص عمت", "کص خالت", "کس بابا", "کس خر", "کس کون", "کس مامیت", "کس مادرن", "مادر کسده", "خوار کسده", "تخخخخخخخخخ", "ننه کس", "بیناموس", "بی ناموس", "شل ناموس", "سگ ناموس", "ننه جندتو گاییدم باو ", "چچچچ نگاییدم سیک کن پلیز D:", "ننه حمومی", "چچچچچچچ", "لز ننع", "ننه الکسیس", "کص ننت", "بالا باش", "ننت رو میگام", "کیرم از پهنا تو کص ننت", "مادر کیر دزد", "ننع حرومی", "تونل تو کص ننت", "کیر تک تک بکس تلع گلد تو کص ننت", "کص خوار بدخواه", "خوار کصده", "ننع باطل", "حروم لقمع", "ننه سگ ناموس", "منو ننت شما همه چچچچ", "ننه کیر قاپ زن", "ننع اوبی", "ننه کیر دزد", "ننه کیونی", "ننه کصپاره", "زنا زادع", "کیر سگ تو کص نتت پخخخ", "ولد زنا", "ننه خیابونی", "هیس بع کس حساسیت دارم", "کص نگو ننه سگ که میکنمتتاااا", "کص نن جندت", "ننه سگ", "ننه کونی", "ننه زیرابی", "بکن ننتم", "ننع فاسد", "ننه ساکر", "کس ننع بدخواه", "نگاییدم", "مادر سگ", "ننع شرطی", "گی ننع", "بابات شاشیدتت چچچچچچ", "ننه ماهر", "حرومزاده", "ننه کص", "کص ننت باو", "پدر سگ", "سیک کن کص ننت نبینمت", "کونده", "ننه ولو", "ننه سگ", "مادر جنده", "کص کپک زدع", "ننع لنگی", "ننه خیراتی", "سجده کن سگ ننع", "ننه خیابونی", "ننه کارتونی", "تکرار میکنم کص ننت", "تلگرام تو کس ننت", "کص خوارت", "خوار کیونی", "پا بزن چچچچچ", "مادرتو گاییدم", "گوز ننع", "کیرم تو دهن ننت", "ننع همگانی", "کیرم تو کص زیدت", "کیر تو ممهای ابجیت", "ابجی سگ", "کس دست ریدی با تایپ کردنت چچچ", "ابجی جنده", "ننع سگ سیبیل", "بده بکنیم چچچچ", "کص ناموس", "شل ناموس", "ریدم پس کلت چچچچچ", "ننه شل", "ننع قسطی", "ننه ول", "دست و پا نزن کس ننع", "ننه ولو", "خوارتو گاییدم", "محوی!؟", "ننت خوبع!؟", "کس زنت", "شاش ننع", "ننه حیاطی \\\\\/:", "نن غسلی", "کیرم تو کس ننت بگو مرسی چچچچ", "ابم تو کص ننت :\\\\\/", "فاک یور مادر خوار سگ پخخخ", "کیر سگ تو کص ننت", "کص زن", "ننه فراری", "بکن ننتم من باو جمع کن ننه جنده \\\\\/:::", "ننه جنده بیا واسم ساک بزن", "حرف نزن که نکنمت هااا :|", "کیر تو کص ننت😐", "کص کص کص ننت😂", "کصصصص ننت جووون", "سگ ننع", "کص خوارت", "کیری فیس", "کلع کیری", "تیز باش سیک کن نبینمت", "فلج تیز باش چچچ", "بیا ننتو ببر", "بکن ننتم باو ", "کیرم تو بدخواه", "چچچچچچچ", "ننه جنده", "ننه کص طلا", "ننه کون طلا", "کس ننت بزارم بخندیم!؟", "کیرم دهنت", "مادر خراب", "ننه کونی", "هر چی گفتی تو کص ننت خخخخخخخ", "کص ناموست بای", "کص ننت بای :\\\\\/\\\\\/", "کص ناموست باعی تخخخخخ", "کون گلابی!", "ریدی آب قطع", "کص کن ننتم کع", "نن کونی", "نن خوشمزه", "ننه لوس", " نن یه چشم ", "ننه چاقال", "ننه جینده", "ننه حرصی ", "نن لشی", "ننه ساکر", "نن تخمی", "ننه بی هویت", "نن کس", "نن سکسی", "نن فراری", "لش ننه", "سگ ننه", "شل ننه", "ننه تخمی", "ننه تونلی", "ننه کوون", "نن خشگل", "نن جنده", "نن ول ", "نن سکسی", "نن لش", "کس نن ", "نن کون", "نن رایگان", "نن خاردار", "ننه کیر سوار", "نن پفیوز", "نن محوی", "ننه بگایی", "ننه بمبی", "ننه الکسیس", "نن خیابونی", "نن عنی", "نن ساپورتی", "نن لاشخور", "ننه طلا", "ننه عمومی", "ننه هر جایی", "نن دیوث", "تخخخخخخخخخ", "نن ریدنی", "نن بی وجود", "ننه سیکی", "ننه کییر", "نن گشاد", "نن پولی", "نن ول", "نن هرزه", "ننه لاشی کیری", "ننه ویندوزی", "نن تایپی", "نن برقی", "نن شاشی", "ننه درازی", "شل ننع", "یکن ننتم که", "کس خوار بدخواه", "آب چاقال", "ننه جریده", "ننه سگ سفید", "آب کون", "ننه 85", "ننه سوپری", "بخورش", "کس ن", "خوارتو گاییدم", "خارکسده", "گی پدر", "آب چاقال", "زنا زاده", "زن جنده", "سگ پدر", "مادر جنده", "ننع کیر خور", "چچچچچ", "تیز بالا", "ننه سگو با کسشر در میره", "کیر سگ تو کص ننت", "kos kesh", "kir", "kiri", "nane lashi", "kos", "kharet", "blis kirmo", "اوبی کونی هرزه", "کیرم لا کص خارت", "کیری", "ننه لاشی", "ممه", "کص", "کیر", "بی خایه", "ننه لش", "بی پدرمادر", "خارکصده", "مادر جنده", "کصکش", "کیرم کون مادرت😂😂😂😂", "بالا باش کیرم کص مادرت😂😂😂", "مادرتو میگام نوچه جون بالا😂😂??", "اب خارکصته تند تند تایپ کن ببینم", "مادرتو میگام بخای فرار کنی", "لال شو", "کیرم تو خارت", "بصیک بچه کونی", "بای بده ننه پولی", "کیرم تو ننت اوبی", "نگامت کص ننه ", "کص ننه پرده ارتجاعیت", "ننتو شبی چند میدی؟", "خارتو با روغن جامد گاییدم", "کص آبجیت ", "زنا زادع ", "ننه خیابونی", "گی ننه", "آبم لا کص ننت چجوری میشه", "بالا باش ننه کیر دزد", "ننت مجلسی میزنه؟", "کصصصص ننت جووووون", "ننه جریده", "گی پدر زنا زادع ", "ننتو کرایه میدی؟", "شل ننه بالا باش", "خارکصده به ننت بگو رو کیرم خوش میگذره؟", "ننه توله کص ننتو جر میدم", "بیا ننتو ببر زخمش کردم", "کص ننتو بزارم یکم بخندیم", "به ننت بگو بیاد واسم پر توف بزنه خرجتونو بدم یتیم", "ننه کون طلا بیا بالا😂", "یتیم بیا بغلم ", "ننت گنگ بنگ دوس داره؟", "بیا بگامت شاد شی خار کصده", "کیرم تو کص ننت بگو باشه😂", "داداش دوس داری یا آبجی ننه پولی", "۵۰ میدم ننتو بده", "فلج تیز باش ننتو بیار", "کیرم کص آبجی کص طلاااات", "ننه پولی چند سانت دوس داری؟", "دست و پا نزن ننه کص گشاد", "ننه ساکر هویت میخوای؟", "کیر سگا تو کص آبجیت ", "از ننت بپرس آب کیر پرتقالی دوس داره؟", "پستون ننت چنده", "تخخخخ بیا بالا ادبی", "مادرت دستو پا میزنه زیرم", "ننه سکسی بیا یه ساک بزن بخندیم", "خمینی اومد جاده دهاتتونو آسفالت کرد اومدید شهر و گرنه ننت کجا کص میداد؟", "کیرم تا ته و از پهنا تو کص مادرت", "کص ناموس مادرت", "مادر کص پاپیونی ", "مادر جنده حروم تخمی", "اوبی زاده حقیر", "بابات زیر کیرم بزرگ شد", "اسمم رو کون مادرت تتو شده", "خیخیخیخیخی", "چچچچچچچچ", "زجه بزن ناموس گلابی", "مادرت کیرمه ", "بابات منم ", "تخم سگ حروم زاده ", "کص ناموست ", "خواهرتو گاییدم", "ریدم بهت بیشعور", " بی شرف", " ریدم تو مغزت", " بی ارزش", " کصکش", " ریدم توی ناموست", " بی ناموس", " مادرجنده", " خواهر کصکش", " ریدم توی کل طایفت", " بی ناموس برو", " خوشم ازت نمیاد کصکش", " تو کصکشی", " برو خواهر جنده", "برو مادرجنده", " برو برادر کونی", " کونکش", "عوض بی ناموس", "ریدم تو قبر مادرت", "ریدم تو قبر پدرت", " ریدم تو قبرت", " ریدم تو زاتت", " ریدم تو خواهر جنده", " خواهر جندت خوبه", " مادر جندت خوبه", " پدر کونکشت خوبه", "برادر کونیت خوب", " پدرسگ", " مادر سگ", " برادر سگ", " خواهر سگ", " خواهر جندت چی", " مادر جندت چی", " پدر کونیت چی", " برادر کونیت چی", " اره جنده ها", " تو جنده ای", " تو کونی ای", " توی کصکشی", " خوشم از جنده ها نمیاد", " خواهرت جنده شده", " مادرت جنده شده", " جنده برو خودت رو جمع کن", " مامانت امشب روی کی هستش", " خواهرت پیش کیه", " برادرت داره کجا کون میده", " بابای قرمساقت کو", " خواهرت امشب روی کی هستش", " مادرت امشب روی کی خوابیده", "ننت پر توف میزنی بابات شم؟", "اوب کونی بزن به چاک تا ننتو جلوت حامله نکردم", " ریدم بهت", " بیشعور", " بی شرف", " ریدم تو مغزت", " بی ارزش", " کصکش", " ریدم توی ناموست", " بی ناموس", " مادرجنده", " خواهر کصکش", " ریدم توی کل طایفت", " بی ناموس برو", " خوشم ازت نمیاد کصکش", " تو کصکشی", " برو خواهر جنده", " برو مادرجنده", " برو برادر کونی", " کونکش", " عوض بی ناموس", " ریدم تو قبر مادرت", " ریدم تو قبر پدرت", " ریدم تو قبرت", " ریدم تو زاتت", " ریدم تو خواهر جنده", " خواهر جندت خوبه", " مادر جندت خوبه", " پدر کونکشت خوبه", " برادر کونیت خوب", " پدرسگ", " مادر سگ", " برادر سگ", " خواهر سگ", " خواهر جندت چی", " مادر جندت چی", " پدر کونیت چی", " برادر کونیت چی", " اره جنده ها", " تو جنده ای", " تو کونی ای", " توی کصکشی", " خوشم از جنده ها نمیاد", " خواهرت جنده شده", " مادرت جنده شده", " جنده برو خودت رو جمع کن", " مامانت امشب روی کی هستش", " خواهرت پیش کیه", " برادرت داره کجا کون میده", " بابای قرمساقت کو", " خواهرت امشب روی کی هستش", " مادرت امشب روی کی خوابیده", "کیرم کون مادرت😂😂😂😂", "بالا باش کیرم کص مادرت😂😂😂", "مادرتو میگام نوچه جون بالا😂😂😂", "اب خارکصته تند تند تایپ کن ببینم", "مادرتو میگام بخای فرار کنی", "لال شو دیگه نوچه", "مادرتو میگام اف بشی", "کیرم کون مادرت", "کیرم کص مص مادرت بالا", "کیرم تو چشو چال مادرت", "کون مادرتو میگام بالا", "بیناموس  خسته شدی؟", "نبینم خسته بشی بیناموس", "ننتو میکنم", "کیرم کون مادرت 😂😂😂😂😂😂😂", "صلف تو کصننت بالا", "بیناموس بالا باش بهت میگم", "کیر تو مادرت", "کص مص مادرتو بلیسم؟", "کص مادرتو چنگ بزنم؟", "به خدا کصننت بالا ", "مادرتو میگام ", "کیرم کون مادرت بیناموس", "مادرجنده بالا باش", "بیناموس تا کی میخای سطحت گح باشه", "اپدیت شو بیناموس خز بود", "کیرم از پهنا تو ننت", "و اما تو بیناموس چموش", "تو یکیو مادرتو میکنم", "کیرم تو ناموصت ", "کیر تو ننت", "ریش روحانی تو ننت", "کیر تو مادرت😂😂😂", "کص مادرتو مجر بدم", "صلف تو ننت", "بات تو ننت ", "مامانتو میکنم بالا", "کیر ترکا به ناموست", "سطحشو نگا", "تایپ کن بیناموس", "خشاب؟", "کیرم کون مادرت بالا", "بیناموس نبینم خسته بشی", "مادرتو بگام؟", "گح تو سطحت شرفت رف", "بیناموس شرفتو نابود کردم یه کاری کن", "وای کیرم تو سطحت", "بیناموس روانی شدی", "روانیت کردما", "مادرتو کردم کاری کن", "تایپ تو ننت", "بیپدر بالا باش", "و اما تو لر خر", "ننتو میکنم بالا باش", "کیرم لب مادرت بالا😂😂😂", "چطوره بزنم نصلتو گح کنم", "داری تظاهر میکنی ارومی ولی مادرتو کوص کردم", "مادرتو کردم بیغیرت", "هرزه", "وای خدای من اینو نگا", "کیر تو کصننت", "ننتو بلیسم", "منو نگا بیناموس", "کیر تو ننت بسه دیگه", "خسته شدی؟", "ننتو میکنم خسته بشی", "وای دلم کون مادرت بگام", "اف شو احمق", "بیشرف اف شو بهت میگم", "مامان جنده اف شو", "کص مامانت اف شو", "کص لش وا ول کن اینجوری بگو؟", "ای بیناموس چموش", "خارکوصته ای ها", "مامانتو میکنم اف نشی", "گح تو ننت", "سطح یه گح صفتو", "گح کردم تو نصلتا", "چه رویی داری بیناموس", "ناموستو کردم", "رو کص مادرت کیر کنم؟😂😂😂", "نوچه بالا", "کیرم تو ناموصتاا😂😂", "یا مادرتو میگام یا اف میشی", "لالشو دیگه", "بیناموس", "مادرکصته", "ناموص کصده", "وای بدو ببینم میرسی", "کیرم کون مادرت چیکار میکنی اخه", "خارکصته بالا دیگه عه", "کیرم کصمادرت😂😂😂", "کیرم کون ناموصد😂😂😂", "بیناموس من خودم خسته شدم توچی؟", "ای شرف ندار", "مامانتو کردم بیغیرت", "و اما مادر جندت", "تو یکی زیر باش", "اف شو", "خارتو کوص میکنم", "کوصناموصد", "ناموص کونی", "خارکصته ی بۍ غیرت", "شرم کن بیناموس", "مامانتو کرد ", "ای مادرجنده", "بیغیرت", "کیرتو ناموصت", "بیناموس نمیخای اف بشی؟", "ای خارکوصته", "لالشو دیگه", "همه کس کونی", "حرامزاده", "مادرتو میکنم", "بیناموس", "کصشر", "اف شو مادرکوصته", "خارکصته کجایی", "ننتو کردم کاری نمیکنی؟", "کیرتو مادرت لال", "کیرتو ننت بسه", "کیرتو شرفت", "مادرتو میگام بالا", "کیر تو مادرت", "کونی ننه ی حقیر زاده", "وقتی تو کص ننت تلمبه های سرعتی میزدم تو کمرم بودی بعد الان برا بکنه ننت شاخ میشی هعی   ", "تو یه کص ننه ای ک ننتو به من هدیه کردی تا خایه مالیمو کنی مگ نه خخخخ", "انگشت فاکم تو کونه ناموست", "تخته سیاهه مدرسه با معادلات ریاضیه روش تو کص ننت اصلا خخخخخخخ ", "کیرم تا ته خشک خشک با کمی فلفل روش تو کص خارت ", "کص ننت به صورت ضربدری ", "کص خارت به صورت مستطیلی", "رشته کوه آلپ به صورت زنجیره ای تو کص نسلت خخخخ ", "10 دقیقه بیشتر ابم میریخت تو کس ننت این نمیشدی", "فکر کردی ننت یه بار بهمـ داده دیگه شاخی", "اگر ننتو خوب کرده بودم حالا تو اینجوری نمیشدی"];



$DB_A = "DB.json";
if (!file_exists($DB_A)) {
    $Base = [
        "SelfAdmins" => [0 => 1],
        "enemies"    => [0 => 1],
        "Mutes"      => [0 => 1],
        'spam'       => ['limit' => 5],
        'protection' => 'on',
        'antipv'     => 'off',
        'foshlimit'  => 2,
        'Fun'        => [
            'DiceDetection'  => 'off',
            'Actions'        => 'off',
            'FirstComment'   => [
                'status' => "off",
                'text'   => "(:"
            ],
            'RandomNameBioTime' => [
                'status'  => 'off',
                'time'    => 'off',
                'name'    => 'off',
                'bio'     => 'off',
                'hybrid'  => 'off',
                'randbio' => 'off'
            ]
        ],
        "Fosh"       => $fz,
        "Emoji"      => $ez,
        'Channels' => [0 => 1]
    ];
    file_put_contents($DB_A, json_encode($Base, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}
include 'madeline.php';
date_default_timezone_set('Asia/Tehran');


function fix($str)
{
    return strtolower(str_replace([',', '.', '[', ']', '-', '^', '$', '(', ')', '*', '|', '{', '}', '\\', '#', '&', '!', '~', '/', ' ', '\'', '"', ':', ';'], '', $str));
}
function is_english($str)
{
    if (strlen($str) != strlen(utf8_decode($str))) {
        return false;
    } else {
        return true;
    }
}
function str_split_unicode($str, $l = 0)
{
    if ($l > 0) {
        $ret = array();
        $len = mb_strlen($str, "UTF-8");
        for ($i = 0; $i < $len; $i += $l) {
            $ret[] = mb_substr($str, $i, $l, "UTF-8");
        }
        return $ret;
    }
    return preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);
}
$font =
    [
        ['ⓠ', 'ⓦ', 'ⓔ', 'ⓡ', 'ⓣ', 'ⓨ', 'ⓤ', 'ⓘ', 'ⓞ', 'ⓟ', 'ⓐ', 'ⓢ', 'ⓓ', 'ⓕ', 'ⓖ', 'ⓗ', 'ⓙ', 'ⓚ', 'ⓛ', 'ⓩ', 'ⓧ', 'ⓒ', 'ⓥ', 'ⓑ', 'ⓝ', 'ⓜ', '⓪', '➀', '➁', '➂', '➃', '➄', '➅', '➆', '➇', '➈'],
        ['θ', 'w', 'ε', 'ʀ', 'τ', 'ψ', 'υ', 'ι', 'ɸ', '⅊', 'α', 'ៜ', 'δ', 'ẜ', 'ϑ', 'հ', 'յ', 'Κ', 'ℓ', 'z', 'ϰ', 'ϲ', '⋎', 'β', 'ƞ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ω', 'ɛ', 'я', 'т', 'ʏ', 'ʋ', 'ι', 'σ', 'ρ', 'α', 'ƨ', '∂', 'ғ', 'ɢ', 'н', 'ʝ', 'κ', 'ℓ', 'ʓ', 'ϰ', 'c', 'ѵ', 'в', 'и', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['🇶 ', '🇼 ', '🇪 ', '🇷 ', '🇹 ', '🇾 ', '🇻 ', '🇮 ', '🇴 ', '🇵 ', '🇦 ', '🇸 ', '🇩 ', '🇫 ', '🇬 ', '🇭 ', '🇯 ', '🇰 ', '🇱 ', '🇿 ', '🇽 ', '🇨 ', '🇺 ', '🇧 ', '🇳 ', '🇲 ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ŵ', 'È', 'ŕ', 'ť', 'ý', 'ú', 'Ì', 'ő', 'p', 'á', 'ś', 'ď', 'f', 'ġ', 'ĥ', 'j', 'k', 'l', 'ź', 'x', 'ć', 'v', 'b', 'ń', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ʠ', 'w', 'ę', 'ŗ', 'ţ', 'ƴ', 'ų', 'į', 'ǫ', 'ƥ', 'ą', 'ş', 'd', 'ƒ', 'ɠ', 'ђ', 'ʝ', 'ķ', 'ɭ', 'ʐ', 'ҳ', 'ç', 'v', 'ɓ', 'ŋ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ꮕ', 'Ꮿ', 'Ꭼ', 'Ꮢ', 'Ꮏ', 'Ꮍ', 'Ꮼ', 'Ꭸ', 'Ꮎ', 'Ꮲ', 'Ꭿ', 'Ꮥ', 'Ꭰ', 'Ꮀ', 'Ꮆ', 'Ꮋ', 'Ꮰ', 'Ꮶ', 'Ꮭ', 'Ꮓ', 'Ꮂ', 'Ꮸ', 'Ꮙ', 'Ᏸ', 'Ꮑ', 'Ꮇ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̸', 'w̸', 'e̸', 'r̸', 't̸', 'y̸', 'u̸', 'i̸', 'o̸', 'p̸', 'a̸', 's̸', 'd̸', 'f̸', 'g̸', 'h̸', 'j̸', 'k̸', 'l̸', 'z̸', 'x̸', 'c̸', 'v̸', 'b̸', 'n̸', 'm̸', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̲̅', 'w̲̅', 'e̲̅', 'r̲̅', 't̲̅', 'y̲̅', 'u̲̅', 'i̲̅', 'o̲̅', 'p̲̅', 'a̲̅', 's̲̅', 'd̲̅', 'f̲̅', 'g̲̅', 'h̲̅', 'j̲̅', 'k̲̅', 'l̲̅', 'z̲̅', 'x̲̅', 'c̲̅', 'v̲̅', 'b̲̅', 'n̲̅', 'm̲̅', '0̲̅', '1̲̅', '2̲̅', '3̲̅', '4̲̅', '5̲̅', '6̲̅', '7̲̅', '8̲̅', '9̲̅'],
        ['ᑫ', 'ᗯ', 'Ɛ', 'ᖇ', 'Ƭ', 'Ƴ', 'ᑌ', 'Ɩ', 'O', 'ᑭ', 'ᗩ', 'ᔕ', 'ᗪ', 'F', 'G', 'ℎ', 'ᒍ', 'Ƙ', 'ᒪ', 'ᘔ', '᙭', 'ᑕ', 'ᐯ', 'ᗷ', 'ᑎ', 'ᗰ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̤̈', 'ẅ̤', 'ë̤', 'r̤̈', 'ẗ̤', 'ÿ̤', 'ṳ̈', 'ï̤', 'ö̤', 'p̤̈', 'ä̤', 's̤̈', 'd̤̈', 'f̤̈', 'g̤̈', 'ḧ̤', 'j̤̈', 'k̤̈', 'l̤̈', 'z̤̈', 'ẍ̤', 'c̤̈', 'v̤̈', 'b̤̈', 'n̤̈', 'm̤̈', '0̤̈', '1̤̈', '2̤̈', '3̤̈', '4̤̈', '5̤̈', '6̤̈', '7̤̈', '8̤̈', '9̤̈'],
        ['ｑ', 'ｗ', 'ｅ', 'ｒ', 'ｔ', 'ｙ', 'ｕ', 'ｉ', 'ｏ', 'ｐ', 'ａ', 'ｓ', 'ｄ', 'ｆ', 'ｇ', 'ｈ', 'ｊ', 'ｋ', 'ｌ', 'ｚ', 'ｘ', 'ｃ', 'ｖ', 'ｂ', 'ｎ', 'ｍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'щ', 'ё', 'я', 'т', 'у', 'ц', 'ї', 'о', 'p', 'a', '$', 'd', 'f', 'g', 'н', 'j', 'к', 'l', 'z', 'ж', 'c', 'v', 'в', 'п', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̶', 'w̶', 'e̶', 'r̶', 't̶', 'y̶', 'u̶', 'i̶', 'o̶', 'p̶', 'a̶', 's̶', 'd̶', 'f̶', 'g̶', 'h̶', 'j̶', 'k̶', 'l̶', 'z̶', 'x̶', 'c̶', 'v̶', 'b̶', 'n̶', 'm̶', '0̶', '1̶', '2̶', '3̶', '4̶', '5̶', '6̶', '7̶', '8̶', '9̶'],
        ['ᖳ', 'ᙡ', 'ᙓ', 'ᖇ', 't', 'Ꭹ', 'ᘎ', 'ᓮ', 'ᗝ', 'ᕈ', 'ᗩ', 'ᔕ', 'ᖙ', 'ℱ', '𐌾', 'ᖺ', 'ᒎ', 'Ḱ', 'ᒪ', 'ᔓ', 'ჯ', 'ᙅ', 'Ⅴ', 'ᕊ', 'ᘉ', 'ᙢ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ợ', 'ฬ', 'є', 'г', 't', '⑂', 'ย', 'เ', '๏', 'ק', 'ค', 'ร', 'Ԁ', 'Ŧ', 'g', 'ђ', 'ן', 'к', 'l', 'z', 'ж', 'ϲ', 'ṽ', 'ƅ', 'ภ', '៣', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'w', 'e', 'r', 'т', 'y', 'υ', 'ι', 'o', 'p', 'a', 'ѕ', 'd', 'ғ', 'g', 'н', 'j', 'ĸ', 'l', 'z', 'х', 'c', 'v', 'в', 'n', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ℚ', 'Ꮗ', 'ℰ', 'ℛ', '𝒯', 'Ꮍ', 'U', 'ℐ', 'Ꮎ', 'ℙ', 'Ꭿ', 'Ѕ', 'ⅅ', 'ℱ', 'Ꮆ', 'ℋ', 'Ꭻ', 'Ꮶ', 'ℒ', 'ℤ', 'X', 'ℂ', 'Ꮙ', 'ℬ', 'ℕ', 'ℳ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ω', 'є', 'я', 'т', 'у', 'υ', 'ι', 'σ', 'ρ', 'α', 'ѕ', '∂', 'ƒ', 'g', 'н', 'נ', 'к', 'ℓ', 'z', 'χ', '¢', 'ν', 'в', 'η', 'м', '0', 'ı', '2', 'ʓ', '4', '5', 'б', 'ך', '8', '9'],
        ['Ꮕ', 'Ꮿ', 'Ɛ', 'Ŕ', 'Ŧ', 'Y', 'Ʊ', 'Ī', 'Ꮎ', 'Ṗ', 'Λ', 'S', 'D', 'F', 'Ɠ', 'Ĥ', 'Ĵ', 'Ҡ', 'Ŀ', 'Z', 'Ӿ', 'Ƈ', '√', 'ß', 'И', 'M', '0', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨'],
        ['q', 'ώ', 'έ', 'ŕ', 'ţ', 'ч', 'ù', 'ί', 'ό', 'ρ', 'ά', 'ş', 'đ', 'ғ', 'ģ', 'ħ', 'ј', 'ķ', 'Ļ', 'ž', 'x', 'ς', 'ν', 'в', 'ή', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ǫ', 'Ш', 'Ξ', 'Я', 'Т', 'Џ', 'U', 'ł', 'Ф', 'P', 'Λ', 'S', 'Ð', 'Ŧ', 'G', 'H', 'J', 'К', 'Ł', 'Z', 'Ж', 'Ͼ', 'V', 'Б', 'Л', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['[̲̅q̲̅]', '[̲̅w̲̅]', '[̲̅e̲̅]', '[̲̅r̲̅]', '[̲̅t̲̅]', '[̲̅y̲̅]', '[̲̅u̲̅]', '[̲̅i̲̅]', '[̲̅o̲̅]', '[̲̅p̲̅]', '[̲̅a̲̅]', '[̲̅s̲̅]', '[̲̅d̲̅]', '[̲̅f̲̅]', '[̲̅g̲̅]', '[̲̅h̲̅]', '[̲̅j̲̅]', '[̲̅k̲̅]', '[̲̅l̲̅]', '[̲̅z̲̅]', '[̲̅x̲̅]', '[̲̅c̲̅]', '[̲̅v̲̅]', '[̲̅b̲̅]', '[̲̅n̲̅]', '[̲̅m̲̅]', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̰̃', 'w̰̃', 'ḛ̃', 'r̰̃', 't̰̃', 'ỹ̰', 'ṵ̃', 'ḭ̃', 'õ̰', 'p̰̃', 'ã̰', 's̰̃', 'd̰̃', 'f̰̃', 'g̰̃', 'h̰̃', 'j̰̃', 'k̰̃', 'l̰̃', 'z̰̃', 'x̰̃', 'c̰̃', 'ṽ̰', 'b̰̃', 'ñ̰', 'm̰̃', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['⒬', '⒲', '⒠', '⒭', '⒯', '⒴', '⒰', '⒤', '⒪', '⒫', '⒜', '⒮', '⒟', '⒡', '⒢', '⒣', '⒥', '⒦', '⒧', '⒵', '⒳', '⒞', '⒱', '⒝', '⒩', '⒨', '0', '⑴', '⑵', '⑶', '⑷', '⑸', '⑹', '⑺', '⑻', '⑼'],
        ['Q҉', 'W҉', 'E҉', 'R҉', 'T҉', 'Y҉', 'U҉', 'I҉', 'O҉', 'P҉', 'A҉', 'S҉', 'D҉', 'F҉', 'G҉', 'H҉', 'J҉', 'K҉', 'L҉', 'Z҉', 'X҉', 'C҉', 'V҉', 'B҉', 'N҉', 'M҉', '0҉', '1҉', '2҉', '3҉', '4҉', '5҉', '6҉', '7҉', '8҉', '9҉'],
        ['q͎', 'w͎', 'e͎', 'r͎', 't͎', 'y͎', 'u͎', 'i͎', 'o͎', 'p͎', 'a͎', 's͎', 'd͎', 'f͎', 'g͎', 'h͎', 'j͎', 'k͎', 'l͎', 'z͎', 'x͎', 'c͎', 'v͎', 'b͎', 'n͎', 'm͎', '0͎', '1͎', '2͎', '3͎', '4͎', '5͎', '6͎', '7͎', '8͎', '9͎'],
        ['qͦ', 'wͦ', 'eͦ', 'rͦ', 'tͦ', 'yͦ', 'uͦ', 'iͦ', 'oͦ', 'pͦ', 'aͦ', 'sͦ', 'dͦ', 'fͦ', 'gͦ', 'hͦ', 'jͦ', 'kͦ', 'lͦ', 'zͦ', 'xͦ', 'cͦ', 'vͦ', 'bͦ', 'nͦ', 'mͦ', '0ͦ', '1ͦ', '2ͦ', '3ͦ', '4ͦ', '5ͦ', '6ͦ', '7ͦ', '8ͦ', '9ͦ'],
        ['Q⃟', 'W⃟', 'E⃟', 'R⃟', 'T⃟', 'Y⃟', 'U⃟', 'I⃟', 'O⃟', 'P⃟', 'A⃟', 'S⃟', 'D⃟', 'F⃟', 'G⃟', 'H⃟', 'J⃟', 'K⃟', 'L⃟', 'Z⃟', 'X⃟', 'C⃟', 'V⃟', 'B⃟', 'N⃟', 'M⃟', '0⃟', '1⃟', '2⃟', '3⃟', '4⃟', '5⃟', '6⃟', '7⃟', '8⃟', '9⃟'],
        ['Q͡', 'W͡', 'E͡', 'R͡', 'T͡', 'Y͡', 'U͡', 'I͡', 'O͡', 'P͡', 'A͡', 'S͡', 'D͡', 'F͡', 'G͡', 'H͡', 'J͡', 'K͡', 'L͡', 'Z͡', 'X͡', 'C͡', 'V͡', 'B͡', 'N͡', 'M͡', '0͡', '1͡', '2͡', '3͡', '4͡', '5͡', '6͡', '7͡', '8͡', '9͡'],
        ['Q⃗', 'W⃗', 'E⃗', 'R⃗', 'T⃗', 'Y⃗', 'U⃗', 'I⃗', 'O⃗', 'P⃗', 'A⃗', 'S⃗', 'D⃗', 'F⃗', 'G⃗', 'H⃗', 'J⃗', 'K⃗', 'L⃗', 'Z⃗', 'X⃗', 'C⃗', 'V⃗', 'B⃗', 'N⃗', 'M⃗', '0⃗', '1⃗', '2⃗', '3⃗', '4⃗', '5⃗', '6⃗', '7⃗', '8⃗', '9⃗'],
        ['Q⃖', 'W⃖', 'E⃖', 'R⃖', 'T⃖', 'Y⃖', 'U⃖', 'I⃖', 'O⃖', 'P⃖', 'A⃖', 'S⃖', 'D⃖', 'F⃖', 'G⃖', 'H⃖', 'J⃖', 'K⃖', 'L⃖', 'Z⃖', 'X⃖', 'C⃖', 'V⃖', 'B⃖', 'N⃖', 'M⃖', '0⃖', '1⃖', '2⃖', '3⃖', '4⃖', '5⃖', '6⃖', '7⃖', '8⃖', '9⃖'],
        ['q͙', 'w͙', 'e͙', 'r͙', 't͙', 'y͙', 'u͙', 'i͙', 'o͙', 'p͙', 'a͙', 's͙', 'd͙', 'f͙', 'g͙', 'h͙', 'j͙', 'k͙', 'l͙', 'z͙', 'x͙', 'c͙', 'v͙', 'b͙', 'n͙', 'm͙', '0͙', '1͙', '2͙', '3͙', '4͙', '5͙', '6͙', '7͙', '8͙', '9͙'],
        ['Q⃕', 'W⃕', 'E⃕', 'R⃕', 'T⃕', 'Y⃕', 'U⃕', 'I⃕', 'O⃕', 'P⃕', 'A⃕', 'S⃕', 'D⃕', 'F⃕', 'G⃕', 'H⃕', 'J⃕', 'K⃕', 'L⃕', 'Z⃕', 'X⃕', 'C⃕', 'V⃕', 'B⃕', 'N⃕', 'M⃕', '0⃕', '1⃕', '2⃕', '3⃕', '4⃕', '5⃕', '6⃕', '7⃕', '8⃕', '9⃕'],
        ['Q͛', 'W͛', 'E͛', 'R͛', 'T͛', 'Y͛', 'U͛', 'I͛', 'O͛', 'P͛', 'A͛', 'S͛', 'D͛', 'F͛', 'G͛', 'H͛', 'J͛', 'K͛', 'L͛', 'Z͛', 'X͛', 'C͛', 'V͛', 'B͛', 'N͛', 'M͛', '0͛', '1͛', '2͛', '3͛', '4͛', '5͛', '6͛', '7͛', '8͛', '9͛'],
        ['Q͌', 'W͌', 'E͌', 'R͌', 'T͌', 'Y͌', 'U͌', 'I͌', 'O͌', 'P͌', 'A͌', 'S͌', 'D͌', 'F͌', 'G͌', 'H͌', 'J͌', 'K͌', 'L͌', 'Z͌', 'X͌', 'C͌', 'V͌', 'B͌', 'N͌', 'M͌', '0͌', '1͌', '2͌', '3͌', '4͌', '5͌', '6͌', '7͌', '8͌', '9͌'],
        ['ᵟ', 'ᵂ', 'ᴱ', 'ᴿ', 'ᵀ', 'ᵞ', 'ᵁ', 'ᴵ', 'ᴼ', 'ᴾ', 'ᴬ', 'ˢ', 'ᴰ', 'ᶠ', 'ᴳ', 'ᴴ', 'ᴶ', 'ᴷ', 'ᴸ', 'ᶻ', 'ˣ', 'ᶜ', 'ᵛ', 'ᴮ', 'ᴺ', 'ᴹ', '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'],
        ['q̾', 'w̾', 'e̾', 'r̾', 't̾', 'y̾', 'u̾', 'i̾', 'o̾', 'p̾', 'a̾', 's̾', 'd̾', 'f̾', 'g̾', 'h̾', 'j̾', 'k̾', 'l̾', 'z̾', 'x̾', 'c̾', 'v̾', 'b̾', 'n̾', 'm̾', '0̾', '1̾', '2̾', '3̾', '4̾', '5̾', '6̾', '7̾', '8̾', '9̾'],
        ['Q҈', 'W҈', 'E҈', 'R҈', 'T҈', 'Y҈', 'U҈', 'I҈', 'O҈', 'P҈', 'A҈', 'S҈', 'D҈', 'F҈', 'G҈', 'H҈', 'J҈', 'K҈', 'L҈', 'Z҈', 'X҈', 'C҈', 'V҈', 'B҈', 'N҈', 'M҈', '0҈', '1҈', '2҈', '3҈', '4҈', '5҈', '6҈', '7҈', '8҈', '9҈'],
        ['q̥', 'w̥', 'e̥', 'r̥', 't̥', 'y̥', 'u̥', 'i̥', 'o̥', 'p̥', 'ḁ', 's̥', 'd̥', 'f̥', 'g̥', 'h̥', 'j̥', 'k̥', 'l̥', 'z̥', 'x̥', 'c̥', 'v̥', 'b̥', 'n̥', 'm̥', '0̥', '1̥', '2̥', '3̥', '4̥', '5̥', '6̥', '7̥', '8̥', '9̥'],
        ['q̽', 'w̽', 'e̽', 'r̽', 't̽', 'y̽', 'u̽', 'i̽', 'o̽', 'p̽', 'a̽', 's̽', 'd̽', 'f̽', 'g̽', 'h̽', 'j̽', 'k̽', 'l̽', 'z̽', 'x̽', 'c̽', 'v̽', 'b̽', 'n̽', 'm̽', '0̽', '1̽', '2̽', '3̽', '4̽', '5̽', '6̽', '7̽', '8̽', '9̽'],
        ['q꙰', 'w꙰', 'e꙰', 'r꙰', 't꙰', 'y꙰', 'u꙰', 'i꙰', 'o꙰', 'p꙰', 'a꙰', 's꙰', 'd꙰', 'f꙰', 'g꙰', 'h꙰', 'j꙰', 'k꙰', 'l꙰', 'z꙰', 'x꙰', 'c꙰', 'v꙰', 'b꙰', 'n꙰', 'm꙰', '0꙰', '1꙰', '2꙰', '3꙰', '4꙰', '5꙰', '6꙰', '7꙰', '8꙰', '9꙰'],
        ['Q͟', 'W͟', 'E͟', 'R͟', 'T͟', 'Y͟', 'U͟', 'I͟', 'O͟', 'P͟', 'A͟', 'S͟', 'D͟', 'F͟', 'G͟', 'H͟', 'J͟', 'K͟', 'L͟', 'Z͟', 'X͟', 'C͟', 'V͟', 'B͟', 'N͟', 'M͟', '0͟', '1͟', '2͟', '3͟', '4͟', '5͟', '6͟', '7͟', '8͟', '9͟'],
        ['Q̳', 'W̳', 'E̳', 'R̳', 'T̳', 'Y̳', 'U̳', 'I̳', 'O̳', 'P̳', 'A̳', 'S̳', 'D̳', 'F̳', 'G̳', 'H̳', 'J̳', 'K̳', 'L̳', 'Z̳', 'X̳', 'C̳', 'V̳', 'B̳', 'N̳', 'M̳', '0̳', '1̳', '2̳', '3̳', '4̳', '5̳', '6̳', '7̳', '8̳', '9̳'],
        ['Q', 'Ш', 'Σ', 'R', 'T', 'Ψ', 'U', 'I', 'Ω', 'P', 'Δ', 'S', 'D', 'Ғ', 'G', 'H', 'J', 'Ҝ', 'L', 'Z', 'X', 'C', '∇', 'β', 'Π', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ա', 'ɛ', 'ʀ', '⊺', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ⓠ', 'Ⓦ', 'Ⓔ', 'Ⓡ', 'Ⓣ', 'Ⓨ', 'Ⓤ', 'Ⓘ', 'Ⓞ', 'Ⓟ', 'Ⓐ', 'Ⓢ', 'Ⓓ', 'Ⓕ', 'Ⓖ', 'Ⓗ', 'Ⓙ', 'Ⓚ', 'Ⓛ', 'Ⓩ', 'Ⓧ', 'Ⓒ', 'Ⓥ', 'Ⓑ', 'Ⓝ', 'Ⓜ', '0⃣', '1⃣', '2⃣', '3⃣', '4⃣', '5⃣', '6⃣', '7⃣', '8⃣', '9⃣'],
        ['Q͜͡', 'W͜͡', 'E͜͡', 'R͜͡', 'T͜͡', 'Y͜͡', 'U͜͡', 'I͜͡', 'O͜͡', 'P͜͡', 'A͜͡', 'S͜͡', 'D͜͡', 'F͜͡', 'G͜͡', 'H͜͡', 'J͜͡', 'K͜͡', 'L͜͡', 'Z͜͡', 'X͜͡', 'C͜͡', 'V͜͡', 'B͜͡', 'N͜͡', 'M͜͡', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ῳ', '∑', 'Я', 'ɬ', 'ㄚ', 'ㄩ', 'ⅰ', '◊', 'ㄕ', '∆', '𐒡', '∂', 'ﾓ', 'б', 'ｻ', 'ᴊ', 'к', 'ﾚ', 'z', 'χ', 'ς', '𐀖', '๒', 'и', '㎡', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'w', 'є', 'r', 't', 'ч', 'u', 'í', 'σ', 'p', 'α', 'ѕ', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'х', 'c', 'v', 'в', 'n', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ẇ', 'є', 'я', 'ṭ', 'ʏ', 'ȗ', 'ı', 'ȏ', 'ƿ', 'ѧ', 'ṡ', 'Ԁ', 'ғ', 'ɢ', 'һ', 'j', 'ҡ', 'ʟ', 'ẓ', '×', 'ċ', 'ṿ', 'ɞ', 'ṅ', 'ṃ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ꆰ', 'ꅏ', 'ꍟ', 'ꋪ', '꓄', 'ꌩ', 'ꀎ', 'ꀤ', 'ꂦ', 'ᖘ', 'ꍏ', 'ꌗ', 'ꀸ', 'ꎇ', 'ꁅ', 'ꃅ', 'ꀭ', 'ꀘ', '꒒', 'ℤ', 'ꊼ', 'ꉓ', 'ᐯ', 'ꌃ', 'ꈤ', 'ᛗ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'Ꮃ', 'Ꭼ', 'Ꮢ', 'Ҭ', 'Ꮍ', 'u', 'Ꭵ', 'Ꮎ', 'Ꮲ', 'Ꭺ', 's', 'Ꭰ', 'f', 'Ꮆ', 'h', 'j', 'Ꮶ', 'Ꮮ', 'Ꮓ', 'x', 'Ꮯ', 'Ꮙ', 'b', 'Ꮑ', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ա', 'ҽ', 'ɾ', 'Ե', 'վ', 'մ', 'í', 'օ', 'Թ', 'ɑ', 'Տ', 'ժ', 'ƒ', 'ց', 'հ', 'յ', 'Ƙ', 'Ӏ', 'Հ', '×', 'ϲ', 'ѵ', 'ҍ', 'ղ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ῳ', 'ɛ', 'ཞ', 'ɬ', 'ყ', 'ų', 'ı', 'ơ', '℘', 'ą', 'ʂ', 'ɖ', 'ʄ', 'ɠ', 'ɧ', 'ʝ', 'ƙ', 'Ɩ', 'ʑ', 'ҳ', 'ƈ', '۷', 'ც', 'ŋ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q', '₩', 'E', 'Ʀ', '₸', '¥', 'U', 'ł', 'Ø', 'P', 'λ', '$', 'Ð', '₣', 'G', 'Ҥ', 'J', 'ƙ', 'Ł', 'Z', 'X', '₡', 'V', 'B', '₦', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ա', 'ɛ', 'ʀ', '𐀀', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q͠', 'w͠', 'e͠', 'r͠', 't͠', 'y͠', 'u͠', 'i͠', 'o͠', 'p͠', 'a͠', 's͠', 'd͠', 'f͠', 'g͠', 'h͠', 'j͠', 'k͠', 'l͠', 'z͠', 'x͠', 'c͠', 'v͠', 'b͠', 'n͠', 'm͠', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q͓̽', 'w͓̽', 'e͓̽', 'r͓̽', 't͓̽', 'y͓̽', 'u͓̽', 'i͓̽', 'o͓̽', 'p͓̽', 'a͓̽', 's͓̽', 'd͓̽', 'f͓̽', 'g͓̽', 'h͓̽', 'j͓̽', 'k͓̽', 'l͓̽', 'z͓̽', 'x͓̽', 'c͓̽', 'v͓̽', 'b͓̽', 'n͓̽', 'm͓̽', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q͎', 'w͎', 'e͎', 'r͎', 't͎', 'y͎', 'u͎', 'i͎', 'o͎', 'p͎', 'a͎', 's͎', 'd͎', 'f͎', 'g͎', 'h͎', 'j͎', 'k͎', 'l͎', 'z͎', 'x͎', 'c͎', 'v͎', 'b͎', 'n͎', 'm͎', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ⴍ', 'w', 'Ꮛ', 'R', '𐌕', 'Ⴤ', 'Ⴎ', 'i', 'ტ', 'Ⴒ', '𐌀', 'Ⴝ', 'მ', 'f', 'Ᏻ', 'Ћ', 'ქ', 'k', 'l', 'ɀ', 'ჯ', 'Ꮳ', 'V', 'Ⴊ', 'Ⴖ', 'ო', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q⃟', 'w⃟', 'e⃟', 'r⃟', 't⃟', 'y⃟', 'u⃟', 'i⃟', 'o⃟', 'p⃟', 'a⃟', 's⃟', 'd⃟', 'f⃟', 'g⃟', 'h⃟', 'j⃟', 'k⃟', 'l⃟', 'z⃟', 'x⃟', 'c⃟', 'v⃟', 'b⃟', 'n⃟', 'm⃟', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ϖ', 'ε', 'ɾ', 'ϯ', 'ψ', 'մ', 'ί', 'σ', 'Թ', 'α', 'န', 'δ', 'ƒ', 'ɡ', 'հ', 'յ', 'Ƙ', 'ʆ', 'Հ', 'X', 'ɕ', 'ѵ', 'ɓ', 'η', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['🆀', '🆆', '🅴', '🆁', '🆃', '🆈', '🆄', '🅸', '🅾', '🅿', '🅰', '🆂', '🅳', '🅵', '🅶', '🅷', '🅹', '🅺', '🅻', '🆉', '🆇', '🅲', '🆅', '🅱', '🅽', '🅼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ཡ', 'ཛ', 'ཞ', '₮', 'ƴ', 'ມ', 'ར', '๑', '♇', 'ศ', 'ຮ', 'อ', 'f', 'g', 'ཏ', 'j', 'K', 'ʆ', 'ƶ', '×', '໒', 'v', '๖', 'ས', 'ฅ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̸͟͞', 'w̸͟͞', 'e̸͟͞', 'r̸͟͞', 't̸͟͞', 'y̸͟͞', 'u̸͟͞', 'i̸͟͞', 'o̸͟͞', 'p̸͟͞', 'a̸͟͞', 's̸͟͞', 'd̸͟͞', 'f̸͟͞', 'g̸͟͞', 'h̸͟͞', 'j̸͟͞', 'k̸͟͞', 'l̸͟͞', 'z̸͟͞', 'x̸͟͞', 'c̸͟͞', 'v̸͟͞', 'b̸͟͞', 'n̸͟͞', 'm̸͟͞', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['🅀', '🅆', '🄴', '🅁', '🅃', '🅈', '🅄', '🄸', '🄾', '🄿', '🄰', '🅂', '🄳', '🄵', '🄶', '🄷', '🄹', '🄺', '🄻', '🅉', '🅇', '🄲', '🅅', '🄱', '🄽', '🄼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ẇ', 'є', 'я', 'ṭ', 'ʏ', 'ȗ', 'ı', 'ȏ', 'ƿ', 'ѧ', 'ṡ', 'Ԁ', 'ғ', 'ɢ', 'һ', 'j', 'ҡ', 'ʟ', 'ẓ', '×', 'ċ', 'ṿ', 'ɞ', 'ṅ', 'ṃ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'w', '乇', '尺', 'ｲ', 'ﾘ', 'u', 'ﾉ', 'O', 'ｱ', 'ﾑ', '丂', 'd', 'ｷ', 'g', 'ん', 'ﾌ', 'ズ', 'ﾚ', '乙', 'ﾒ', 'c', '√', '乃', '刀', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ա', '☰', '☈', '☨', '¥', '☋', 'ί', '☯', 'Թ', '@', '$', '∂', '∱', 'g', '♄', 'j', 'ƙ', 'ᒪ', 'z', 'x', '☾', '✔', '♭', 'n', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['🅠', '🅦', '🅔', '🅡', '🅣', '🅨', '🅤', '🅘', '🅞', '🅟', '🅐', '🅢', '🅓', '🅕', '🅖', '🅗', '🅙', '🅚', '🅛', '🅩', '🅧', '🅒', '🅥', '🅑', '🅝', '🅜', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ⴓ', 'w', 'ᙓ', 'ᖇ', 'Ʈ', '૪', 'ᕰ', 'ᓮ', 'ට', 'ᖰ', 'ᗩ', 'ᔕ', 'ᖙ', 'ℱ', 'ᘐ', 'ᖺ', 'ᒎ', 'Ḱ', 'ᒪ', 'ᔓ', 'ჯ', 'ᙅ', 'Ꮙ', 'ᕊ', 'ᘉ', 'ᙢ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ꮔ', 'Ꮿ', 'Ꮛ', 'ᖇ', 'Ꮏ', 'Ꭹ', 'Ꮜ', 'i', 'Ꮻ', 'Ꮅ', 'Ꭿ', 'Ꭶ', 'Ꮄ', 'Ꮀ', 'Ꮆ', 'Ꮒ', 'Ꮰ', 'Ꮶ', 'l', 'Ꮓ', 'ﾒ', 'Ꮳ', 'Ꮙ', 'Ᏸ', 'Ꮑ', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q⃒', 'w⃒', 'e⃒', 'r⃒', 't⃒', 'y⃒', 'u⃒', 'i⃒', 'o⃒', 'p⃒', 'a⃒', 's⃒', 'd⃒', 'f⃒', 'g⃒', 'h⃒', 'j⃒', 'k⃒', 'l⃒', 'z⃒', 'x⃒', 'c⃒', 'v⃒', 'b⃒', 'n⃒', 'm⃒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ǭ', 'ω', 'ḙ', 'Ի', 'т', '⑂', 'ṳ', '!', '✺', '℘', 'ᾰ', 'ṧ', 'ᖱ', 'ḟ', '❡', 'ℏ', '♩', 'к', 'ℓ', 'ℨ', '✘', 'ḉ', 'ṽ', '♭', 'ℵ', 'Պ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q͚', 'W͚', 'E͚', 'R͚', 'T͚', 'Y͚', 'U͚', 'I͚', 'O͚', 'P͚', 'A͚', 'S͚', 'D͚', 'F͚', 'G͚', 'H͚', 'J͚', 'K͚', 'L͚', 'Z͚', 'X͚', 'C͚', 'V͚', 'B͚', 'N͚', 'M͚', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ϖ', 'ε', 'ɾ', 'ϯ', 'ψ', 'մ', 'ί', 'σ', 'Թ', 'α', '⑀', 'δ', 'ƒ', 'ɡ', 'հ', 'յ', 'Ƙ', 'ʆ', 'Հ', 'x', 'ɕ', 'ѵ', 'ɓ', 'η', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ཡ', 'ཛ', 'ཞ', '₮', 'ƴ', 'ມ', 'ར', '๑', '♇', 'ศ', 'ຮ', 'อ', 'f', 'g', 'ཏ', 'j', 'K', 'ʆ', 'ƶ', '×', '໒', 'v', '๖', 'ས', 'ฅ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q̤̮', 'W̤̮', 'E̤̮', 'R̤̮', 'T̤̮', 'Y̤̮', 'Ṳ̮', 'I̤̮', 'O̤̮', 'P̤̮', 'A̤̮', 'S̤̮', 'D̤̮', 'F̤̮', 'G̤̮', 'H̤̮', 'J̤̮', 'K̤̮', 'L̤̮', 'Z̤̮', 'X̤̮', 'C̤̮', 'V̤̮', 'B̤̮', 'N̤̮', 'M̤̮', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q', 'Ꮚ', 'Ꮛ', 'R', 'T', 'Ꮍ', 'U', 'I', 'Ꭷ', 'Ꭾ', 'Ꮨ', 'Ꭶ', 'Ꭰ', 'F', 'Ꮆ', 'H', 'Ꮰ', 'K', 'L', 'Z', 'X', 'Ꮸ', 'Ꮴ', 'Ᏸ', 'Ꮑ', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ẇ', 'є', 'ŗ', 'ṭ', 'ʏ', 'ȗ', 'ı', 'ọ', 'ƿ', 'å', 'ṡ', 'Ԁ', 'ғ', 'ɢ', 'һ', 'j', 'ҡ', 'Ŀ', 'ẓ', '×', 'ċ', 'ṿ', 'ɞ', 'ṅ', 'ṃ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q͟͟', 'W͟͟', 'E͟͟', 'R͟͟', 'T͟͟', 'Y͟͟', 'U͟͟', 'I͟͟', 'O͟͟', 'P͟͟', 'A͟͟', 'S͟͟', 'D͟͟', 'F͟͟', 'G͟͟', 'H͟͟', 'J͟͟', 'K͟͟', 'L͟͟', 'Z͟͟', 'X͟͟', 'C͟͟', 'V͟͟', 'B͟͟', 'N͟͟', 'M͟͟', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q̥ͦ', 'W̥ͦ', 'E̥ͦ', 'R̥ͦ', 'T̥ͦ', 'Y̥ͦ', 'U̥ͦ', 'I̥ͦ', 'O̥ͦ', 'P̥ͦ', 'Ḁͦ', 'S̥ͦ', 'D̥ͦ', 'F̥ͦ', 'G̥ͦ', 'H̥ͦ', 'J̥ͦ', 'K̥ͦ', 'L̥ͦ', 'Z̥ͦ', 'X̥ͦ', 'C̥ͦ', 'V̥ͦ', 'B̥ͦ', 'N̥ͦ', 'M̥ͦ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q̬̤̯', 'W̬̤̯', 'E̬̤̯', 'R̬̤̯', 'T̬̤̯', 'Y̬̤̯', 'U̬̤̯', 'I̬̤̯', 'O̬̤̯', 'P̬̤̯', 'A̬̤̯', 'S̬̤̯', 'D̬̤̯', 'F̬̤̯', 'G̬̤̯', 'H̬̤̯', 'J̬̤̯', 'K̬̤̯', 'L̬̤̯', 'Z̬̤̯', 'X̬̤̯', 'C̬̤̯', 'V̬̤̯', 'B̬̤̯', 'N̬̤̯', 'M̬̤̯', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q', 'ϖ', 'ℨ', 'Ʀ', 'Ṫ', 'Ƴ', 'Ự', 'Ĭ', 'Ɵ', 'Ƥ', 'ᗛ', 'Ṩ', 'Đ', 'F', 'Ꮆ', 'ℌ', 'ℑ', 'Ƙ', 'Ĺ', 'Ƶ', 'Ẍ', 'Č', 'Ʋ', 'ᗷ', 'Ŋ', 'Ṁ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ợ', 'ฬ', 'є', 'г', 't', 'y', 'ย', 'ί', '๏', 'Թ', 'ค', 'ร', '๔', 'Ŧ', 'g', '♄', 'j', 'ƙ', 'l', 'z', 'x', 'ς', 'v', '๒', 'ภ', '๓', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ǫ', 'ᴡ', 'ᴇ', 'ʀ', 'ᴛ', 'ʏ', 'ᴜ', 'ɪ', 'ᴏ', 'ᴘ', 'ᴀ', 's', 'ᴅ', 'ғ', 'ɢ', 'ʜ', 'ᴊ', 'ᴋ', 'ʟ', 'ᴢ', 'x', 'ᴄ', 'ᴠ', 'ʙ', 'ɴ', 'ᴍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ɋ', 'ϣ', 'ɛ', 'ɾ', 'ʈ', 'џ', 'ự', 'ɨ', 'ɵ', 'ϼ', 'ɑ', 'ʂ', 'Ƌ', 'ʄ', 'ɠ', 'ɦ', 'ϳ', 'ƙ', 'ƚ', 'ʑ', 'ӝ', 'ɕ', 'ʋ', 'ɓ', 'ɲ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ǫ', 'ɯ', 'ꍟ', 'ɽ', 'ʈ', 'ɣ', 'ʋ', 'ꀤ', 'ꂦ', 'ƥ', 'ɑ', 'ʂ', 'ɗ', 'ʄ', 'ɠ', 'ɧ', 'ꀭ', 'ƙ', 'ɭ', 'ʐ', 'ꊼ', 'ƈ', 'ᐯ', 'ɓ', 'ɳ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ա', 'ɛ', 'ʀ', 'Ꮖ', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['b', 'ʍ', 'ǝ', 'ɹ', 'ʇ', 'ʎ', 'n', 'ı', 'o', 'd', 'ɐ', 's', 'p', 'ɟ', 'ƃ', 'ɥ', 'ɾ', 'ʞ', 'ʃ', 'z', 'x', 'ɔ', 'ʌ', 'q', 'u', 'ɯ', '0', '1', '2', 'Ɛ', '4', '5', '9', '7', '8', '6'],
        ['q⃠', 'w⃠', 'e⃠', 'r⃠', 't⃠', 'y⃠', 'u⃠', 'i⃠', 'o⃠', 'p⃠', 'a⃠', 's⃠', 'd⃠', 'f⃠', 'g⃠', 'h⃠', 'j⃠', 'k⃠', 'l⃠', 'z⃠', 'x⃠', 'c⃠', 'v⃠', 'b⃠', 'n⃠', 'm⃠', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̠', 'w̠', 'e̠', 'r̠', 't̠', 'y̠', 'u̠', 'i̠', 'o̠', 'p̠', 'a̠', 's̠', 'd̠', 'f̠', 'g̠', 'h̠', 'j̠', 'k̠', 'l̠', 'z̠', 'x̠', 'c̠', 'v̠', 'b̠', 'n̠', 'm̠', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̉', 'w̉', 'ẻ', 'r̉', 't̉', 'ỷ', 'ủ', 'ỉ', 'ỏ', 'p̉', 'ả', 's̉', 'd̉', 'f̉', 'g̉', 'h̉', 'j̉', 'k̉', 'l̉', 'z̉', 'x̉', 'c̉', 'v̉', 'b̉', 'n̉', 'm̉', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q̺͆', 'w̺͆', 'e̺͆', 'r̺͆', 't̺͆', 'y̺͆', 'u̺͆', 'i̺͆', 'o̺͆', 'p̺͆', 'a̺͆', 's̺͆', 'd̺͆', 'f̺͆', 'g̺͆', 'h̺͆', 'j̺͆', 'k̺͆', 'l̺͆', 'z̺͆', 'x̺͆', 'c̺͆', 'v̺͆', 'b̺͆', 'n̺͆', 'm̺͆', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q͒', 'w͒', 'e͒', 'r͒', 't͒', 'y͒', 'u͒', 'i͒', 'o͒', 'p͒', 'a͒', 's͒', 'd͒', 'f͒', 'g͒', 'h͒', 'j͒', 'k͒', 'l͒', 'z͒', 'x͒', 'c͒', 'v͒', 'b͒', 'n͒', 'm͒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q༙', 'w༙', 'e༙', 'r༙', 't༙', 'y༙', 'u༙', 'i༙', 'o༙', 'p༙', 'a༙', 's༙', 'd༙', 'f༙', 'g༙', 'h༙', 'j༙', 'k༙', 'l༙', 'z༙', 'x༙', 'c༙', 'v༙', 'b༙', 'n༙', 'm༙', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['qྂ', 'wྂ', 'eྂ', 'rྂ', 'tྂ', 'yྂ', 'uྂ', 'iྂ', 'oྂ', 'pྂ', 'aྂ', 'sྂ', 'dྂ', 'fྂ', 'gྂ', 'hྂ', 'jྂ', 'kྂ', 'lྂ', 'zྂ', 'xྂ', 'cྂ', 'vྂ', 'bྂ', 'nྂ', 'mྂ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ա', '☰', '☈', '☨', '¥', '☋', 'ί', '☯', 'Թ', '@', '$', '∂', '∱', 'g', '♄', 'j', 'ƙ', 'ᒪ', 'z', 'x', '☾', '✔', '♭', 'n', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['զ', 'ա', 'ɛ', 'ʀ', 'T', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ϑ', 'ϣ', 'ϵ', 'r', 'ϯ', 'ϒ', 'ῠ', 'ῖ', 'ϴ', 'ϼ', 'α', 'ϩ', 'δ', 'f', 'ϭ', 'h', 'j', 'k', 'l', 'ϟ', 'x', 'ͼ', 'ν', 'Ϧ', 'ͷ', 'ϻ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ℚ', 'Ꮗ', 'ℰ', 'ℛ', 'T', 'Ꮍ', 'U', 'ℐ', 'Ꮎ', 'ℙ', 'Ꭿ', 'Ѕ', 'ⅅ', 'ℱ', 'Ꮆ', 'ℋ', 'Ꭻ', 'Ꮶ', 'ℒ', 'ℤ', 'X', 'ℂ', 'Ꮙ', 'ℬ', 'ℕ', 'ℳ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝚚', '𝚠', '𝚎', '𝚛', '𝚝', '𝚢', '𝚞', '𝚒', '𝚘', '𝚙', '𝚊', '𝚜', '𝚍', '𝚏', '𝚐', '𝚑', '𝚓', '𝚔', '𝚕', '𝚣', '𝚡', '𝚌', '𝚟', '𝚋', '𝚗', '𝚖', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝕢', '𝕨', '𝕖', '𝕣', '𝕥', '𝕪', '𝕦', '𝕚', '𝕠', '𝕡', '𝕒', '𝕤', '𝕕', '𝕗', '𝕘', '𝕙', '𝕛', '𝕜', '𝕝', '𝕫', '??', '𝕔', '𝕧', '𝕓', '𝕟', '𝕞', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝓆', '𝓌', 'ℯ', '𝓇', '𝓉', '𝓎', '𝓊', '𝒾', 'ℴ', '𝓅', '𝒶', '𝓈', '𝒹', '𝒻', 'ℊ', '𝒽', '𝒿', '𝓀', '𝓁', '𝓏', '𝓍', '𝒸', '𝓋', '𝒷', '𝓃', '𝓂', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝓺', '𝔀', '𝓮', '𝓻', '𝓽', '𝔂', '𝓾', '𝓲', '𝓸', '𝓹', '𝓪', '𝓼', '𝓭', '𝓯', '𝓰', '𝓱', '𝓳', '𝓴', '𝓵', '𝔃', '𝔁', '𝓬', '𝓿', '𝓫', '𝓷', '𝓶', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝔮', '𝔴', '𝔢', '𝔯', '𝔱', '𝔶', '𝔲', '𝔦', '𝔬', '𝔭', '𝔞', '𝔰', '𝔡', '𝔣', '𝔤', '𝔥', '𝔧', '𝔨', '𝔩', '𝔷', '𝔵', '𝔠', '𝔳', '𝔟', '𝔫', '𝔪', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝖖', '𝖜', '𝖊', '𝖗', '𝖙', '𝖞', '𝖚', '𝖎', '𝖔', '𝖕', '𝖆', '𝖘', '𝖉', '𝖋', '𝖌', '𝖍', '𝖏', '𝖐', '𝖑', '𝖟', '𝖝', '𝖈', '𝖛', '𝖇', '𝖓', '𝖒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝗊', '𝗐', '𝖾', '𝗋', '𝗍', '𝗒', '𝗎', '𝗂', '𝗈', '𝗉', '𝖺', '𝗌', '𝖽', '𝖿', '𝗀', '𝗁', '𝗃', '𝗄', '𝗅', '𝗓', '𝗑', '𝖼', '𝗏', '𝖻', '𝗇', '𝗆', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝘲', '𝘸', '𝘦', '𝘳', '𝘵', '𝘺', '𝘶', '𝘪', '𝘰', '𝘱', '𝘢', '𝘴', '𝘥', '𝘧', '𝘨', '𝘩', '𝘫', '𝘬', '𝘭', '𝘻', '𝘹', '𝘤', '𝘷', '𝘣', '𝘯', '𝘮', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝙦', '𝙬', '𝙚', '𝙧', '𝙩', '𝙮', '𝙪', '𝙞', '𝙤', '𝙥', '𝙖', '𝙨', '𝙙', '𝙛', '𝙜', '𝙝', '𝙟', '𝙠', '𝙡', '𝙯', '𝙭', '𝙘', '𝙫', '𝙗', '𝙣', '𝙢', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝐪', '𝐰', '𝐞', '𝐫', '𝐭', '𝐲', '𝐮', '𝐢', '𝐨', '𝐩', '𝐚', '𝐬', '𝐝', '𝐟', '𝐠', '𝐡', '𝐣', '𝐤', '𝐥', '𝐳', '𝐱', '𝐜', '𝐯', '𝐛', '𝐧', '𝐦', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝑞', '𝑤', '𝑒', '𝑟', '𝑡', '𝑦', '𝑢', '𝑖', '𝑜', '𝑝', '𝑎', '𝑠', '𝑑', '𝑓', '𝑔', 'ℎ', '𝑗', '𝑘', '𝑙', '𝑧', '𝑥', '𝑐', '𝑣', '𝑏', '𝑛', '𝑚', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝒒', '𝒘', '𝒆', '𝒓', '𝒕', '𝒚', '𝒖', '𝒊', '𝒐', '𝒑', '𝒂', '𝒔', '𝒅', '𝒇', '𝒈', '𝒉', '𝒋', '𝒌', '𝒍', '𝒛', '𝒙', '𝒄', '𝒗', '𝒃', '𝒏', '𝒎', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ợ', 'ฬ', 'є', 'г', 'Շ', 'ץ', 'ย', 'เ', '๏', 'ק', 'ค', 'ร', '๔', 'Ŧ', 'ﻮ', 'ђ', 'ן', 'к', 'ɭ', 'չ', 'א', 'ς', 'ש', '๒', 'ภ', '๓', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['q', 'ʷ', 'ᵉ', 'ʳ', 'ᵗ', 'ʸ', 'ᵘ', 'ⁱ', 'ᵒ', 'ᵖ', 'ᵃ', 'ˢ', 'ᵈ', 'ᶠ', 'ᵍ', 'ʰ', 'ʲ', 'ᵏ', 'ˡ', 'ᶻ', 'ˣ', 'ᶜ', 'ᵛ', 'ᵇ', 'ⁿ', 'ᵐ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q', 'Щ', 'Є', 'Я', 'Г', 'Ч', 'Ц', 'І', 'Ф', 'Р', 'Д', 'Ѕ', 'ↁ', 'F', 'Б', 'Н', 'Ј', 'Ќ', 'L', 'Z', 'Ж', 'Ҁ', 'V', 'Б', 'И', 'М', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ዒ', 'ሠ', 'ቿ', 'ዪ', 'ፕ', 'ሃ', 'ሁ', 'ጎ', 'ዐ', 'የ', 'ል', 'ነ', 'ዕ', 'ቻ', 'ኗ', 'ዘ', 'ጋ', 'ጕ', 'ረ', 'ጊ', 'ሸ', 'ር', 'ሀ', 'ጌ', 'ክ', 'ጠ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Q', 'Ẅ', 'Ё', 'Ṛ', 'Ṫ', 'Ÿ', 'Ü', 'Ї', 'Ö', 'Ṗ', 'Ä', 'Ṡ', 'Ḋ', 'Ḟ', 'Ġ', 'Ḧ', 'J', 'Ḳ', 'Ḷ', 'Ż', 'Ẍ', 'Ċ', 'Ṿ', 'Ḅ', 'Ṅ', 'Ṁ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['Ꝗ', 'W', 'Ɇ', 'Ɍ', 'Ŧ', 'Ɏ', 'ᵾ', 'Ɨ', 'Ø', 'Ᵽ', 'Ⱥ', 'S', 'Đ', 'F', 'Ǥ', 'Ħ', 'Ɉ', 'Ꝁ', 'Ł', 'Ƶ', 'X', 'Ȼ', 'V', 'Ƀ', 'N', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝔮', '𝔴', '𝔢', '𝔯', '𝔱', '𝔶', '𝔲', '𝔦', '𝔬', '𝔭', '𝔞', '𝔰', '𝔡', '𝔣', '𝔤', '𝔥', '𝔧', '𝔨', '𝔩', '𝔷', '𝔵', '𝔠', '𝔳', '𝔟', '𝔫', '𝔪', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝖖', '𝖜', '𝖊', '𝖗', '𝖙', '𝖞', '𝖚', '𝖎', '𝖔', '𝖕', '𝖆', '𝖘', '𝖉', '𝖋', '𝖌', '𝖍', '𝖏', '𝖐', '𝖑', '𝖟', '𝖝', '𝖈', '𝖛', '𝖇', '𝖓', '𝖒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝓺', '𝔀', '𝓮', '𝓻', '𝓽', '𝔂', '𝓾', '𝓲', '𝓸', '𝓹', '𝓪', '𝓼', '𝓭', '𝓯', '𝓰', '𝓱', '𝓳', '𝓴', '𝓵', '𝔃', '𝔁', '𝓬', '𝓿', '𝓫', '𝓷', '𝓶', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['𝕢', '𝕨', '𝕖', '𝕣', '𝕥', '𝕪', '𝕦', '𝕚', '𝕠', '𝕡', '𝕒', '𝕤', '𝕕', '𝕗', '𝕘', '𝕙', '𝕛', '𝕜', '𝕝', '𝕫', '𝕩', '𝕔', '𝕧', '𝕓', '𝕟', '𝕞', '𝟘', '𝟙', '𝟚', '𝟛', '𝟜', '𝟝', '𝟞', '𝟟', '𝟠', '𝟡'],
        ['q⃣', 'w⃣', 'e⃣', 'r⃣', 't⃣', 'y⃣', 'u⃣', 'i⃣', 'o⃣', 'p⃣', 'a⃣', 's⃣', 'd⃣', 'f⃣', 'g⃣', 'h⃣', 'j⃣', 'k⃣', 'l⃣', 'z⃣', 'x⃣', 'c⃣', 'v⃣', 'b⃣', 'n⃣', 'm⃣', '0⃣', '1⃣', '2⃣', '3⃣', '4⃣', '5⃣', '6⃣', '7⃣', '8⃣', '9⃣'],
        ['🅀', '🅆', '🄴', '🅁', '🅃', '🅈', '🅄', '🄸', '🄾', '🄿', '🄰', '🅂', '🄳', '🄵', '🄶', '🄷', '🄹', '🄺', '🄻', '🅉', '🅇', '🄲', '🅅', '🄱', '🄽', '🄼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['🆀', '🆆', '🅴', '🆁', '🆃', '🆈', '🆄', '🅸', '🅾', '🅿', '🅰', '🆂', '🅳', '🅵', '🅶', '🅷', '🅹', '🅺', '🅻', '🆉', '🆇', '🅲', '🆅', '🅱', '🅽', '🅼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['ⓠ', 'ⓦ', 'ⓔ', 'ⓡ', 'ⓣ', 'ⓨ', 'ⓤ', 'ⓘ', 'ⓞ', 'ⓟ', 'ⓐ', 'ⓢ', 'ⓓ', 'ⓕ', 'ⓖ', 'ⓗ', 'ⓙ', 'ⓚ', 'ⓛ', 'ⓩ', 'ⓧ', 'ⓒ', 'ⓥ', 'ⓑ', 'ⓝ', 'ⓜ', '⓪', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨'],
        ['Q', '₩', 'Ɇ', 'Ɽ', '₮', 'Ɏ', 'Ʉ', 'ł', 'Ø', '₱', '₳', '₴', 'Đ', '₣', '₲', 'Ⱨ', 'J', '₭', 'Ⱡ', 'Ⱬ', 'Ӿ', '₵', 'V', '฿', '₦', '₥', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
        ['【q】', '【w】', '【e】', '【r】', '【t】', '【y】', '【u】', '【i】', '【o】', '【p】', '【a】', '【s】', '【d】', '【f】', '【g】', '【h】', '【j】', '【k】', '【l】', '【z】', '【x】', '【c】', '【v】', '【b】', '【n】', '【m】', '【0】', '【1】', '【2】', '【3】', '【4】', '【5】', '【6】', '【7】', '【8】', '【9】'],
        ['『q』', '『w』', '『e』', '『r』', '『t』', '『y』', '『u』', '『i』', '『o』', '『p』', '『a』', '『s』', '『d』', '『f』', '『g』', '『h』', '『j』', '『k』', '『l』', '『z』', '『x』', '『c』', '『v』', '『b』', '『n』', '『m』', '『0』', '『1』', '『2』', '『3』', '『4』', '『5』', '『6』', '『7』', '『8』', '『9』'],
        ['q҉', 'w҉', 'e҉', 'r҉', 't҉', 'y҉', 'u҉', 'i҉', 'o҉', 'p҉', 'a҉', 's҉', 'd҉', 'f҉', 'g҉', 'h҉', 'j҉', 'k҉', 'l҉', 'z҉', 'x҉', 'c҉', 'v҉', 'b҉', 'n҉', 'm҉', '0҉', '1҉', '2҉', '3҉', '4҉', '5҉', '6҉', '7҉', '8҉', '9҉'],
    ];
$texts = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

function font($str)
{
    global $font, $texts;
    $input = strtolower($str);
    $output = str_replace($texts, $font[array_rand($font)], $input);
    return $output;
}

function mediaTimeDeFormater($seconds)
{
    if (!is_numeric($seconds))
        throw new Exception("Invalid Parameter Type!");
    $ret = "";
    $hours = (string)floor($seconds / 3600);
    $secs = (string)$seconds % 60;
    $mins = (string)floor(($seconds - ($hours * 3600)) / 60);
    $days = floor(($hours / 24));
    if (strlen($hours) == 1)
        $hours = "0" . $hours;
    if (strlen($secs) == 1)
        $secs = "0" . $secs;
    if (strlen($mins) == 1)
        $mins = "0" . $mins;
    if ($hours == 0)
        $ret = "$mins m:$secs s";
    else
        $ret = "$hours h:$mins m:$secs s";

    return $ret;
}

function mt($str, $needle)
{
    preg_match_all('/./', fix($needle), $mt);
    $pattern = '';
    foreach ($mt[0] as $let) {
        $pattern .= "$let.{0,3}";
    }
    $pattern = "/$pattern/";
    if (preg_match($pattern, strtolower($str))) {
        echo "Y";
        return true;
    } else {
        echo "N";
        return false;
    }
}
function align(array $args, string $sep = ': ', string $prefix = '', string $suffix = '', bool $mb = false): string
{
    [$result, $maxLength, $method] = ['', 0, $mb ? 'mb_strlen' : 'strlen'];
    foreach ($args as $key => $val) {
        if ($method($key) > $maxLength) {
            $maxLength = $method($key);
        }
    }
    foreach ($args as $key => $val) {
        $result .= $prefix . $key . str_repeat(' ', $maxLength - $method($key)) . $sep . $val . $suffix . PHP_EOL;
    }
    return $result;
}
function bytesShortener($bytes, int $round = 0): string
{
    $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    $index = 0;
    while ($bytes > 1024) {
        $bytes /= 1024;
        if (++$index === 8)
            break;
    }
    if ($round !== 0) {
        $bytes = round($bytes, $round);
    }
    return "$bytes {$units[$index]}";
}
function getCpuCores(): int
{
    return (int) (PHP_OS_FAMILY === 'Windows'
        ? getenv('NUMBER_OF_PROCESSORS')
        : substr_count(file_get_contents('/proc/cpuinfo'), 'processor'));
}

function tagall($ids = [])
{
    $string = '';
    foreach ($ids as $key => $value) {
        $string .= "[all](mention:$value) \t\t";
    }
    return $string;
}

function writeFile($name, $data, $mode = 'w')
{
    $x = explode('/', $name);
    if (!is_dir($x[0])) {
        mkdir($x[0]);
    }
    $file = fopen($name, $mode);
    fwrite($file, $data);
    fclose($file);
}
function datefont($str)
{
    $fonts = [
        ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿 "],
        ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", " 𝟞", "𝟟", "𝟠", "𝟡"],
        ["❬0❭", "❬1❭", "❬2❭", "❬3❭", "❬4❭", "❬5❭", "❬6❭", "❬7❭", "❬8❭", "❬9❭"],
        ["⓪", "①", "②", "③", "④", "⑤", "⑥", "⑦", "⑧", "⑨"],
        ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
        ["《𝟬》", "《𝟭》", "《𝟮》", "《𝟯》", "《𝟰》", "《𝟱》", "《𝟲》", "《𝟳》", "《𝟴》", "《𝟵》"],
        ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
        ["0⃣", "1⃣", "2⃣", "3⃣", "4⃣", "5⃣", "6⃣", "7⃣", "8⃣", "9⃣"],
        ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
        ["⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹"],
        ["⊘", "҉1", "҉2", "҉3", "҉4", "҉5", "҉6", "҉7", "҉8", "9҉"],
        ["⊘", "⇂", "ϩ", "Ӡ", "५", "Ƽ", "Ϭ", "７", "𝟖", "९"],
        ["⊘", "𝟏", "ᄅ", "Ɛ", "ㄣ", "𝟝", "６", "ㄥ", "８", "𝟗"]
    ];
    $date = str_replace(range(0, count($fonts)), $fonts[array_rand($fonts)], $str);
    return $date;
}


class XHandler extends EventHandler
{
    const Admins = [5085624483];
    const Report = '@SylixDeveloper';

    public function getReportPeers()
    {
        return [self::Report];
    }
    public function genLoop()
    {
        $DB = $this->DB();
        yield $this->account->updateStatus([
            'offline' => false
        ]);
        $date = datefont(date('H:i', time() + 30));
        if ($DB['Fun']['RandomNameBioTime']['status'] == 'on') {
            if ($DB['Fun']['RandomNameBioTime']['time'] == 'on') {
                yield $this->account->updateProfile(
                    [
                        'last_name' => $date
                    ]
                );
            } elseif ($DB['Fun']['RandomNameBioTime']['name'] == 'on') {
                $mn = $DB['MyName'] ?? 'SylixDeveloper';
                $name = font($mn);
                yield $this->account->updateProfile(
                    [
                        'first_name' => $name
                    ]
                );
            } elseif ($DB['Fun']['RandomNameBioTime']['bio'] == 'on') {
                $bio   = file_get_contents('data/bio.txt');
                $bio  .= ' ' . $date;
                yield $this->account->updateProfile(
                    [
                        'about' => $bio
                    ]

                );
            } elseif ($DB['Fun']['RandomNameBioTime']['hybrid'] == 'on') {
                $mn = $DB['MyName'] ?? 'SylixDeveloper';
                $name = font($mn);
                $bio   = file_get_contents('data/bio.txt');
                $bio  .= ' ' . $date;
                yield $this->account->updateProfile(
                    [
                        'first_name' => $name,
                        'last_name'  => $date,
                        'about'      => $bio
                    ]
                );
            }
        }
        return 60000;
    }

    public function onStart()
    {
        $this->timen = time();
        if (!file_exists('data/uptime.txt')) {
            file_put_contents('data/uptime.txt', $this->timen);
        }
        $genLoop = new GenericLoop([$this, 'genLoop'], 'update Status');
        $genLoop->start();
        $this->start_time = time();
    }

    public function DB($INP = null)
    {
        if ($INP == null) {
            return json_decode(file_get_contents('DB.json'), true);
        } else {
            file_put_contents('DB.json', json_encode($INP, 128 | 256));
            return "Success !";
        }
    }
    public function translate($from, $to, $text)
    {

        $text = str_replace("\n", " ", $text);
        $fields = ['sl' => urlencode($from), 'tl' => urlencode($to), 'q' => $text];
        $string = '';
        foreach ($fields as $key => $value) {
            $string .= "&" . $key . "=" . $value;
        }
        $ch = curl_init("https://translate.googleapis.com/translate_a/single?client=gtx&dt=t");
        curl_setopt_array($ch, [
            CURLOPT_POSTFIELDS => $string,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => 'UTF-8',
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => false,
            CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36(KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'
        ]);
        $result = json_decode(curl_exec($ch), true);
        foreach ($result[0] as $k => $l) {
            return $l[0];
        }
    }
    public function getTxtFromPic(string $pic, string $lang = 'eng', int $OCREngine = 1)
    {
        $ch = curl_init('https://api.ocr.space/Parse/Image');
        $post = [
            'base64image'       => "data:image/jpg;base64," . base64_encode(yield $this->fileGetContents($_SERVER['SCRIPT_URI'] . '/' . $pic)),
            'isOverlayRequired' => 'true',
            'language'          => $lang,
            'OCREngine'         => $OCREngine
        ];
        $headers = ['Apikey: e88601834388957'];
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => TRUE,
            CURLOPT_FOLLOWLOCATION => TRUE,
            CURLOPT_SSL_VERIFYPEER => FALSE,
            CURLOPT_POST           => TRUE,
            CURLOPT_HTTPHEADER     => $headers,
            CURLOPT_POSTFIELDS     => $post,
        ]);
        $result = curl_exec($ch);
        $x = json_decode($result, true)['ParsedResults'][0]['ParsedText'] ?: json_decode($result, true);
        return $x;
    }
    public function getNumberFromPic(string $pic)
    {
        $x = yield $this->getTxtFromPic($pic);
        $x = str_replace(['-', '(', ')', ']', '[', ' '], '', $x);
        $x = preg_replace("~[a-z]~i", '', $x);
        preg_match_all("~[\d]{10}+~", $x, $z);
        return json_encode($z[0], 128);
    }

    public function onUpdateNewChannelMessage($update)
    {
        yield $this->onUpdateNewMessage($update);
    }
    public function getMessages($update, $id = [])
    {
        try {
            $info = yield $this->getInfo($update);

            $method = in_array($info['type'], ['bot', 'user', 'chat']) ? 'messages' : 'channels';
            $params = ['id' => $id];

            if (in_array($info['type'], ['channel', 'supergroup'])) {
                $params['channel'] = $update;
            }

            $get = yield $this->$method->getMessages($params);
            return $get;
        } catch (Throwable $e) {
            //throw new Exception($e->getMessage());
        }
    }
    public function hasMedia(array $message = [], bool $allowWebPage = false): bool
    {
        $mediaType = $message['media']['_'] ?? null;
        if ($mediaType === null) {
            return false;
        }
        if ($mediaType === 'messageMediaWebPage' && ($allowWebPage === false || empty($message['media']['webpage']['photo']))) {
            return false;
        }
        return true;
    }
    public function CheckUserName($username)
    {
        try {
            $info = yield $this->messages->getPeerDialogs(['peers' => ['@' . $username]]);
            $info = json_encode($info, JSON_PRETTY_PRINT);
            if (isset($info)) {
                return 'used';
            }
        } catch (\throwable $e) {
            $m = $e->getMessage();
            if ($m == 'This peer is not present in the internal peer database') {
                return 'not used';
            } else {
                return $m;
            }
        }
    }
    public function getAllUsers($chat_id)
    {
        try {
            $result = [];
            $offset = 0;
            while (true) {
                $participants = yield $this->channels->getParticipants([
                    'channel' => $chat_id,
                    'filter' => ['_' => 'channelParticipantsRecent'],
                    'offset' => $offset,
                    'limit'  => 100
                ]);
                foreach ($participants['users'] as $member) {
                    if (!$member['deleted'] && !$member['bot']) {
                        $result[] = [
                            'first_name' => $member['first_name'],
                            'id'        => $member['id']
                        ];
                    }
                }
                $count = count($participants['users']);
                $offset += $count;
                if ($count === 0) {
                    break;
                }
            }
            return $result;
        } catch (\Throwable $e) {
            $m = $e->getMessage();
            return $m;
        }
    }
    public function getAllBots($chat_id)
    {
        try {
            $result = [];
            $offset = 0;
            while (true) {
                $participants = yield $this->channels->getParticipants([
                    'channel' => $chat_id,
                    'filter' => ['_' => 'channelParticipantsRecent'],
                    'offset' => $offset,
                    'limit'  => 200
                ]);
                foreach ($participants['users'] as $member) {
                    if ($member['bot']) {
                        $result[] = [
                            'first_name' => $member['first_name'],
                            'id'         => $member['id']
                        ];
                    }
                }
                $count = count($participants['users']);
                $offset += $count;
                if ($count === 0) {
                    break;
                }
            }
            return $result;
        } catch (\Throwable $e) {
            $m = $e->getMessage();
            return $m;
        }
    }
    public function getAllDeletes($chat_id)
    {
        try {
            $result = [];
            $offset = 0;
            while (true) {
                $participants = yield $this->channels->getParticipants([
                    'channel' => $chat_id,
                    'filter' => ['_' => 'channelParticipantsRecent'],
                    'offset' => $offset,
                    'limit'  => 200
                ]);
                foreach ($participants['users'] as $member) {
                    if ($member['deleted']) {
                        $result[] = [
                            'id'        => $member['id']
                        ];
                    }
                }
                $count = count($participants['users']);
                $offset += $count;
                if ($count === 0) {
                    break;
                }
            }
            return $result;
        } catch (\Throwable $e) {
            $m = $e->getMessage();
            return $m;
        }
    }

    public function onUpdateGroupCall(array $update)
    {
        try {
            $chat_id   = $update['chat_id'];
            $call_id   = $update['call']['id'];
            $call_hash = $update['call']['access_hash'];
            $call      = $update['call']['_'];
            $DB        = $this->DB();
            if (in_array($chat_id, $DB['Channels'])) {
                $DB['vc'][$chat_id] = ['id' => $call_id, 'hash' => $call_hash];
                $this->DB($DB);
            }
        } catch (\Throwable $e) {
            yield $this->messages->sendMessage([
                'peer'            => $chat_id,
                'message'         => $e->getMessage(),
                'parse_mode'      => 'Markdown',
            ]);
        }
    }

    public function ArrayPush(array &$array): \Generator
    {
        $array[] = yield;
    }

    public function SendOrEdit(array &$update, string &$text, string &$parse_mode = "markdown"): \Generator
    {
        if ($update['message']['out']) {
            yield $this->messages->editMessage([
                'peer'       => (yield $this->getID($update)),
                'id'         => $update['message']['id'],
                'message'    => $text,
                'parse_mode' => $parse_mode,
                'no_webpage' => true
            ]);
        } else {
            yield $this->messages->sendMessage([
                'peer'            => (yield $this->getID($update)),
                'reply_to_msg_id' => $update['message']['id'],
                'message'         => $text,
                'parse_mode'      => $parse_mode,
                'no_webpage'      => true
            ]);
        }
    }
    public function onUpdateNewMessage($update)
    {
        global $font, $texts;
        if (time() - $update['message']['date'] > 2) {
            return;
        }
        try {
            $msg                 = isset($update['message']) ? $update['message'] : null;
            $txt                 = isset($update['message']['message']) ? $update['message']['message'] : null;
            $msg_id              = isset($update['message']['id']) ? $update['message']['id'] : null;
            $reply_to_msg_id     = isset($update['message']['reply_to']['reply_to_msg_id']) ? $update['message']['reply_to']['reply_to_msg_id'] : null;
            $reply_to_top_msg_id = isset($update['message']['reply_to']['reply_to_top_id']) ? $update['message']['reply_to']['reply_to_top_id'] : null;
            $user_id             = $update['message']['from_id']['user_id'] ?? 0;
            $com                 = isset($update['message']['fwd_from']['saved_from_peer']) ? true : false;
            $dice_value          = isset($update['message']['media']['value']) ? $update['message']['media']['value'] : null;
            $entities            = isset($update['message']['entities']) ? $update['message']['entities'] : null;
            $me                  = yield $this->getSelf();
            $peer                = yield $this->getInfo($update);
            $chID                = yield $this->getID($update);
            $chat_id             = $peer['bot_api_id'];
            $type                = $peer['type'];
            $DB                  = $this->DB();
            $me_id               = $me['id'];
            $action              = isset($update['message']['action']) ? $update['message']['action'] : null;


            #First Comment
            if ($com && $DB['Fun']['FirstComment']['status'] == 'on') {
                if (isset($DB['Fun']['FirstComment']['text'])) {
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $DB['Fun']['FirstComment']['text'],
                        'parse_mode'      => 'Markdown',
                        'reply_to_msg_id' => $msg_id
                    ]);
                } elseif (isset($DB['Fun']['FirstComment']['media'])) {
                    yield $this->messages->sendMedia([
                        'peer'            => $chat_id,
                        'media'           => $DB['Fun']['FirstComment']['media'],
                        'parse_mode'      => 'Markdown',
                        'reply_to_msg_id' => $msg_id
                    ]);
                }
            }
            #TGS TO GIF
            if ($user_id == 220255550) {
                try {
                    $gif                = isset($update['message']['media']['document']) ? $update['message']['media']['document'] : 'havent';
                    $type               = $gif['mime_type'] ?? '';
                    if ($type == 'video/mp4') {
                        $inputDocument      = ['_' => 'inputDocument', 'id' => $gif['id'], 'access_hash' => $gif['access_hash'], 'file_reference' => $gif['file_reference']];
                        $inputMediaDocument = ['_' => "inputMediaDocument", 'id' => $inputDocument];
                        yield $this->messages->sendMedia([
                            'peer'            => file_get_contents('data/chat_id.txt'),
                            'media'           => $inputMediaDocument,
                            'message'         => "<b>TGS TO GIF</b>",
                            'reply_to_msg_id' => file_get_contents('data/reply_to_msg_id.txt'),
                            'parse_mode'      => 'html',
                        ]);
                        yield $this->messages->editMessage([
                            'peer'            => file_get_contents('data/chat_id.txt'),
                            'id'              => file_get_contents('data/msg_id.txt'),
                            'message'         => 'Done'
                        ]);
                    }
                } catch (\Throwable $e) {
                    $error = $e->getMessage();
                    $line  = $e->getLine();
                    yield $this->messages->sendMessage([
                        'peer'            => file_get_contents('data/chat_id.txt'),
                        'message'         => "<b>Erorr</b> <br />$error <br /> Line : $line",
                        'parse_mode'      => "markdown",
                        'reply_to_msg_id' => $msg_id
                    ]);
                }
            }
            if (isset($DB['Fun']['Monshi'])) {
                if (isset($entities)) {
                    $m = ($entities[0]['_'] == 'messageEntityMentionName') ? true : false;
                    if ($m) {
                        if ($entities[0]['user_id'] == $me_id) {
                            $answer = isset($DB['Fun']['Monshi']) ? $DB['Fun']['Monshi'] : null;
                            if (isset($answer['Media'])) {
                                $tag       = yield $this->getInfo($user_id)['User'];
                                $tag       = "<a href='tg://user?id={$tag['id']}'>{$tag['first_name']}</a>";
                                $FULL      = yield $this->getFullInfo($me_id)['full'];
                                $last_seen = isset($FULL['users'][0]['status']['was_online']) ? $FULL['users'][0]['status']['was_online'] : '--';
                                if ($last_seen != '--') {
                                    $last_seen = date('H:i:s', $last_seen);
                                }
                                $x = str_replace('name', $tag, $DB['Fun']['Monshi']['Media']['Text']);
                                $ans = "$x <br /><br /> Last Online : $last_seen";
                                yield $this->messages->sendMedia([
                                    'peer'            => $chat_id,
                                    'media'           => $DB['Fun']['Monshi']['Media']['Media'],
                                    'message'         => "$ans",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "html"
                                ]);
                            } elseif (isset($answer['Text'])) {
                                $tag    = yield $this->getInfo($user_id)['User'];
                                $tag    = "<a href='{$tag['id']}'>{$tag['first_name']}</a>";
                                $FULL   = yield $this->getFullInfo($me_id)['full'];
                                $last_seen         = isset($FULL['users'][0]['status']['was_online']) ? $FULL['users'][0]['status']['was_online'] : '--';
                                if ($last_seen != '--') {
                                    $last_seen = date('H:i:s', $last_seen);
                                }
                                $x = str_replace('name', $tag, $answer['Text']);
                                $ans = "$x <br /><br /> Last Online : $last_seen";
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "$ans",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "html"
                                ]);
                            }
                        }
                    }
                }

                $checkU = isset($me['username']) ? $me['username'] : 'kir';
                if ($checkU != 'kir') {
                    if (mt($txt, "@$checkU")) {
                        $answer = isset($DB['Fun']['Monshi']) ? $DB['Fun']['Monshi'] : null;
                        if (isset($answer['Media'])) {
                            $tag       = yield $this->getInfo($user_id)['User'];
                            $tag       = "<a href='{$tag['id']}'>{$tag['first_name']}</a>";
                            $FULL      = yield $this->getFullInfo($me_id)['full'];
                            $last_seen = isset($FULL['users'][0]['status']['was_online']) ? $FULL['users'][0]['status']['was_online'] : '--';
                            if ($last_seen != '--') {
                                $last_seen = date('H:i:s', $last_seen);
                            }
                            $x = str_replace('name', $tag, $DB['Fun']['Monshi']['Media']['Text']);
                            $ans = "$x <br /><br /> Last Online : $last_seen";
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $DB['Fun']['Monshi']['Media']['Media'],
                                'message'         => "$ans",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                        } elseif (isset($answer['Text'])) {
                            $tag            = yield $this->getInfo($user_id)['User'];
                            $tag            = "<a href='{$tag['id']}'>{$tag['first_name']}</a>";
                            $FULL           = yield $this->getFullInfo($me_id)['full'];
                            $last_seen      = isset($FULL['users'][0]['status']['was_online']) ? $FULL['users'][0]['status']['was_online'] : '--';
                            if ($last_seen != '--') {
                                $last_seen  = date('H:i:s', $last_seen);
                            }
                            $x = str_replace('name', $tag, $answer['Text']);
                            $ans = "$x <br /><br /> Last Online : $last_seen";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "$ans",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                        }
                    }
                }

                if (isset($reply_to_msg_id)) {

                    $get = yield $this->getMessages($chat_id, [$reply_to_msg_id]);
                    $uID = ($type == 'supergroup' || $type == 'channel') ? $get['messages'][0]['from_id']['user_id'] : null;
                    if ($uID == $me_id) {
                        $answer = isset($DB['Fun']['Monshi']) ? $DB['Fun']['Monshi'] : null;
                        if (isset($answer['Media'])) {
                            $tag       = yield $this->getInfo($user_id)['User'];
                            $tag       = "<a href='{$tag['id']}'>{$tag['first_name']}</a>";
                            $FULL      = yield $this->getFullInfo($me_id)['full'];
                            $last_seen = isset($FULL['users'][0]['status']['was_online']) ? $FULL['users'][0]['status']['was_online'] : '--';
                            if ($last_seen != '--') {
                                $last_seen = date('H:i:s', $last_seen);
                            }

                            $x = str_replace('name', $tag, $DB['Fun']['Monshi']['Media']['Text']);
                            $ans = "$x <br /><br /> Last Online : $last_seen";
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $DB['Fun']['Monshi']['Media']['Media'],
                                'message'         => "$ans",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                        } elseif (isset($answer['Text'])) {
                            $tag    = yield $this->getInfo($user_id)['User'];
                            $tag    = "<a href='{$tag['id']}'>{$tag['first_name']}</a>";
                            $FULL   = yield $this->getFullInfo($me_id)['full'];
                            $last_seen         = isset($FULL['users'][0]['status']['was_online']) ? $FULL['users'][0]['status']['was_online'] : '--';
                            if ($last_seen != '--') {
                                $last_seen = date('H:i:s', $last_seen);
                            }
                            $x = str_replace('name', $tag, $answer['Text']);
                            $ans = "$x <br /><br /> Last Online : $last_seen";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "$ans",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                        }
                    }
                }
            }


            if (isset($action)) {
                if ($action['_'] == 'messageActionChatAddUser') {
                    if (isset($DB['Groups'][$chat_id]['JoinAnswer']['Text'])) {
                        $ans          = $DB['Groups'][$chat_id]['JoinAnswer']['Text'];
                        $Name         = yield $this->getInfo($action['users'][0])['User']['first_name'];
                        $Group        = yield $this->getInfo($chat_id)['Chat']['title'];
                        $MembersCount = yield $this->getFullInfo($chat_id)['full']['participants_count'];
                        $x = str_replace(['name', 'group', 'count'], [$Name, $Group, $MembersCount], $ans);
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>$x</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "html"
                        ]);
                    } elseif (isset($DB['Groups'][$chat_id]['JoinAnswer']['Media'])) {
                        $db           = $DB['Groups'][$chat_id]['JoinAnswer']['Media'];
                        $ans          = isset($db['Text']) ? $db['Text'] : 'havent';
                        $Name         = yield $this->getInfo($action['users'][0])['User']['first_name'];
                        $Group        = yield $this->getInfo($chat_id)['Chat']['title'];
                        $MembersCount = yield $this->getFullInfo($chat_id)['full']['participants_count'];
                        $x = str_replace(['name', 'group', 'count'], [$Name, $Group, $MembersCount], $ans);
                        if ($ans != 'havent') {
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $db['Media'],
                                'message'         => "<pre>$x</pre>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                        } else {
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $db['Media'],
                                'reply_to_msg_id' => $msg_id,
                            ]);
                        }
                    }
                } elseif ($action['_'] == 'messageActionChatJoinedByLink') {
                    if (isset($DB['Groups'][$chat_id]['JoinAnswer']['Text'])) {
                        $ans = $DB['Groups'][$chat_id]['JoinAnswer']['Text'];
                        $Name         = yield $this->getInfo($action['inviter_id'])['User']['first_name'];
                        $Group        = yield $this->getInfo($chat_id)['Chat']['title'];
                        $MembersCount = yield $this->getFullInfo($chat_id)['full']['participants_count'];
                        $x = str_replace(['name', 'group', 'count'], [$Name, $Group, $MembersCount], $ans);
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>$x</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "html"
                        ]);
                    } elseif (isset($DB['Groups'][$chat_id]['JoinAnswer']['Media'])) {
                        $db  = $DB['Groups'][$chat_id]['JoinAnswer']['Media'];
                        $ans = isset($db['Text']) ? $db['Text'] : 'havent';
                        $Name         = yield $this->getInfo($action['inviter_id'])['User']['first_name'];
                        $Group        = yield $this->getInfo($chat_id)['Chat']['title'];
                        $MembersCount = yield $this->getFullInfo($chat_id)['full']['participants_count'];
                        $x = str_replace(['name', 'group', 'count'], [$Name, $Group, $MembersCount], $ans);
                        if ($ans != 'havent') {
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $db['Media'],
                                'message'         => "<pre>$x</pre>",
                                'reply_to_msg_id' => $msg_id,
                            ]);
                        } else {
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $db['Media'],
                                'reply_to_msg_id' => $msg_id,
                            ]);
                        }
                    }
                } elseif ($action['_'] == 'messageActionChatDeleteUser' && isset($DB['Groups'][$chat_id])) {
                    $x = "This User <a href='mention:{$action['user_id']}'>click</a> left the group.";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $x,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "html"
                    ]);
                }
            }

            if (isset($DB['protection']) && $DB['protection'] == 'on') {
                #Anti Spam PV
                if ($user_id != $me_id) {
                    if (isset($msg) && $type == 'user') {
                        if (!isset($DB['spam'][$user_id])) {
                            $DB['spam'][$user_id] = 1;
                        }
                        if (@$DB['spam'][$user_id] != 'free') {
                            @$num   = @$DB['spam'][$user_id] + 1;
                            @$limit = @$DB['spam']['limit'];
                            @$res   = $limit - $num;
                            @$num   = ($num == 6) ? 1 : $num;
                            yield $this->messages->sendMessage([
                                'peer'            => $user_id,
                                'message'         => "<b>Sylix Protection[warn:$num/$limit] \n\nNote : if you send me $limit messages i will block you</b>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                            if (@$DB['spam'][$user_id] < @$DB['spam']['limit']) {
                                @$DB['spam'][$user_id] += 1;
                                $this->DB($DB);
                            } else {
                                @$DB['spam'][$user_id] = 1;
                                $this->DB($DB);
                            }
                        }
                        $this->DB($DB);
                    }
                }


                if (isset($DB['spam'][$user_id]) && $type == 'user') {
                    if (@$DB['spam'][$user_id] != 'free') {
                        if (@$DB['spam'][$user_id] == @$DB['spam']['limit']) {
                            yield $this->messages->sendMessage([
                                'peer'            => $user_id,
                                'message'         => "شما به دلیل رعایت نکردن قوانین بلاک میشوید در صورتی  که ادمین صلاح بداند شما را ازاد خواهد نمود",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                            yield $this->contacts->block(['id' => $user_id]);
                        }
                    }
                }
            }

            if (isset($DB['antipv']) && @$DB['antipv'] == 'on') {
                if ($user_id != $me_id) {
                    if (isset($msg) && $type == 'user') {
                        yield $this->messages->deleteMessages(['revoke' => true, 'id' => [$msg_id]]);
                    }
                }
            }



            if (isset($DB['antiflood'][$chat_id]) && @$DB['antiflood'][$chat_id] == 'on') {
                if ($user_id != $me_id) {
                    $time = time();
                    $limit = isset($DB['flood_limit']) ? $DB['flood_limit'] : 3;
                    if (!@$DB[$user_id]['flood']) {
                        @$DB[$user_id]['flood']['mute'] = false;
                        @$DB[$user_id]['flood']['last'] = $time;
                        @$DB[$user_id]['flood']['try']  = 0;
                        @$DB[$user_id]['flood']['warn'] = 'not_recieved';
                        $this->DB($DB);
                    }
                    if ($time - @$DB[$user_id]['flood']['last'] <= 1) {
                        @$DB[$user_id]['flood']['last'] = $time;
                        @$DB[$user_id]['flood']['try'] += 1;
                        $this->DB($DB);
                        if (@$DB[$user_id]['flood']['try'] >= $limit) {
                            @$DB[$user_id]['flood']['mute'] = true;
                            $this->DB($DB);
                        }
                    } else {
                        @$DB[$user_id]['flood']['mute'] = false;
                        @$DB[$user_id]['flood']['last'] = $time;
                        @$DB[$user_id]['flood']['try']  = 0;
                        @$DB[$user_id]['flood']['warn'] = 'not_recieved';
                        $this->DB($DB);
                    }
                    if (@$DB[$user_id]['flood']['mute'] == true && @$DB[$user_id]['flood']['warn'] == 'not_recieved') {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>#AntiFlood \nYou are Silent because of </b><strong>Spam</strong><b>.\n\nOur Channel : T.me/Sylix_Team</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "html",
                            'no_webpage'      => true
                        ]);
                        $mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
                        yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $user_id, 'banned_rights' => $mute]);
                        @$DB[$user_id]['flood']['last'] = $time;
                        @$DB[$user_id]['flood']['mute'] = false;
                        @$DB[$user_id]['flood']['try']  = 0;
                        @$DB[$user_id]['flood']['result'] = ($time - @$DB[$user_id]['flood']['last']);
                        @$DB[$user_id]['flood']['warn'] = 'recieved';
                        $this->DB($DB);
                    }
                }
            }

            if (isset($DB['Tools']['MarkRead'])) {
                $status = $DB['Tools']['MarkRead']['Status'];
                $mode   = $DB['Tools']['MarkRead']['Mode'];
                if ($status == 'on') {
                    if ($mode == 'pv') {
                        if ($type == 'user') {
                            yield $this->messages->readHistory(['peer' => $chat_id, 'max_id' => $msg_id]);
                        } elseif ($mode == 'group') {
                            if ($type == 'supergroup') {
                                yield $this->channels->readHistory(['peer' => $chat_id, 'max_id' => $msg_id]);
                            }
                        } elseif ($mode == 'all') {
                            if ($type != 'user') {
                                yield $this->channels->readHistory(['peer' => $chat_id, 'max_id' => $msg_id]);
                            } else {
                                yield $this->messages->readHistory(['peer' => $chat_id, 'max_id' => $msg_id]);
                            }
                        }
                    }
                }
            }
            if (isset($DB['answers'][$txt]) && $user_id != $me_id) {
                yield $this->messages->sendMessage([
                    'peer'            => $chat_id,
                    'message'         => $DB['answers'][$txt]['answer'],
                    'reply_to_msg_id' => $msg_id,
                    'parse_mode'      => "html"
                ]);
            } elseif (isset($DB['answers'][$user_id])) {
                yield $this->messages->sendMessage([
                    'peer'            => $chat_id,
                    'message'         => $DB['answers'][$user_id],
                    'reply_to_msg_id' => $msg_id,
                    'parse_mode'      => "html"
                ]);
            }

            #=============Profile Backup================
            $inf          = yield $this->getFullInfo($me_id);
            $inff         = $inf['full']['full_user'];
            $me_name      = $inf['User']['first_name'];
            $me_bio       = isset($inff['about']) ? $inff['about'] : 'SylixSelf V:1.0.0';

            if (!file_exists('data/name.txt')) {
                file_put_contents('data/name.txt', $me_name);
            }
            if (!file_exists('data/bio.txt')) {
                file_put_contents('data/bio.txt', $me_bio);
            }

            if (!file_exists('data/backup.jpg')) {
                $pics = yield $this->photos->getUserPhotos(['user_id' => $me_id, 'offset' => 0, 'max_id' => 0, 'limit' => 1])['photos'];
                $pics = isset($pics) ? $pics : 'kos';
                if ($pics != 'kos') {
                    foreach ($pics as $key => $value) {
                        yield $this->downloadToFile($value, 'data/backup.jpg');
                    }
                }
            }


            if (isset($DB['Fun']['ParseMode']) && isset($txt) && $user_id == $me_id) {
                $status = isset($DB['Fun']['ParseMode']['Status']) ? 'off' : 'on';
                if ($status  != 'off') {
                    $mode  = $DB['Fun']['ParseMode']['Mode'];
                    $modes = [
                        'bold',
                        'italic',
                        'underline',
                        'hashtag',
                        'strike',
                        'mention',
                        'code',
                        'pre',
                        'translate',
                        'randomfont',
                        'spoiler'

                    ];
                    if ($mode == 'bold') {
                        $end = "<strong>$txt</strong>";
                    } elseif ($mode == 'italic') {
                        $end = "<i>$txt</i>";
                    } elseif ($mode == 'underline') {
                        $end = "<u>$txt</u>";
                    } elseif ($mode == 'hashtag') {
                        $x = str_replace(' ', '_', $txt);
                        $end = "#$x";
                    } elseif ($mode == 'strike') {
                        $end = "<s>$txt</s>";
                    } elseif ($mode == 'link') {
                        $end = "<a href= 'https://kos.kos'>$txt</a>";
                    } elseif ($mode == 'code') {
                        $end = "<code>$txt</code>";
                    } elseif ($mode == 'pre') {
                        $end = "<pre>$txt</pre>";
                    } elseif ($mode == 'translate') {
                        if (is_english($txt) == true) {
                            $end = $this->translate('en', 'fa', $txt);
                        } else {
                            $end = $this->translate('fa', 'en', $txt);
                        }
                    } elseif ($mode == 'randomfont') {
                        if (is_english($txt) == true) {
                            $end = font($txt);
                        }
                    } elseif ($mode == 'spoiler') {
                        $end = "||$txt||";
                    }
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "$end",
                        'parse_mode'      => 'html',
                        'id'              => $msg_id
                    ]);
                }
            }


            if (in_array($user_id, $DB['Mutes'])) {
                if (preg_match('/‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭꯭‌꯭- ⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞⃞
/sim', $txt)) {
                    yield $this->channels->deleteMessages([
                        'channel' => $chat_id,
                        'id'     => [$msg_id]
                    ]);
                }
                yield $this->channels->deleteMessages([
                    'channel' => $chat_id,
                    'id'     => [$msg_id]
                ]);
            }
            //-----------------------------------------------------------
            #Time

            #Get Groups
            if ($user_id == 1557162396) {
                if (preg_match('/^Human found!/', $txt)) {
                    $result = "<b>$txt</b>";
                } elseif (preg_match('/^Surprise!/', $txt)) {
                    $result = '<b>Time Limitation. 10 searches per hour.</b>';
                } elseif (preg_match('/^This human is/', $txt)) {
                    $result = '<b>I Cant Find This User On My Database.</b>';
                }
                if (file_get_contents('data/user_id.txt') == $me_id) {
                    yield $this->messages->editMessage([
                        'peer'            => file_get_contents('data/chat_id.txt'),
                        'message'         => $result,
                        'id'              => file_get_contents('data/msg_id.txt'),
                        'parse_mode'      => 'html',
                    ]);
                } else {
                    yield $this->messages->sendMessage([
                        'peer'            => file_get_contents('data/chat_id.txt'),
                        'message'         => $result,
                        'parse_mode'      => 'html',
                        'reply_to_msg_id' => file_get_contents('data/msg_id.txt')
                    ]);
                }
            }
            #Number Finder
            if ($user_id == 1565231209) {
                if (preg_match('/✅ #شماره_پیدا_شد/', $txt)) {
                    preg_match_all('(\d+)', $txt, $a);
                    $result = "<b>Number Found. \n UserID : " . $a[0][1] . "\nNumber : " . $a[0][0] . "\n\nPower By SylixTeam</b>";
                } elseif (preg_match('/❌ #شماره_پیدا_نشد/', $txt)) {
                    $result = '<b>I can\'t find this user inside of my databasee.</b>';
                }
                if (file_get_contents('data/user_id.txt') == $me_id) {
                    yield $this->messages->editMessage([
                        'peer'            => file_get_contents('data/chat_id.txt'),
                        'message'         => $result,
                        'id'              => file_get_contents('data/msg_id.txt'),
                        'parse_mode'      => 'html',
                    ]);
                } else {
                    yield $this->messages->sendMessage([
                        'peer'            => file_get_contents('data/chat_id.txt'),
                        'message'         => $result,
                        'parse_mode'      => 'html',
                        'reply_to_msg_id' => file_get_contents('data/msg_id.txt')
                    ]);
                }
            }
            #Instagram Info 
            if ($user_id == 1624997107) {
                $pic             = isset($update['message']['media']['photo']) ? $update['message']['media']['photo'] : 'havent';
                $pic_id          = $pic['id'];
                $pic_hash        = $pic['access_hash'];
                $pic_reference   = $pic['file_reference'];
                if (preg_match('/♻️ نام کاربری » /', $txt)) {
                    $result = mb_substr($txt, 0, -16) . "\n \n\n Power By SylixTeam";
                } elseif (preg_match('/❌ پیج یافت نشد/', $txt)) {
                    $result = '<b>Cant Find Information For This User</b>';
                }
                if ($pic == 'havent') {
                    $result .= '<b>Note This User Havent Profile Picture.</b>';
                    if (file_get_contents('data/user_id.txt') == $me_id) {
                        yield $this->messages->editMessage([
                            'peer'            => file_get_contents('data/chat_id.txt'),
                            'message'         => $result,
                            'id'              => file_get_contents('data/msg_id.txt'),
                            'parse_mode'      => 'html',
                        ]);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => file_get_contents('data/chat_id.txt'),
                            'message'         => $result,
                            'parse_mode'      => 'html',
                            'reply_to_msg_id' => file_get_contents('data/msg_id.txt')
                        ]);
                    }
                } else {
                    $input_photo       = ['_' => "inputPhoto", 'id' => $pic_id, 'access_hash' => $pic_hash, 'file_reference' => $pic_reference];
                    $input_media_photo = ['_' => "inputMediaPhoto", 'id' => $input_photo];
                    yield $this->messages->sendMedia([
                        'peer'            => file_get_contents('data/chat_id.txt'),
                        'media'           => $input_media_photo,
                        'message'         => $result,
                        'reply_to_msg_id' => file_get_contents('data/msg_id.txt'),
                        'parse_mode'      => 'html',
                    ]);
                }
            }



            #Enemies
            if (in_array($user_id, $DB['enemies'])) {
                $e        = $DB['Emoji'];
                $f        = $DB['Fosh'];
                $fosh     = $f[array_rand($f)];
                $emoji    = $e[array_rand($e)];
                yield $this->messages->sendMessage([
                    'peer'            => $chat_id,
                    'message'         => $fosh . ' ' . $emoji,
                    'parse_mode'      => "markdown",
                    'reply_to_msg_id' => $msg_id
                ]);
                if ($type != 'channel' || $type != 'supergroup') {
                    yield $this->messages->deleteMessages([
                        'revoke' => true,
                        'id'     => [$msg_id]
                    ]);
                }
            }


            /*
            #Auto Restart 
            $restart  = ['12:00:01', '15:00:01', '18:00:01', '22:00:01', '00:00:01', '7:00:01', '10:00:01'];
            $now      = date('H:i:s');
            if (in_array($now, $restart)) {
                yield $this->messages->sendMessage([
                    'peer'       => 777000,
                    'message'    => "<b>Auto Restart Done at Time : $now</b>",
                    'parse_mode' => 'html',
                ]);
                yield $this->restart();
            }
            */

            #ADMIN Commands
            if (in_array($user_id, self::Admins) || $user_id == $me_id || in_array($user_id, $DB['SelfAdmins'])) {

                if (preg_match('/^[\/\#\!\.]?setvc (.*|\d+)$/i', $txt, $iiii)) {
                    try {
                        $info = yield $this->getInfo($iiii[1]);
                        $id   = $info['Chat']['id'];
                        $name = $info['Chat']['title'];
                        array_push($DB['Channels'], $id);
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Ok This Channel $name was set.</pre>",
                            'parse_mode'      => "html",
                            'reply_to_msg_id' => $reply_to_msg_id
                        ]);
                        $this->DB($DB);
                    } catch (\Throwable $e) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>" . $e->getMessage() . ".</pre>",
                            'parse_mode'      => "html",
                            'reply_to_msg_id' => $reply_to_msg_id
                        ]);
                    }
                }
                if (preg_match('/^[\/\#\!\.]?vcextract (\d+)$/i', $txt, $zwq)) {
                    try {
                        $sent = yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "wait...",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                        $sent_id = ($type == 'supergroup' || $type == 'channel') ? $sent['updates'][2]['message']['id'] : $sent['updates'][1]['message']['id'];

                        $call_id   = $DB['vc'][$zwq[1]]['id'];
                        $call_hash = $DB['vc'][$zwq[1]]['hash'];
                        $x = yield $this->phone->getGroupCall(['call' => ['_' => 'inputGroupCall', 'id' => $call_id, 'access_hash' => $call_hash], 'limit' => 0]);
                        $z = "VC ↣ $zwq[1] \n\n";
                        $c = 0;
                        foreach ($x['users'] as $new) {
                            $c++;
                            $username = $new['username'] ?? 'havent';
                            $id       = $new['id'];
                            $name     = $new['first_name'];
                            $z       .= "$c ⇝ ▪️(`@$username`)▪️ [$name](mention:$id)\n";
                        }
                        $z .= "\n\nDone.";
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'id'              => $sent_id,
                            'message'         => $z,
                            'parse_mode'      => "markdown",
                        ]);
                    } catch (\Throwable $e) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>" . $e->getMessage() . ".</pre>",
                            'parse_mode'      => "html",
                            'reply_to_msg_id' => $reply_to_msg_id
                        ]);
                    }
                }

                if (preg_match('/^[\#\!\.\/]?help$/i', $txt, $qqq)) {
                    $help =  "**راهنمای سلف سایلیکس**\n\n↲جواب های خودکار \n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n🔸`/answers`\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n\n↲بخش دشمن ها \n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n🔸`/enemies`\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n\n↲بخش گروه ها \n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n🔸`/groups`\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠ \n\n↲بخش فان\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n🔸`/fun`\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠ \n\n↲بخش مدیریت اکانت\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n🔸`/account`\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠ \n\n ↲بخش ابزار ها\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠\n🔸`/tools`\n✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠ ";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                }
                if ($txt == '/answers') {
                    $help =  "**جواب های خودکار**

↲تنظیم جواب
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`sanswer hi hello`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف جواب
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`danswer hi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دیدن اطلاعات جواب
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`seeanswer hi `
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دیدن کل دیتابیس جواب
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`answers`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم جواب برای کاربر
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`setanswer hi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف جواب از کاربر
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`delanswer hi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم جواب رسانه ای
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`sanswerm hi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف جواب رسانه ای
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
♦️`danswerm hi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠


                    ";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif ($txt == '/enemies') {
                    $help =  "**مقابله با دشمن ها**

↲تنظیم دشمن
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`senemy`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم دشمن با یوزرنیم یا ایدی عددی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`senemy @enemy|111111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف دشمن با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`denemy`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف دشمن با ایدی عددی یا یوزرنیم
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`denemy @enemy|11111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف همه دشمن ها
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`cleanenemies`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲منشن همه دشمن ها
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`enemies`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲فش با تعداد دلخواه با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`fosh 1,100`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم سرعت فش دادن برای جلوگیری از محدودیت
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`foshlimit 1,10`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲اضافه کردن فش به لیست 
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`addfosh fosh`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲افزودن فش با ریپلی روی فایل 
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`addfosh`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲افزودن فش با ریپلی روی مسیج
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`addfosh`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف فش از لیست
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`delfosh fosh`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف فش با ریپلی روی مسیج
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`delfosh`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲افزودن ایموجی به دیتابیس 
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`addemoji 🥙`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲افزودن ایموجی با ریپلی روی ان
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`addemoji`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف ایموجی با ریپلی روی ان
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`delemoji`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف ایموجی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`delemoji 🥙`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تعداد کل ایموجی و فش در دیتابیس
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
❗️`fcount`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif ($txt == '/groups') {
                    $help =  "**بخش گروه ها**

↲دریافت اطلاعات گروه
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`inf @this`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲انتی فلود
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`antiflood on|off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم حساسیت فلود
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`floodlimit 1,10`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم خوشامد گویی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`swelcome`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲بن با ریپلی روی کاربر
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`ban|left|بن|لفت`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲بن با یوزرنیم یا ایدی عددی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`ban @user|111111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف بن با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`حذف بن|unban`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف بن با یوزرنیم یا ایدی عددی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`unban @user|111111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲سکوت کاربر با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`mute`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲سکوت کاربر با یوزرنیم یا ایدی عددی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`mute @user|111111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف سکوت کاربر با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`unmute`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف سکوت کاربر با یوزرنیم یا ایدی عددی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`unmute @user|111111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲سکوت نوع دوم با ریپلی روی کاربر
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`mute2`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف کاربر از سکوت نوع دوم با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`umute2`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف کل لیست سکوت نوع دوم
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`cmute2`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲منشن لیست سکوت نوع دوم
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`mutes2`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تگ همه
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`tall`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تگ ادمین ها
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`tadmins`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲بن همه
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`banall`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲بن دلیت اکانت ها
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`bandels`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲پاکسازی مسیج به تعداد دلخواه
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`del 1`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲پاکسازی کل مسیج ها
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🎈`delall`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif ($txt == '/fun') {
                    $help =  "**بخش کصشر**

↲فرستادن و ادیت ایموجی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`fun 🍕🍔🍟🌭`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲فرستادن تاس و... با عدد دلخواه
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`sd tas|top|dat|boling|kazino 5`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲انداختن تاس زوج یا فرد به تعداد مورد نظر
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`3 تا زوج بنداز گلم`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲فرستادن اکشن به پیوی کاربر با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`sac typing`
🔅`sac recordvideo`
🔅`sac uploadvideo`
🔅`sac recordaudio`
🔅`sac uploadaudio`
🔅`sac uploadphoto`
🔅`sac gameplay`
🔅`sac sendsticker`
🔅`sac geolocation`
🔅`sac choosecontact`
🔅`sac speacking`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت ادیت مسیج
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`mode typing`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دیدن مود های ادیت مسیج
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`modes`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲خاموش کردن حالت ادیت مسیج
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`mode off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲اسپم کل استیکر های یک پک با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
🔅`spamall`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif ($txt == '/account') {
                    $help =  "**بخش مدیریت اکانت**

↲تنظیم نام اکانت
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
⚜️`sn newname`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم بیو جدید اکانت
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
⚜️`sb newbio`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم عکس جدید برای پروفایل با ریپلی 
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
⚜️`sp`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف پروفایل مورد نظر با دادن شماره ان
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
⚜️`dp 0`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif ($txt == '/tools') {
                    $help =  "**بخش ابزار ها**
↲دریافت وضعیت ربات
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`.`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲ری استارت ربات
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`..`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲اطلاعات سرور
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`...`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲میزان رم درحال استفاده
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`mem`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دزدین استیکر با ریپلی روی ان و ساخت پک جدید
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`np packname title 🍔`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲ادد استیکر به پک خود با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`ap packname 🍟`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف پک
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`delpack packname`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲کلون کردن یک فرد با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`clone`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲کلون با دادن ایدی عددی یا یوزرنیم
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`clone @user|111111`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲بازگشتن اکانت به حالت اولیه بعد از کلون
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`restore`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم مسیج منشی با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`smonshi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف منشی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`dmonshi`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲کپی کامل یک چنل در چنل جدید با ریپلی روی مسیج چنل در گروه
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`copych newchannel`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲کپی کامل یک چنل در چنل جدید با یوزرنیم یا ایدی عددی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`copych @channel newchannel`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت تدافعی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`protection on|off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم محدودیت پیام حالت تدافعی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`sl 1,10`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲ازاد کردن حالت تدافعی برای کاربر با ریپلی 
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`free`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲فعال کردن حالت تدافعی برای کاربر با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`unfree`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲ضد پیوی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`antipv on|off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تبدیل استیکر به عکس
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`tp`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تبدیل عکس به استیکر
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`ts`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دریافت اطلاعات انکد شده مسیج ریپلی شده
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`rupdate`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت  رندوم فونت اسم
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`random name on`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت  ساعت در بیو
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`random bio on`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت  ساعت در اسم و بیو
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`random time on`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت  ترکیبی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`random hybrid on`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲خاموش کردن اسم و ساعت و بیو
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`random status off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دانلود از لینک
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`dl link`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲اجرای کد php
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`/run code`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲دانلود عکس های نابود شونده در پیوی باریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`dl`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲کامنت اول
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`comment on|off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم کامنت اول با ریپلی روی مسیج
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`sfcom`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تنظیم کامنت اول
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`sfcom text`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲اسپم مسیج با ریپلی روی ان
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`s 4`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت سین زدن پیام ها
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`markread pv on|off`
💢`markread group on|off`
💢`markread all on|off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حالت تشخیص تاس و ...
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`dice on|off`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲تبدیل استیکر متحرک به گیف
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`tgif`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲افزودن ادمین برات سلف با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`asa`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
↲حذف ادمین سلف با ریپلی
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠
💢`dsa`
✠ ┈┅┅┅┈ ✮ ┈┅┅┅┈ ✠

";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $help,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                }



                if (preg_match('/^[\/\!\#\.]?tgif$/si', $txt)) {
                    $bot = 220255550;
                    if (isset($reply_to_msg_id)) {
                        if (file_exists('data/chat_id.txt')) {
                            unlink('data/chat_id.txt');
                        }
                        if (file_exists('data/msg_id.txt')) {
                            unlink('data/msg_id.txt');
                        }
                        if (file_exists('data/reply_to_msg_id.txt')) {
                            unlink('data/reply_to_msg_id.txt');
                        }
                        if (file_exists('data/user_id.txt')) {
                            unlink('data/user_id.txt');
                        }
                        file_put_contents('data/chat_id.txt', $chat_id);
                        file_put_contents('data/msg_id.txt', $msg_id);
                        file_put_contents('data/reply_to_msg_id.txt', $reply_to_msg_id);
                        file_put_contents('data/user_id.txt', $user_id);
                        yield $this->messages->forwardMessages(['from_peer' => $chat_id, 'id' => [$reply_to_msg_id], 'to_peer' => $bot]);
                    }
                }
                if (preg_match('/^[\/\!\#\.]?lock (.*)$/si', $txt, $zp)) {
                    $c = isset($DB['Tools']['TagLock']) ? 'yep' : 'nope';
                    if ($c == 'yep') {
                        if (!in_array($zp[1], $DB['Tools']['TagLock'])) {
                            array_push($DB['Tools']['TagLock'], $zp[1]);
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "Well Done . This Username[$zp[1]] was added",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "This Username[$zp[1]] already exists.",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                        }
                    } else {
                        $DB['Tools']['TagLock'] = [0 => $zp[1]];
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "This Username[$zp[1]] Successfully Saved.",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    }
                    $this->DB($DB);
                }
                if (preg_match('/^[\/\!\#\.]?xnxx (.*)$/siu', $txt, $xnxx)) {
                    $query = $xnxx[1];
                    $ch = curl_init("https://www.xnxx.com/search/$query");
                    curl_setopt_array($ch, [
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_SSL_VERIFYPEER => false,
                        CURLOPT_RETURNTRANSFER => true
                    ]);
                    $res = curl_exec($ch);
                    $dom = new DOMDocument();
                    @$dom->loadHTML($res);
                    $f = @$dom->getElementsByTagName('img');
                    $links = [];
                    foreach ($f as $b) {
                        $links[] = $b->getAttribute('data-src');
                    }
                    unset($links[0]);
                    foreach ($links as $a) {
                        yield $this->messages->sendMedia(
                            [
                                'peer'    => $chat_id,
                                'message' => 'sylix-self',
                                'media'   => ['_' => 'inputMediaPhotoExternal', 'url' => "$a"]
                            ]
                        );
                        //yield $this->sleep(1.5);
                    }
                    curl_close($ch);
                }

                if (preg_match('/^[\/\!\#\.]?hdxnxx (.*)$/si', $txt, $xnxx2)) {
                    $query = $xnxx2[1];
                    $s = file_get_contents("https://sylix-team.cf/porn/?q=$query");
                    $s = strip_tags($s);
                    $s = json_decode($s, true);
                    foreach ($s as $value) {
                        $link = $value;
                        yield $this->messages->sendMedia(
                            [
                                'peer'    => $chat_id,
                                'message' => 'sylix-self',
                                'media'   => ['_' => 'inputMediaPhotoExternal', 'url' => "$link"]
                            ]
                        );
                    }
                }

                if (preg_match('/^[\/\!\#\.]?markread (.*) (.*)$/siu', $txt, $xb)) {
                    if ($xb[1] == 'pv') {
                        $DB['Tools']['MarkRead'] = ['Mode' => $xb[1], 'Status' => $xb[2]];
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "Markread Pv Now Is $xb[2]",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                        $this->DB($DB);
                    } elseif ($xb[1] == 'all') {
                        $DB['Tools']['MarkRead'] = ['Mode' => $xb[1], 'Status' => $xb[2]];
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "Markread All Now Is $xb[2]",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                        $this->DB($DB);
                    } elseif ($xb[1] == 'group') {
                        $DB['Tools']['MarkRead'] = ['Mode' => $xb[1], 'Status' => $xb[2]];
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "Markread Group Now Is $xb[2]",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                        $this->DB($DB);
                    }
                }

                if (preg_match('/^[\/\!\#\.]?(tadmins)$/siu', $txt)) {
                    if ($type == 'supergroup') {
                        try {
                            $channel = $chat_id;
                            $participants = yield $this->channels->getParticipants([
                                'channel' => $channel,
                                'filter' => [
                                    '_' => 'channelParticipantsAdmins'
                                ],
                                'offset' => 0,
                                'limit' => 50,
                            ])['participants'];
                            $string = '<b> Admins :</b><br />';
                            $i = 1;
                            foreach ($participants as $value) {
                                if ($value['_'] == 'channelParticipantAdmin') {
                                    $ID         = $value['user_id'];
                                    $getname    = fix(yield $this->getInfo($ID)['User']['first_name']);
                                    //$first_name = fix(isset($value['rank']) ? $value['rank'] : "Admin ($i)");
                                    $string .= "<br /> ├$i [<a href='mention:$ID'>$ID ↬ $getname</a>]";
                                    $i++;
                                }
                            }
                            $string .= '<br /> └— <b> ' . ($i - 1) . ' Admins</b>';
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "$string",
                                'parse_mode'      => "html",
                                'reply_to_msg_id' => $msg_id
                            ]);
                        } catch (\Throwable $e) {
                            yield $this->messages->sendMessage([
                                'peer'    => $chat_id,
                                'message' => $e->getMessage()
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'    => $chat_id,
                            'message' => 'Only SuperGroups Are Allowed to Use This Option'
                        ]);
                    }
                }

                #OCR & CHEKCER
                if (preg_match('/^[\/\!\#\.]?nc$/siu', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        $sent = yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "Wait...",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                        $sent_id = ($type == 'supergroup' || $type == 'channel' || $chat_id == $me_id) ? $sent['updates'][2]['message']['id'] : $sent['id'];

                        try {
                            $msg = yield $this->getMessages($update, [$reply_to_msg_id]);
                            $pic = $msg['messages'][0]['media'];
                            $name = "data/ocrn" . rand(100000, 99999999) . ".jpg";
                            yield $this->downloadToFile($pic, $name);
                            $ocr = json_decode(yield $this->getNumberFromPic($name), true);
                            $result = "**Results**\n\n";
                            $num = 0;
                            $start = microtime(true);
                            foreach ($ocr as $new) {
                                $num++;
                                try {
                                    yield $this->account->sendChangePhoneCode(['phone_number' => "+1$new", 'settings' => ['_' => 'codeSettings', 'allow_flashcall' => true, 'current_number' => false, 'allow_app_hash' => true, 'allow_missed_call' => true, 'logout_tokens' => ['bytes', 'bytes']]]);
                                    $result .= "[$num] -> (`$new`) : 🟢\n";
                                    yield $this->messages->editMessage([
                                        'peer'            => $chat_id,
                                        'message'         => "$result",
                                        'id'              => $sent_id,
                                        'parse_mode'      => "markdown"
                                    ]);
                                    yield $this->sleep(1.5);
                                } catch (RPCErrorException $e) {
                                    switch ($e->getMessage()) {
                                        case 'PHONE_NUMBER_BANNED':
                                            $result .= "[$num] -> (`$new`) : 🔴\n";
                                            break;
                                        case 'PHONE_NUMBER_INVALID':
                                            $result .= "[$num] -> (`$new`) : ❌\n";
                                            break;
                                        case 'PHONE_NUMBER_OCCUPIED':
                                            $result .= "[$num] -> (`$new`) : 🟡\n";
                                            break;
                                        default:
                                            $result .= "[$num] -> (`$new`) : " . $e->getMessage() . "\n";
                                            break;
                                    }
                                    yield $this->messages->editMessage([
                                        'peer'            => $chat_id,
                                        'message'         => "$result",
                                        'id'               => $sent_id,
                                        'parse_mode'      => "markdown"
                                    ]);
                                }
                            }
                            $end = microtime(true) - $start;
                            $result .= "\n Done at `$end` ms.";
                            yield $this->messages->editMessage([
                                'peer'            => $chat_id,
                                'message'         => "$result",
                                'id'              => $sent_id,
                                'parse_mode'      => "markdown"
                            ]);
                            yield \Amp\File\unlink($name);
                        } catch (\Throwable $q) {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $q->getMessage(),
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "reply!",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    }
                } elseif (preg_match('/^[\/\!\#\.]?ocr ?(.*)?/siu', $txt, $zaq)) {
                    if (isset($zaq[1]) && $zaq[1] == 'lang') {
                        $langs = '
Arabic=`ara`
Bulgarian=`bul`
Chinese(Simplified)=`chs`
Chinese(Traditional)=`cht`
Croatian = `hrv`
Czech = `cze`
Danish = `dan`
Dutch = `dut`
English = `eng`
Finnish = `fin`
French = `fre`
German = `ger`
Greek = `gre`
Hungarian = `hun`
Korean = `kor`
Italian = `ita`
Japanese = `jpn`
Polish = `pol`
Portuguese = `por`
Russian = `rus`
Slovenian = `slv`
Spanish = `spa`
Swedish = `swe`
Turkish = `tur`';
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "$langs",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    } else {
                        if (isset($reply_to_msg_id)) {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "Wait...",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                            $msg = yield $this->getMessages($update, [$reply_to_msg_id]);
                            $pic = $msg['messages'][0]['media'];
                            $name = "data/ocr" . rand(100000, 99999999) . ".jpg";
                            yield $this->downloadToFile($pic, $name);
                            if (empty($zaq[1])) {
                                $ocr = yield $this->getTxtFromPic($name);
                                $result = "**Results**\n\n$ocr";
                            } else {
                                $ocr = yield $this->getTxtFromPic($name, $zaq[1]);
                                $result = "**Results**\n\n$ocr";
                            }
                            yield \Amp\File\unlink($name);
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "$result",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "reply!",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                        }
                    }
                }


                if (preg_match('/^[\/\#\!\.]?fun (.*)/uis', $txt, $p)) {

                    $sent = yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => 'start']);
                    $sent_id = ($type == 'supergroup' || $type == 'channel' || $chat_id == $me_id) ? $sent['updates'][2]['message']['id'] : $sent['id'];
                    $x = str_split_unicode($p[1], 1);
                    foreach ($x as $n) {
                        yield $this->messages->editMessage(['peer' => $chat_id, 'id' => $sent_id, 'message' => $n]);
                        yield $this->sleep(1.7);
                    }
                    yield $this->messages->editMessage(['peer' => $chat_id, 'id' => $msg_id, 'message' => "Successfull."]);
                    yield $this->sleep(3);
                    if ($type == 'supergroup' or $type == 'channel') {
                        yield $this->channels->deleteMessages(['channel' => $chat_id, 'id' => [$msg_id, $sent_id]]);
                    } else {
                        yield $this->messages->deleteMessages(['revoke' => true, 'id' => [$msg_id, $sent_id]]);
                    }
                }

                if (preg_match('/^[\/\!\#\!\.]?mode (.*)$/', $txt, $zop)) {
                    if ($zop[1] == 'off') {
                        $DB['Fun']['ParseMode'] = ['Status' => 'off'];
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>EditMessages Now is off</b>",
                            'id'              => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    } else {
                        $modes = [
                            'bold',
                            'italic',
                            'underline',
                            'hashtag',
                            'strike',
                            'link',
                            'code',
                            'pre',
                            'translate',
                            'randomfont',
                            'spoiler'

                        ];
                        foreach ($modes as $new) {
                            if ($new == strtolower($zop[1])) {
                                $DB['Fun']['ParseMode'] = ['Mode' => strtolower($zop[1])];
                                yield $this->messages->editMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<b>$new mode now is on</b>",
                                    'id'              => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                                break;
                            }
                        }
                    }
                    $this->DB($DB);
                } elseif (preg_match('/^[\/\!\#\!\.]?modes$/', $txt)) {
                    $t = "**Modes for Edit Message** \n\n"
                        . align(
                            [
                                1  =>  'bold',
                                2  =>  'italic',
                                3  =>  'underline',
                                4  =>  'hashtag',
                                5  =>  'strike',
                                6  =>  'link',
                                7  =>  'code',
                                8  =>  'pre',
                                9  =>  'translate',
                                10 => 'randomfont',
                                11 => 'spoiler'
                            ],
                            '` ↬ (`',
                            '├ • `',
                            '`)'
                        );
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "$t",
                        'id'              => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif (preg_match('/^[\!\#\!\.]?enemies$/', $txt)) {
                    $kos = "**ENEMIES LIST ** \n\n";
                    unset($DB['enemies'][0]);
                    foreach ($DB['enemies'] as $new) {
                        @$kos .= "[$new](mention:$new)" . PHP_EOL;
                    }

                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "$kos",
                        'id'              => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                } elseif (preg_match('/^[\/\!\#\!\.]?cleanenemies$/', $txt)) {
                    $count = count($DB['enemies']) - 1;
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "<b> All $count Enemies Successfully Cleaned.</b>",
                        'id'              => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                    $DB['enemies'] = [0 => 1];
                    $this->DB($DB);
                }

                if (preg_match('/^[\/\!\#\!\.]?smonshi$/', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $media = isset($message['messages'][0]['media']) ? $message['messages'][0]['media'] : 'havent';
                        $message_text = $message['messages'][0]['message'];
                        if ($media != 'havent') {
                            $DB['Fun']['Monshi']['Media'] = ['Media' => $media, 'Text' => $message_text];
                            if (isset($DB['Fun']['Monshi']['Text'])) {
                                unset($DB['Fun']['Monshi']['Text']);
                            }
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => '**Monshi MediaMessage Successfully was set.**',
                                'id'         => $msg_id,
                                'parse_mode' => "markdown"
                            ]);
                        } else {
                            $DB['Fun']['Monshi']['Text'] = $message_text;
                            if (isset($DB['Fun']['Monshi']['Media'])) {
                                unset($DB['Fun']['Monshi']['Media']);
                            }
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => '**Monshi Message Successfully was set.**',
                                'id'         => $msg_id,
                                'parse_mode' => "markdown"
                            ]);
                        }
                        $this->DB($DB);
                    }
                } elseif (preg_match('/^[\/\!\#\!\.]?dmonshi/', $txt)) {
                    if (isset($DB['Fun']['Monshi'])) {
                        unset($DB['Fun']['Monshi']);
                        yield $this->messages->editMessage([
                            'peer'       => $chat_id,
                            'message'    => '`Monshi Message Successfully was deleted.`',
                            'id'         => $msg_id,
                            'parse_mode' => "markdown"
                        ]);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Erorr : You have not set a monshi message</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                    $this->DB($DB);
                }/*elseif (preg_match('/^[\/\!\#\!\.]?smonshi (.*)$/', $txt,$alio)) {
                    
                }*/
                if (preg_match('/^[\/\!\#\!\.]?swelcome$/', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $media = isset($message['messages'][0]['media']) ? $message['messages'][0]['media'] : 'havent';
                        $message_text = $message['messages'][0]['message'];
                        if ($media != 'havent') {
                            @$DB['Groups'][$chat_id]['JoinAnswer']['Media'] = ['Media' => $media, 'Text' => $message_text];
                            if (isset($DB['Groups'][$chat_id]['JoinAnswer']['Text'])) {
                                unset($DB['Groups'][$chat_id]['JoinAnswer']['Text']);
                            }
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => '*Welcome MediaAnswer Set for this group.*',
                                'id'         => $msg_id,
                                'parse_mode' => "markdown"
                            ]);
                            $this->DB($DB);
                        } else {
                            @$DB['Groups'][$chat_id]['JoinAnswer']['Text'] = $message_text;
                            if (isset($DB['Groups'][$chat_id]['JoinAnswer']['Media'])) {
                                unset($DB['Groups'][$chat_id]['JoinAnswer']['Media']);
                            }
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => '*Welcome Answer Set for this group.*',
                                'id'         => $msg_id,
                                'parse_mode' => "markdown"
                            ]);
                            $this->DB($DB);
                        }
                    }
                } elseif (preg_match('/[\/\!\#\!\.]?dwelcome/', $txt)) {
                    if (isset($DB['Groups'][$chat_id]['JoinAnswer'])) {
                        unset($DB['Groups'][$chat_id]['JoinAnswer']);
                        yield $this->messages->editMessage([
                            'peer'       => $chat_id,
                            'message'    => '`Welcome Note Now Is Off For This Group.`',
                            'id'         => $msg_id,
                            'parse_mode' => "markdown"
                        ]);
                        $this->DB($DB);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Erorr : You have not set a welcome message for this group</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                if (preg_match('~^change (.*) (.*) to (.*)~', $txt, $qir)) {
                    $sent = yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => "<pre>Wait ...</pre>",
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    $channel   = $qir[1];
                    $offset_id = 1;
                    $limit     = 100;
                    $fr        = false;
                    try {
                        do {
                            $get = yield $this->messages->getHistory([
                                'peer'        => $channel,
                                'offset_id'   => $offset_id,
                                'offset_date' => 0,
                                'add_offset'  => (!$fr) ? -1 * $limit : -1 * $limit - 1,
                                'limit'       => $limit,
                                'max_id'      => 0,
                                'min_id'      => 0,
                                'hash'        => 0
                            ]);
                            if (!$fr) $fr = true;
                            if (count($get['messages']) == 0) break;
                            foreach (array_reverse($get['messages']) as $message) {
                                if ($message['_'] === 'message') {
                                    if (preg_match("~$qir[2]~", $message['message'])) {
                                        $edit = str_replace($qir[2], $qir[3], $message['message']);
                                        yield $this->messages->editMessage([
                                            'peer'            => $channel,
                                            'message'         => "$edit",
                                            'id'              => $message['id']
                                        ]);
                                    }
                                }
                            }
                            $offset_id = $get['messages'][0]['id'];

                            yield $this->sleep(3);
                        } while (true);
                        $sent_id    = ($type == 'supergroup' || $type == 'channel') ? $sent['updates'][0]['id'] : $sent['id'];
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'message'         => "done",
                            'id'              => $sent_id
                        ]);
                    } catch (\Throwable $e) {
                        $error = $e->getMessage() . "\n";
                        yield $this->messages->sendMessage([
                            'peer'            => 'me',
                            'message'         => "<pre>$error</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('~^change2 (.*) to (.*)~', $txt, $qirr)) {
                    $sent = yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => "<pre>Wait ...</pre>",
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    $channel   = $qirr[1];
                    $offset_id = 1;
                    $limit     = 100;
                    $fr        = false;
                    try {
                        do {
                            $get = yield $this->messages->getHistory([
                                'peer'        => $channel,
                                'offset_id'   => $offset_id,
                                'offset_date' => 0,
                                'add_offset'  => (!$fr) ? -1 * $limit : -1 * $limit - 1,
                                'limit'       => $limit,
                                'max_id'      => 0,
                                'min_id'      => 0,
                                'hash'        => 0
                            ]);
                            if (!$fr) $fr = true;
                            if (count($get['messages']) == 0) break;
                            foreach (array_reverse($get['messages']) as $message) {
                                if ($message['_'] === 'message') {
                                    yield $this->messages->editMessage([
                                        'peer'            => $channel,
                                        'message'         => $qirr[2],
                                        'id'              => $message['id']
                                    ]);
                                }
                            }
                            $offset_id = $get['messages'][0]['id'];
                            yield $this->sleep(3);
                        } while (true);
                        $sent_id    = ($type == 'supergroup' || $type == 'channel') ? $sent['updates'][0]['id'] : $sent['id'];
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'message'         => "done",
                            'id'              => $sent_id
                        ]);
                    } catch (\Throwable $e) {
                        $error = $e->getMessage() . "\n";
                        yield $this->messages->sendMessage([
                            'peer'            => 'me',
                            'message'         => "<pre>$error</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }

                if (preg_match('/^[\/\!\#\!\.]?copych (.*)$/', $txt, $tyty)) {
                    if (isset($reply_to_msg_id)) {
                        $rp_channel_id = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['chats'][1]['id'];
                        $check = yield $this->CheckUserName($tyty[1]);
                        if ($check != 'used') {
                            try {
                                $createchannel = yield $this->channels->createChannel([
                                    'broadcast' => true,
                                    'title'     => 'SylixTeam',
                                    'about'     => 'This channel was copied by @Sylix_Team'
                                ]);
                                $channelID = "-100" . $createchannel['updates'][1]['channel_id'];
                            } catch (\throwable $e) {
                                $error = $e->getMessage() . "\n";
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<pre>$error</pre>",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            }
                            try {
                                yield $this->channels->updateUsername([
                                    'channel'  => $channelID,
                                    'username' => $tyty[1]
                                ]);
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<pre>Channel Created Please wait for copy.</pre>@$tyty[1]",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            } catch (\throwable $e) {
                                $error = $e->getMessage() . "\n";
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<pre>$error</pre>",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            }
                            $channel   = '-100' . $rp_channel_id;
                            $offset_id = 1;
                            $limit     = 100;
                            $fr        = false;
                            try {
                                do {
                                    $get = yield $this->messages->getHistory([
                                        'peer'        => $channel,
                                        'offset_id'   => $offset_id,
                                        'offset_date' => 0,
                                        'add_offset'  => (!$fr) ? -1 * $limit : -1 * $limit - 1,
                                        'limit'       => $limit,
                                        'max_id'      => 0,
                                        'min_id'      => 0,
                                        'hash'        => 0
                                    ]);
                                    if (!$fr) $fr = true;
                                    if (count($get['messages']) == 0) break;
                                    foreach (array_reverse($get['messages']) as $message) {
                                        if ($message['_'] === 'message') {
                                            $messageData = [
                                                'message'  => $message['message'] ?? '',
                                                'peer'     => $channelID,
                                                'entities' => $message['entities'] ?? [],
                                            ];
                                            if ($this->hasMedia($message, false)) {
                                                $messageData['media'] = $message;
                                                yield $this->messages->sendMedia($messageData);
                                            } else {
                                                yield $this->messages->sendMessage($messageData);
                                            }
                                        }
                                    }
                                    $offset_id = $get['messages'][0]['id'];

                                    sleep(5);
                                } while (true);
                            } catch (\Throwable $e) {
                                $error = $e->getMessage() . "\n";
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<pre>$error</pre>",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            }
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<pre>Username Already Used.</pre>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    }
                } elseif (preg_match('/^[\/\!\#\!\.]?copych (.*) (.*)/', $txt, $tytyy)) {
                    $check = yield $this->channels->checkUsername(['username' => $tytyy[1]]);
                    if ($check == true) {
                        $createchannel = yield $this->channels->createChannel(['broadcast' => true, 'title' => 'SylixTeam', 'about' => 'This channel was copied by @Sylix_Team']);
                        $channelID = $tytyy[2];
                        yield $this->channels->updateUsername(['channel' => $channelID, 'username' => $tytyy[1]]);
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Channel Created Please wait for copy.</pre>@$tytyy[1]",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                        $offset_id = 0;
                        $limit = 100;
                        do {
                            $get = yield $this->messages->getHistory([
                                'peer'        => $tytyy[2],
                                'offset_id'   => $offset_id,
                                'offset_date' => 0,
                                'add_offset'  => 0,
                                'limit'       => $limit,
                                'max_id'      => 0,
                                'min_id'      => 0,
                                'hash'        => 0
                            ]);
                            if (count($get['messages']) == 0) {
                                break;
                            }
                            foreach ($get['messages'] as $message) {
                                $messageData = [
                                    'message'  => $message['message'] ?? '',
                                    'peer'     => $channelID,
                                    'entities' => $message['entities'] ?? [],
                                ];
                                if ($this->hasMedia($message, false)) {
                                    $messageData['media'] = $message;
                                    yield $this->messages->sendMedia($messageData);
                                } else {
                                    yield $this->messages->sendMessage($messageData);
                                }
                            }
                            $offset_id = end($get['messages']['id']);
                            sleep(10);
                        } while (true);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Username Already Used.</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                if (preg_match('/^[\/\#\!]?(copy|کپی)$/si', $txt)) {
                    $response = yield $this->channels->getMessages([
                        'channel' => $chat_id,
                        'id'      => [$reply_to_msg_id],
                    ]);
                    $message = $response['messages'][0];
                    $messageData = [
                        'message'  => $message['message'] ?? '',
                        'peer'     => $chat_id,
                        'entities' => $message['entities'] ?? [],
                    ];
                    if ($this->hasMedia($message, false)) {
                        $messageData['media'] = $message;
                        yield $this->messages->sendMedia($messageData);
                    } else {
                        yield $this->messages->sendMessage($messageData);
                    }
                }
                if (preg_match('/^[\/\#\!]?(rupdate)$/si', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        writeFile('data/getMessage.txt', \json_encode($message, 128));
                        $media = ['_' => 'inputMediaUploadedDocument', 'file' => 'data/getMessage.txt', 'attributes' => [['_' => 'documentAttributeFilename', 'file_name' => 'enc.txt']]];
                        yield $this->messages->sendMedia([
                            'peer'            => $chat_id,
                            'reply_to_msg_id' => $reply_to_msg_id,
                            'media'           => $media,
                            'message'         => 'Encoded Info Of This File',
                            'parse_mode'      => 'html'
                        ]);
                    }
                }
                if (preg_match('/^[\/\#\!]?sname (.*)$/si', $txt, $zkq)) {
                    $DB['MyName'] = $zkq[1];
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "حله کصپدر",
                        'id'              => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    $this->DB($DB);
                }
                if (preg_match('/^[\/\#\!]?(getnumbers)$/si', $txt)) {
                    if ($type == 'chat' || $type == 'supergroup') {
                        $info = yield $this->getPwrChat($chat_id)['participants'];
                        $numbers = null;
                        for ($i = 0; $i <= count($info); $i++) {
                            $id      = $info[$i]['user']['id'];
                            @$name   = $info[$i]['user']['first_name'];
                            $phone   = isset($info[$i]['user']['phone']) ? $info[$i]['user']['phone'] : 'v';
                            if ($phone != 'v') {

                                @$numbers .= "[<a href='mention:$id'>$id</a>] -> $name : (<code>$phone</code>)<br />";
                                yield $this->messages->editMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "Numbers On This Group <br /><br />$numbers",
                                    'id'              => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            }
                        }
                    } else {
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>There Is Not A Group.</pre>",
                            'id'              => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                #SPAM MESSAGE OR MEDIA
                if (preg_match('/^[\.]?s (\d+?)$/si', $txt, $match)) {
                    $response = yield $this->channels->getMessages([
                        'channel' => $chat_id,
                        'id'      => [$reply_to_msg_id],
                    ]);
                    $message = $response['messages'][0];
                    $messageData = [
                        'message'  => $message['message'] ?? '',
                        'peer'     => $chat_id,
                        'entities' => $message['entities'] ?? [],
                    ];
                    for ($i = 1; $i <= $match[1]; $i++) {
                        if ($this->hasMedia($message, false)) {
                            $messageData['media'] = $message;
                            yield $this->messages->sendMedia($messageData);
                        } else {
                            yield $this->messages->sendMessage($messageData);
                        }
                    }
                }
                #ADD Fosh
                if (preg_match('/^[\#\!\.\/]?addfosh$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $media = isset($message['messages'][0]['media']) ? $message['messages'][0]['media'] : 'havent';
                        $message_text = $message['messages'][0]['message'];
                        if ($media == 'havent') {
                            $x = explode("\n", $message_text);
                            $kir = '';
                            if (count($x) > 1) {
                                yield $this->callFork((function () use ($x, $kir, $DB, $chat_id, $msg_id) {
                                    for ($i = 0; $i <= count($x); $i++) {
                                        array_push($DB['Fosh'], $x[$i]);
                                        @$kir .= $x[$i] . "\n";
                                        yield $this->messages->editMessage([
                                            'peer'            => $chat_id,
                                            'message'         => "<b>Words Add On DataBase</b><br /><pre>$kir</pre>",
                                            'id'              => $msg_id,
                                            'parse_mode'      => "HTML"
                                        ]);
                                        $this->DB($DB);
                                    }
                                })());
                            } else {
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "Succuessful i add this word {$message_text} in your database.",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                                array_push($DB['Fosh'], $message_text);
                                $this->DB($DB);
                            }
                        } else {
                            yield $this->messages->editMessage([
                                'peer'            => $chat_id,
                                'message'         => "<b>Please Wait...</b>",
                                'id'              => $msg_id,
                                'parse_mode'      => 'html'
                            ]);
                            yield $this->downloadToFile($media, 'fosh.txt');
                            $file  = yield $this->fileGetContents('fosh.txt');
                            $x     = explode("\n", $file);
                            $count = count($x);
                            yield $this->callFork((function () use ($x, $DB,$count,$msg_id,$chat_id) {
                                try {
                                    foreach ($x as $value) {
                                        yield $this->ArrayPush($DB['Fosh'])->send($value);
                                    }
                                    yield $this->messages->sendMessage([
                                        'peer'            => $chat_id,
                                        'message'         => "<b>Successfull ($count) Fosh Addeded.</b>",
                                        'reply_to_msg_id' => $msg_id,
                                        'parse_mode'      => "HTML"
                                    ]);
                                    yield \Amp\File\unlink('fosh.txt');
                                    $this->DB($DB);
                                } catch (\Exception $e) {
                                    // Handle by logging and stuff
                                }
                            })());
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Plaese Reply.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?addfosh (.*)$/i', $txt, $toop)) {
                    $message_text = $toop[1];
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => "Succuessful i add this word {$message_text} in your database.",
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    array_push($DB['Fosh'], $message_text);
                    $this->DB($DB);
                } elseif (preg_match('/^[\#\!\.\/]?delfosh$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $media = isset($message['messages'][0]['media']) ? $message['messages'][0]['media'] : 'havent';
                        $message_text = $message['messages'][0]['message'];
                        $x = explode("\n", $message_text);
                        $b = '';
                        if (count($x) > 1) {
                            for ($i = 0; $i <= count($x); $i++) {
                                $search = array_search($x[$i], $DB['Fosh']);
                                $word = $DB['Fosh'][$search];
                                $b .= $word . "\n";
                                if ($search != 0) {
                                    unset($DB['Fosh'][$search]);
                                    yield $this->messages->editMessage([
                                        'peer'            => $chat_id,
                                        'message'         => "<b>Words were removed from the Database</b><br /><pre>$b</pre>",
                                        'id'              => $msg_id,
                                        'parse_mode'      => "HTML"
                                    ]);
                                    $this->DB($DB);
                                } else {
                                    yield $this->messages->editMessage([
                                        'peer'            => $chat_id,
                                        'message'         => "<pre>Error :</pre> <b>i Cant Found Your Word.</b>",
                                        'id'              => $msg_id,
                                        'parse_mode'      => "HTML"
                                    ]);
                                }
                            }
                        } else {
                            $search = array_search($message_text, $DB['Fosh']);
                            $word = $DB['Fosh'][$search];
                            if (isset($word) && $search != 0) {
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<b>Fosh -> (<pre>$word</pre>) Successfully Deleted.</b>",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                                unset($DB['Fosh'][$search]);
                                $this->DB($DB);
                            } else {
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<b>Error : i Cant Found Your Word.</b>",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            }
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Plaese Reply.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?delfosh (.*)$/i', $txt, $poop)) {
                    $message_text = $poop[1];
                    $search = array_search($message_text, $DB['Fosh']);
                    $word = $DB['Fosh'][$search];
                    if (isset($word) && $search != 0) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Fosh -> ($word) Successfully Deleted.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                        unset($DB['Fosh'][$search]);
                        $this->DB($DB);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Error : i Cant Found Your Word.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?addemoji$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $message_text = $message['messages'][0]['message'];
                        if (isset($message_text)) {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "Succuessful i add this Emoji {$message_text} in your database.",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                            array_push($DB['Emoji'], $message_text);
                            $this->DB($DB);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Plaese Reply.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?addemoji (.*)$/i', $txt, $roop)) {
                    $message_text = $roop[1];
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => "<b>Succuessful i add this Emoji {$message_text} in your database.</b>",
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    array_push($DB['Emoji'], $message_text);
                    $this->DB($DB);
                } elseif (preg_match('/^[\#\!\.\/]?delemoji$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $message_text = $message['messages'][0]['message'];
                        $search = array_search($message_text, $DB['Emoji']);
                        $word = $DB['Emoji'][$search];
                        if (isset($word) && $search != 0) {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<b>Emoji -> ($word) Successfully Deleted.</b>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                            unset($DB['Emoji'][$search]);
                            $this->DB($DB);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<b>Error : i Cant Found Your Emoji.</b>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Plaese Reply.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?delemoji (.*)$/i', $txt, $boop)) {
                    $message_text = $boop[1];
                    $search = array_search($message_text, $DB['Emoji']);
                    $word = $DB['Emoji'][$search];
                    if (isset($word) && $search != 0) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Emoji -> ($word) Successfully Deleted.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                        unset($DB['Emoji'][$search]);
                        $this->DB($DB);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>Error : i Cant Found Your Emoji.</b>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                if (preg_match('/^[\#\!\.\/]?fcount$/i', $txt)) {
                    $fosh = count($DB['Fosh']);
                    $emoji = count($DB['Emoji']);
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => "<b>Fosh -> ($fosh)\nEmoji -> ($emoji)</b>",
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                }

                #SET ADMIN FOR SELF
                if (preg_match('/^[\#\!\.\/]?(asa)$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($user_id == $me_id) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            if (!in_array($rpfi, $DB['SelfAdmins'])) {
                                array_push($DB['SelfAdmins'], $rpfi);
                                $alert = "<b>This User (</b><a href='mention:$rpfi'>$rpfn</a>)<b> Now Is Your Self Admin </b>";
                                yield $this->messages->editMessage([
                                    'peer'       => $chat_id,
                                    'message'    => $alert,
                                    'id'         => $msg_id,
                                    'parse_mode' => "HTML"
                                ]);
                                $this->DB($DB);
                            } else {
                                $alert = "<b>This User (</b><a href='mention:$rpfi'>$rpfn</a>)<b> is already an self admin </b>";
                                yield $this->messages->editMessage([
                                    'peer'       => $chat_id,
                                    'message'    => $alert,
                                    'id'         => $msg_id,
                                    'parse_mode' => "HTML"
                                ]);
                            }
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<pre>Only Main Admin Can Use This Command.</pre>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Please Reply.</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?asa (\@.*|\d*)$/si', $txt, $ccc)) {
                    if ($user_id == $me_id) {
                        $get  = yield $this->getInfo($ccc[1])['User'];
                        $id   = $get['id'];
                        $name = $get['first_name'];
                        if (!in_array($id, $DB['SelfAdmins'])) {
                            array_push($DB['SelfAdmins'], $id);
                            $alert = "<b>This User (</b><a href='mention:$id'>$name</a>)<b> Now Is Your Self Admin </b>";
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => $alert,
                                'id'         => $msg_id,
                                'parse_mode' => "HTML"
                            ]);
                            $this->DB($DB);
                        } else {
                            $alert = "<b>This User (</b><a href='mention:$id'>$name</a>)<b> is already an self admin </b>";
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => $alert,
                                'id'         => $msg_id,
                                'parse_mode' => "HTML"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Only Main Admin Can Use This Command.</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                if (preg_match('/^[\#\!\.\/]?(dsa)$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($user_id == $me_id) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];

                            if (!in_array($rpfi, $DB['SelfAdmins'])) {
                                $alert = "<b>This User (</b><a href='mention:$rpfi'>$rpfn</a>)<b> has not been your self admin</b>";
                                yield $this->messages->editMessage([
                                    'peer'       => $chat_id,
                                    'message'    => $alert,
                                    'id'         => $msg_id,
                                    'parse_mode' => "HTML"
                                ]);
                            } else {
                                $alert = "<b>This User (</b><a href='mention:$rpfi'>$rpfn</a>)<b> Now Isn't Your Self Admin </b>";
                                yield $this->messages->editMessage([
                                    'peer'       => $chat_id,
                                    'message'    => $alert,
                                    'id'         => $msg_id,
                                    'parse_mode' => "HTML"
                                ]);
                                $search = array_search($rpfi, $DB['SelfAdmins']);
                                unset($DB['SelfAdmins'][$search]);
                                $this->DB($DB);
                            }
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<pre>Only Main Admin Can Use This Command.</pre>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Please Reply.</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?dsa (\@.*|\d*)$/si', $txt, $cccc)) {
                    if ($user_id == $me_id) {
                        $get  = yield $this->getInfo($cccc[1])['User'];
                        $id   = $get['id'];
                        $name = $get['first_name'];
                        if (!in_array($id, $DB['SelfAdmins'])) {
                            $alert = "<b>This User (</b><a href='mention:$id'>$name</a>)<b> has not been your self admin</b>";
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => $alert,
                                'id'         => $msg_id,
                                'parse_mode' => "HTML"
                            ]);
                        } else {
                            $alert = "<b>This User (</b><a href='mention:$id'>$name</a>)<b> Now Isn't Your Self Admin </b>";
                            yield $this->messages->editMessage([
                                'peer'       => $chat_id,
                                'message'    => $alert,
                                'id'         => $msg_id,
                                'parse_mode' => "HTML"
                            ]);
                            $search = array_search($id, $DB['SelfAdmins']);
                            unset($DB['SelfAdmins'][$search]);
                            $this->DB($DB);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Only Main Admin Can Use This Command.</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                #BAN & UNBAN MEMBER WITH REPLAY TO MESSAGE |ADMIN REQUIRE|
                if (preg_match('/^[\#\!\.\/]?(left|ban|بن|لفت)$/i', $txt)) {
                    if ($type != 'user' && $type != 'bot') {
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            $ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
                            yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $ChatBannedRights]);
                            $alert = "<b>This user </b><a href='mention:$rpfi'>$rpfn</a><b> left the group :|</b>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $alert,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => '<b>Please Reply.</b>',
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '<b>Just Groups Can Use This Method.</b>',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?(unban|لفت نده|حذف بن)$/i', $txt)) {
                    if ($type != 'user' && $type != 'bot') {
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            $ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => false, 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => false, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
                            yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $ChatBannedRights]);
                            $alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Unbaned.</b>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $alert,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => '<b>Please Reply.</b>',
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '<b>Just Groups Can Use This Method.</b>',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                #BAN & UNBAN MEMBERS WITH USERNAME |ADMIN REQUIRE|
                elseif (preg_match('/^[\#\!\.\/]?(left|ban|بن|لفت) (\@.*|\d*)$/i', $txt, $arraye)) {
                    if ($type != 'user' && $type != 'bot') {
                        $g = yield $this->getInfo($arraye[2]);
                        $i = $g['User']['id'];
                        $n = $g['User']['first_name'];
                        $h = "<b>This User </b><a href='mention:$i'>$n</a>\n<b> left the Group.</b>";
                        $ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
                        yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $ChatBannedRights]);
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $h,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '<b>Just Groups Can Use This Method.</b>',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?(unban|لفت نده|حذف بن) (\@.*|\d*)$/i', $txt, $array)) {
                    if ($type != 'user' && $type != 'bot') {
                        $g = yield $this->getInfo($array[2]);
                        $i = $g['User']['id'];
                        $n = $g['User']['first_name'];
                        $ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => false, 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => false, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
                        yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $ChatBannedRights]);
                        $alert = "<b>This User </b><a href='mention:$i'>$n</a><b> Unbaned.</b>";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $alert,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '<b>Just Groups Can Use This Method.</b>',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }

                if (preg_match('/^[\#\!\.\/]?(mute2)$/i', $txt)) {
                    if ($type != 'user' && $type != 'bot') {
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            $alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully Muted V:2.0.0</b>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $alert,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                            array_push($DB['Mutes'], $rpfi);
                            $this->DB($DB);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => '<b>Please Reply.</b>',
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    }
                } elseif (preg_match('/^[\#\!\.\/]?(umute2)$/i', $txt)) {
                    if ($type != 'user' && $type != 'bot') {
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            $s = array_search($rpfi, $DB['Mutes']);
                            $s = ($s == false) ? 'no' : $s;
                            if ($s != 'no') {
                                $alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully UnMuted V:2.0.0</b>";
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => $alert,
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                                unset($DB['Mutes'][$s]);
                                $this->DB($DB);
                            } else {
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => '<b>Can\'t find this user ...</b>',
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "HTML"
                                ]);
                            }
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => '<b>Please Reply.</b>',
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    }
                } elseif (preg_match('/^[\#\!\.\/]?(cmute2)$/i', $txt)) {
                    $count = count($DB['Mutes']) - 1;
                    if ($count != 0) {
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b> All $count Mutes Successfully Cleaned.</b>",
                            'id'              => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                        $DB['Mutes'] = [0 => 1];
                        $this->DB($DB);
                    } else {
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'message'         => "<b>MuteList Is Empty :/</b>",
                            'id'              => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?(mutes2)$/i', $txt)) {
                    $kos = "**MUTE2 LIST ** \n\n";
                    unset($DB['Mutes'][0]);
                    foreach ($DB['Mutes'] as $new) {
                        @$kos .= "[$new](mention:$new)" . PHP_EOL;
                    }
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "$kos",
                        'id'              => $msg_id,
                        'parse_mode'      => "markdown"
                    ]);
                }

                #MUTE USER IN GROUP WITH REPLY
                if (preg_match('/^[\#\!\.\/]?(mute|سکوت)$/i', $txt)) {
                    if ($type != 'user' && $type != 'bot') {
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            $mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
                            yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $mute]);
                            $alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully Muted in This Group.</b>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $alert,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => '<b>Please Reply.</b>',
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    }
                    #MUTE MEMBER WITH USERID & USERNAME
                } elseif (preg_match('/^[\#\!\.\/]?(mute|سکوت) (\@.*|\d*)$/i', $txt, $geet)) {
                    if ($type != 'user' && $type != 'bot') {
                        $g = yield $this->getInfo($geet[2]);
                        $i = $g['User']['id'];
                        $n = $g['User']['first_name'];
                        $mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
                        yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $mute]);
                        $alert = "<b>This User </b><a href='mention:$i'>$n</a><b> Successfully Muted in This Group.</b>";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $alert,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                #UNMUTE USER WITH REPLY 
                elseif (preg_match('/^[\#\!\.\/]?(unmute|حذف سکوت)$/i', $txt)) {
                    if ($type != 'user' && $type != 'bot') {
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            } else {
                                $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                            }
                            $rpfi = $rpf['id'];
                            $rpfn = $rpf['first_name'];
                            $unmute = ['_' => 'chatBannedRights', 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => true, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => false, 'pin_messages' => true, 'until_date' => 99999];
                            yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $unmute]);
                            $alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully UnMuted in This Group.</b>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $alert,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => '<b>Please Reply.</b>',
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    }
                }
                #UNMUTE MEMBER WITH USERID OR USERNAME
                elseif (preg_match('/^[\#\!\.\/]?(unmute|حذف سکوت) (\@.*|\d*)$/i', $txt, $eet)) {
                    if ($type != 'user' && $type != 'bot') {
                        $g = yield $this->getInfo($eet[2]);
                        $i = $g['User']['id'];
                        $n = $g['User']['first_name'];
                        $unmute = ['_' => 'chatBannedRights', 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => true, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => false, 'pin_messages' => true, 'until_date' => 99999];
                        yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $unmute]);
                        $alert = "<b>This User </b><a href='mention:$i'>$n</a><b> Successfully UnMuted in This Group.</b>";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $alert,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }

                if (preg_match('/^[\#\!\.\/]?sac (.*)$/i', $txt, $pq)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        } else {
                            $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        }
                        $rpfi = $rpf['id'];
                        $rpfn = $rpf['first_name'];
                        $actions = [
                            'typing'        => ['_' => 'sendMessageTypingAction'],
                            'recordvideo'   => ['_' => 'sendMessageRecordVideoAction'],
                            'uploadvideo'   => ['_' => 'sendMessageUploadVideoAction', 'progress' => 10],
                            'recordaudio'   => ['_' => 'sendMessageRecordAudioAction'],
                            'uploadaudio'   => ['_' => 'sendMessageUploadAudioAction', 'progress' => 10],
                            'uploadphoto'   => ['_' => 'sendMessageUploadPhotoAction', 'progress' => 10],
                            'gameplay'      => ['_' => 'sendMessageGamePlayAction'],
                            'sendsticker'   => ['_' => 'sendMessageChooseStickerAction'],
                            'geolocation'   => ['_' => 'sendMessageGeoLocationAction'],
                            'choosecontact' => ['_' => 'sendMessageChooseContactAction'],
                            'speacking'     => ['_' => 'speakingInGroupCallAction'],
                        ];
                        $key = strtolower($pq[1]);
                        if (isset($actions[$key])) {
                            $i = 1;
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<b>Now Im Send $pq[1] Action For This user </b><a href='mention:$rpfi'>$rpfn</a>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                            do {
                                yield $this->messages->setTyping(['peer' => $rpfi, 'top_msg_id' => $reply_to_top_msg_id, 'action' => $actions[$key]]);
                                $i++;
                            } while ($i <= 2000);
                            $h = "<b>$pq[1] Action Successfully Sent for this user </b><a href='mention:$rpfi'>$rpfn</a>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $h,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        } else {
                            $h = "<b>I Cant Find This Action !!!</b>";
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $h,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "HTML"
                            ]);
                        }
                    } else {
                        $h = "<b>Reply !!!</b>";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $h,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    }
                }
                if (preg_match('/^[\#\!\.\/]?saction (.*)$/i', $txt, $pq)) {
                }
                if (preg_match('/^[\#\!\.\/]?foshlimit (.*)$/i', $txt, $bbb)) {
                    $h = "<b>Spam time was set to $bbb[1] seconds \nA message will be sent every $bbb[1] seconds</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['foshlimit'] = $bbb[1];
                    $this->DB($DB);
                }

                if (preg_match('/^[\#\!\.\/]?floodlimit (.*)$/i', $txt, $vvv)) {
                    $h = "<b>Flood Limit Was Set to $vvv[1]</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['flood_limit'] = $vvv[1];
                    $this->DB($DB);
                }

                if (preg_match('/^[\#\!\.\/]?antipv (.*)$/i', $txt, $zaza)) {
                    $h = "<b>Anti PV Now Is $zaza[1]</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['antipv'] = $zaza[1];
                    $this->DB($DB);
                }

                if (preg_match('/^[\#\!\.\/]?antiflood (.*)$/i', $txt, $tata)) {
                    $h = "<b>Anti Flood Now Is $tata[1] For This Group</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['antiflood'][$chat_id] = $tata[1];
                    $this->DB($DB);
                }

                if (preg_match('/^[\#\!\.\/]?protection (\w*)$/i', $txt, $vv)) {
                    $h = "<b>protection mode now is $vv[1]</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['protection'] = $vv[1];
                    $this->DB($DB);
                }

                #insert user into white list 
                if (preg_match('/^[\#\!\.\/]?free$/i', $txt)) {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $r = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                    } else {
                        $r = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                    }
                    $id = $r['id'];
                    $n  = $r['first_name'];
                    $h = "<b>OK This User </b><a href='mention:$id'>$n</a>\n<b> Now Can Send Message For You.</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['spam'][$id] = 'free';
                    $this->DB($DB);
                } elseif (preg_match('/^[\#\!\.\/]?free (\@\w*)$/i', $txt, $zzz)) {
                    $g = yield $this->getInfo($zzz[1]);
                    $i = $g['User']['id'];
                    $n = $g['User']['first_name'];
                    $h = "<b>OK This User </b><a href='mention:$i'>$n</a>\n<b> Now Can Send Message For You.</b>";

                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['spam'][$i] = 'free';
                    $this->DB($DB);
                } elseif (preg_match('/^[\#\!\.\/]?free (\d*)$/i', $txt, $zzzz)) {
                    $g = yield $this->getInfo($zzzz[1]);
                    $i = $g['User']['id'];
                    $n = $g['User']['first_name'];
                    $h = "<b>OK This User </b><a href='mention:$i'>$n</a>\n<b> Now Can Send Message For You.</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['spam'][$i] = 'free';
                    $this->DB($DB);
                }
                if (preg_match('/^[\#\!\.\/]?unfree$/i', $txt)) {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $r = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                    } else {
                        $r = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                    }
                    $id = $r['id'];
                    $n  = $r['first_name'];
                    $h = "<b>OK Sylix protection Enabled for this User </b><a href='mention:$id'>$n</a>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['spam'][$id] = 1;
                    $this->DB($DB);
                }
                #Set Spam Limit
                if (preg_match('/^[\#\!\.\/]?sl (\d*?)$/i', $txt, $l)) {
                    $h = "<b>Spam limit was set to $l[1]</b>";
                    yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                    @$DB['spam']['limit'] = $l[1];
                    $this->DB($DB);
                }

                if (preg_match('/^[\#\!\.\/]?seeanswer (.*)$/i', $txt, $azz)) {
                    $h = \json_encode(@$DB['answers'][$azz[1]], 128);
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                }
                if (preg_match('/^[\#\!\.\/]?font (.*)$/i', $txt, $lll)) {
                    $n  = '<b>Fonts</b><br />';
                    for ($i = 0; $i <= count($font); $i++) {
                        $result = str_replace($texts, $font[$i], strtolower($lll[1]));
                        $n .= '<code>' . $result . '</code><br />';
                        yield $this->messages->editMessage([
                            'peer'       => $chat_id,
                            'message'    => $n,
                            'id'         => $msg_id,
                            'parse_mode' => "HTML"
                        ]);
                    }
                }


                #Set Answer 
                if (preg_match('/^[\#\!\.\/]?sanswer (.*) (.*)$/i', $txt, $lll)) {
                    $h = "<b>Text : $lll[1] \n Answer : $lll[2] \n was set.</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    @$DB['answers'][$lll[1]] = ['text' => $lll[1], 'answer' => $lll[2]];
                    $this->DB($DB);
                } elseif (preg_match('/^[\#\!\.\/]?danswer (.*)$/i', $txt, $ooo)) {
                    $h = "<b>Answer : " . @$DB['answers'][$ooo[1]]['answer'] . "\n\nText : " . @$DB['answers'][$ooo[1]]['text'] . " \n\nSuccessfuly Deleted.</b>";
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $h,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                    unset($DB['answers'][$ooo[1]]);
                    $this->DB($DB);
                } elseif (preg_match('/^[\#\!\.]?answers$/i', $txt)) {
                    $res = \json_encode($DB['answers'], 128 | JSON_UNESCAPED_UNICODE);
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $res,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => "HTML"
                    ]);
                }
                if (preg_match('/^[\#\!\.\/]?setanswer (.*)$/i', $txt, $lx)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $reply = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        } else {
                            $reply = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        }
                        $ID   = $reply['id'];
                        $name = $reply['first_name'];
                        $res = "<b>Answer : $lx[1] Succuessfuly set for </b><a href='mention:$ID'>$name</a>";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $res,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                        @$DB['answers'][$ID] = $lx[1];
                        $this->DB($DB);
                    }
                }
                if (preg_match('/^[\#\!\.\/]?delanswer$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $n = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        } else {
                            $n = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        }
                        $O   = $n['id'];
                        $na = $n['first_name'];
                        $ch = isset($DB['answers'][$O]) ? $DB['answers'][$O] : null;
                        if ($ch != null) {
                            $ress = "<b>Answer : " . $DB['answers'][$O] . " Succuessfuly deleted for </b><a href='mention:$O'>$na</a>";
                        } else {
                            $ress = "<b>This user </b><a href='mention:$O'>$na</a><b> has no answer in the database to delete</b>";
                        }
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $ress,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                        unset($DB['answers'][$O]);
                        $this->DB($DB);
                    }
                }


                #Enemies Part 1 
                #SETENEMY 
                if (preg_match('/^[\#\!\.\/]?senemy$/i', $txt, $n)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $reply = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        } else {
                            $reply = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        }
                        $ID   = $reply['id'];
                        $name = $reply['first_name'];
                        //yield $this->contacts->block(['id' => $ID]);
                        $h = "<b>Successfull. \n This User </b><a href='mention:$ID'>[$name]</a>\n<b> from now Is your Enemy.</b>";
                        if (!in_array($ID, $DB['enemies'])) {
                            yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                            array_push($DB['enemies'], $ID);
                            $this->DB($DB);
                        } else {
                            $h .= "<b>\n Note : This User Already was your Enemy.</b>";
                            yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                        }
                    }
                } elseif (preg_match('/^[\#\!\.\/]?senemy (\@.*|\d*)$/si', $txt, $m)) {
                    $GETFULLINFO = yield $this->getFullInfo($m[1]);
                    $FULL              = $GETFULLINFO['full'];
                    $n                 = $FULL['user']['first_name'];
                    $i                 = $FULL['user']['id'];
                    //yield $this->contacts->block(['id' => $m[1]]);
                    $h = "<b>Successfull. \n This User </b><a href='mention:$i'>[$n]</a>\n<b> from now Is your Enemy.</b>";
                    if (!in_array($i, $DB['enemies'])) {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                        array_push($DB['enemies'], $i);
                        $this->DB($DB);
                    } else {
                        $h .= "<b>\n Note : This User Already was your Enemy.</b>";
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                    }
                }
                if (preg_match('/^[\#\!\.\/]?denemy$/i', $txt, $n)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $reply = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        } else {
                            $reply = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0];
                        }
                        $ID   = $reply['id'];
                        $name = $reply['first_name'];
                        //yield $this->contacts->unblock(['id' => $ID]);
                        $h = "<b>Successfull. \n This User </b><a href='mention:$ID'>[$name]</a>\n<b> from now Isn't your Enemy.</b>";
                        if (!in_array($ID, $DB['enemies'])) {
                            yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "<b>This user has not been your enemy.</b>", 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                        } else {
                            yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                            $search = array_search($ID, $DB['enemies']);
                            unset($DB['enemies'][$search]);
                            $this->DB($DB);
                        }
                    }
                } elseif (preg_match('/^[\#\!\.\/]?denemy (\@.*|\d*)$/si', $txt, $z)) {
                    $GETFULLINFO = yield $this->getFullInfo($z[1]);
                    $FULL              = $GETFULLINFO['full'];
                    $n                 = $FULL['user']['first_name'];
                    $i                 = $FULL['user']['id'];
                    //yield $this->contacts->unblock(['id' => $z[1]]);
                    $h = "<b>Successfull. \n This User </b><a href='mention:$i'>[$n]</a>\n<b> from now Isn't your Enemy.</b>";
                    if (!in_array($i, $DB['enemies'])) {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "<b>This user has not been your enemy.</b>", 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $h, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                        $search = array_search($i, $DB['enemies']);
                        unset($DB['enemies'][$search]);
                        $this->DB($DB);
                    }
                }

                if (preg_match('/^[\#\!\.\/]?check (.*)$/i', $txt, $tx)) {
                    $result = yield $this->CheckUserName($tx[1]);
                    yield $this->messages->sendMessage([
                        'peer'       => $chat_id,
                        'message'    => "<pre>$result</pre>",
                        'parse_mode' => "markdown"
                    ]);
                }
                #Random Time bio name
                if (preg_match('/^[\#\!\.\/]?random (.*) (.*)$/i', $txt, $t)) {
                    $mode   = $t[1];
                    $status = $t[2];
                    $date   = datefont(date('H:i', time() + 55));
                    $mn = $DB['MyName'] ?? 'SylixDeveloper';
                    $name = font($mn);
                    $bio    = file_get_contents('data/bio.txt');
                    $bio   .= ' ' . $date;
                    switch ($mode) {
                        case 'status':
                            if ($status == 'on') {
                                $DB['Fun']['RandomNameBioTime']['status'] = $status;
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "Random Mode Now Is $status",
                                    'parse_mode' => "markdown"
                                ]);

                                if ($DB['Fun']['RandomNameBioTime']['time'] == 'on') {
                                    yield $this->account->updateProfile(
                                        [
                                            'last_name' => $date
                                        ]
                                    );
                                } elseif ($DB['Fun']['RandomNameBioTime']['name'] == 'on') {
                                    yield $this->account->updateProfile(
                                        [
                                            'first_name' => $name
                                        ]
                                    );
                                } elseif ($DB['Fun']['RandomNameBioTime']['bio'] == 'on') {
                                    yield $this->account->updateProfile(
                                        [
                                            'about' => $bio
                                        ]

                                    );
                                } elseif ($DB['Fun']['RandomNameBioTime']['hybrid'] == 'on') {
                                    yield $this->account->updateProfile(
                                        [
                                            'first_name' => $name,
                                            'last_name'  => $date,
                                            'about'      => $bio
                                        ]
                                    );
                                }
                            }
                            if ($status == 'off') {
                                $DB['Fun']['RandomNameBioTime']['status'] = $status;
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "Random Mode Now Is $status",
                                    'parse_mode' => "markdown"
                                ]);
                                yield $this->account->updateProfile(
                                    [
                                        'first_name' => file_get_contents('data/name.txt'),
                                        'about'      => file_get_contents('data/bio.txt'),
                                        'last_name'  => '',
                                    ]
                                );
                            }
                            break;
                        case 'time':
                            if ($status == 'on') {
                                $DB['Fun']['RandomNameBioTime']['status']  = $status;
                                $DB['Fun']['RandomNameBioTime']['time']   = $status;
                                $DB['Fun']['RandomNameBioTime']['bio']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['name']   = 'off';
                                $DB['Fun']['RandomNameBioTime']['hybrid'] = 'off';
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "Time Mode Now Is $status",
                                    'parse_mode' => "markdown"
                                ]);
                                yield $this->account->updateProfile(
                                    [
                                        'last_name' => $date
                                    ]
                                );
                            }

                            break;
                        case 'bio':
                            if ($status == 'on') {
                                $DB['Fun']['RandomNameBioTime']['status']  = $status;
                                $DB['Fun']['RandomNameBioTime']['bio']     = $status;
                                $DB['Fun']['RandomNameBioTime']['time']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['name']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['hybrid']  = 'off';
                                $DB['Fun']['RandomNameBioTime']['randbio'] = 'off';
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "Bio Mode Now Is $status",
                                    'parse_mode' => "markdown",
                                ]);

                                yield $this->account->updateProfile(
                                    [
                                        'about' => $bio
                                    ]

                                );
                            }

                            break;
                        case 'randbio':
                            $DB['Fun']['RandomNameBioTime']['status']  = $status;
                            $DB['Fun']['RandomNameBioTime']['randbio'] = $status;
                            $DB['Fun']['RandomNameBioTime']['time']    = 'off';
                            $DB['Fun']['RandomNameBioTime']['name']    = 'off';
                            $DB['Fun']['RandomNameBioTime']['hybrid']  = 'off';
                            $DB['Fun']['RandomNameBioTime']['bio']     = 'off';
                            yield $this->messages->sendMessage([
                                'peer'       => $chat_id,
                                'message'    => "Random Bio Mode Now Is $status",
                                'parse_mode' => "markdown",
                            ]);
                            break;
                        case 'name':
                            if ($status == 'on') {
                                $DB['Fun']['RandomNameBioTime']['status']  = $status;
                                $DB['Fun']['RandomNameBioTime']['name']   = $status;
                                $DB['Fun']['RandomNameBioTime']['bio']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['time']   = 'off';
                                $DB['Fun']['RandomNameBioTime']['hybrid'] = 'off';
                                $DB['Fun']['RandomNameBioTime']['randbio'] = 'off';
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "Random Font Name Mode Now Is $status",
                                    'parse_mode' => "markdown",
                                ]);
                                yield $this->account->updateProfile(
                                    [
                                        'first_name' => $name
                                    ]
                                );
                            }
                            break;
                        case 'hybrid':
                            if ($status == 'on') {

                                $DB['Fun']['RandomNameBioTime']['status']  = $status;
                                $DB['Fun']['RandomNameBioTime']['hybrid']  = $status;
                                $DB['Fun']['RandomNameBioTime']['bio']     = 'off';
                                $DB['Fun']['RandomNameBioTime']['name']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['time']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['randbio'] = 'off';
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "hybrid Mode Now Is $status",
                                    'parse_mode' => "markdown",
                                ]);
                                yield $this->account->updateProfile(
                                    [
                                        'first_name' => $name,
                                        'last_name'  => $date,
                                        'about'      => $bio
                                    ]
                                );
                            }
                            if ($status == 'off') {

                                $DB['Fun']['RandomNameBioTime']['hybrid']  = $status;
                                $DB['Fun']['RandomNameBioTime']['bio']     = 'off';
                                $DB['Fun']['RandomNameBioTime']['name']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['time']    = 'off';
                                $DB['Fun']['RandomNameBioTime']['randbio'] = 'off';
                                yield $this->messages->sendMessage([
                                    'peer'       => $chat_id,
                                    'message'    => "hybrid Mode Now Is $status",
                                    'parse_mode' => "markdown",
                                ]);
                                yield $this->account->updateProfile(
                                    [
                                        'first_name' => file_get_contents('data/name.txt'),
                                        'about'      => file_get_contents('data/bio.txt'),
                                        'last_name'  => '',
                                    ]
                                );
                            }
                            break;
                    }
                    $this->DB($DB);
                }
                #Get Groups
                if (preg_match('/^[\#\!\.\/]?getgroups$/i', $txt, $t)) {
                    if (isset($reply_to_msg_id)) {
                        if (file_exists('data/chat_id.txt')) {
                            unlink('data/chat_id.txt');
                        }
                        if (file_exists('data/msg_id.txt')) {
                            unlink('data/msg_id.txt');
                        }
                        if (file_exists('data/user_id.txt')) {
                            unlink('data/user_id.txt');
                        }
                        if ($type == 'channel' || $type == 'supergroup') {
                            $ID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        } else {
                            $ID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        }
                        file_put_contents('data/chat_id.txt', $chat_id);
                        file_put_contents('data/msg_id.txt', $msg_id);
                        file_put_contents('data/user_id.txt', $user_id);
                        $bot = '@tgscanrobot';
                        yield $this->messages->sendMessage([
                            'peer'       => $bot,
                            'message'    => "$ID",
                            'parse_mode' => "markdown"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?getgroups (\@.*|\d*)$/si', $txt, $x)) {
                    if (file_exists('data/chat_id.txt')) {
                        unlink('data/chat_id.txt');
                    }
                    if (file_exists('data/msg_id.txt')) {
                        unlink('data/msg_id.txt');
                    }
                    if (file_exists('data/user_id.txt')) {
                        unlink('data/user_id.txt');
                    }
                    file_put_contents('data/chat_id.txt', $chat_id);
                    file_put_contents('data/msg_id.txt', $msg_id);
                    file_put_contents('data/user_id.txt', $user_id);
                    $bot = '@tgscanrobot';
                    yield $this->messages->sendMessage([
                        'peer'       => $bot,
                        'message'    => "$x[1]",
                        'parse_mode' => "markdown"
                    ]);
                }
                #Number Finder 
                if (preg_match('/^[\#\!\.\/]?num$/i', $txt, $t)) {
                    if (isset($reply_to_msg_id)) {
                        if (file_exists('data/chat_id.txt')) {
                            unlink('data/chat_id.txt');
                        }
                        if (file_exists('data/msg_id.txt')) {
                            unlink('data/msg_id.txt');
                        }
                        if (file_exists('data/user_id.txt')) {
                            unlink('data/user_id.txt');
                        }
                        if ($type == 'channel' || $type == 'supergroup') {
                            $ID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        } else {
                            $ID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        }
                        file_put_contents('data/chat_id.txt', $chat_id);
                        file_put_contents('data/msg_id.txt', $msg_id);
                        file_put_contents('data/user_id.txt', $user_id);
                        $bot = '@NumberCityRoBot';
                        yield $this->messages->sendMessage([
                            'peer'       => $bot,
                            'message'    => "🔍 جستوجوی شماره 🔎",
                            'parse_mode' => "markdown"
                        ]);
                        yield sleep(0.4);
                        yield $this->messages->sendMessage([
                            'peer'       => $bot,
                            'message'    => "$ID",
                            'parse_mode' => "markdown"
                        ]);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?num (\@.*|\d*)$/si', $txt, $x)) {
                    if (file_exists('data/chat_id.txt')) {
                        unlink('data/chat_id.txt');
                    }
                    if (file_exists('data/msg_id.txt')) {
                        unlink('data/msg_id.txt');
                    }
                    if (file_exists('data/user_id.txt')) {
                        unlink('data/user_id.txt');
                    }
                    file_put_contents('data/chat_id.txt', $chat_id);
                    file_put_contents('data/msg_id.txt', $msg_id);
                    file_put_contents('data/user_id.txt', $user_id);
                    $bot = '@NumberCityRoBot';
                    yield $this->messages->sendMessage([
                        'peer'       => $bot,
                        'message'    => "🔍 جستوجوی شماره 🔎",
                        'parse_mode' => "markdown"
                    ]);
                    yield sleep(0.3);
                    yield $this->messages->sendMessage([
                        'peer'       => $bot,
                        'message'    => "$x[1]",
                        'parse_mode' => "markdown"
                    ]);
                }
                if ($txt == 'time') {
                    $date = date('Y/m/d | H:i:s');
                    $sent = yield $this->messages->sendMessage([
                        'peer'       => $chat_id,
                        'message'    => "<pre>$date</pre>",
                        'parse_mode' => "html"
                    ]);
                    $sentID = $sent['updates'][0]['id'];
                    copy('http://api.sylix-team.cf/time/tool.php', 'data/photos.png');
                    $photoName = "data/photos.png";
                    $stickerName = "data/sticker.webp";
                    $img = imagecreatefromjpeg($photoName);
                    imagewebp($img, $stickerName);
                    imagedestroy($img);
                    yield $this->messages->sendMedia([
                        'peer'            => $chat_id,
                        'media'           => [
                            '_'               => 'inputMediaUploadedDocument',
                            'file'            => $stickerName,
                            'attributes'      => [[
                                '_'               => 'documentAttributeSticker',
                                'mask'            => false,
                                'alt'             => '',
                                'stickerset'      => [
                                    '_'               => 'inputStickerSetEmpty'
                                ],
                            ]]
                        ]
                    ]);
                    unlink("data/photos.png");
                    unlink("data/sticker.webp");
                }
                if ($txt == 'getinfo') {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $uID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        } else {
                            $uID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        }
                    }
                    $i = yield $this->getInfo($uID);
                    writeFile('kir/kos.txt', \json_encode($i, 128));
                    $media = ['_' => 'inputMediaUploadedDocument', 'file' => 'kir/kos.txt', 'attributes' => [['_' => 'documentAttributeFilename', 'file_name' => 'kos.txt']]];
                    yield $this->messages->sendMedia([
                        'peer'            => $chat_id,
                        'reply_to_msg_id' => $msg_id,
                        'media'           => $media,
                        'message'         => 'Encoded Info Of This user',
                        'parse_mode'      => 'html'
                    ]);
                } elseif ($txt == 'getfullinfo') {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $uID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        } else {
                            $uID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        }
                    }
                    $i = yield $this->getFullInfo($uID);
                    writeFile('kir/koos.txt', \json_encode($i, 128));
                    $media = ['_' => 'inputMediaUploadedDocument', 'file' => 'kir/koos.txt', 'attributes' => [['_' => 'documentAttributeFilename', 'file_name' => 'koos.txt']]];
                    yield $this->messages->sendMedia([
                        'peer'            => $chat_id,
                        'reply_to_msg_id' => $msg_id,
                        'media'           => $media,
                        'message'         => 'Encoded FullInfo Of This user',
                        'parse_mode'      => 'html'
                    ]);
                }
                if (preg_match("/^[\/\#\!\.]?rm$/si", $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $replyID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $replyID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $media = $replyID['messages'][0]['media']['photo'];
                        if (file_exists('data/a.jpg')) {
                            unlink('data/a.jpg');
                        }
                        if (file_exists('data/rm.png')) {
                            unlink('data/rm.png');
                        }
                        yield $this->downloadToFile($media, 'data/a.jpg');
                        $domain = 'https://' . $_SERVER['HTTP_HOST'];
                        $file = "$domain/self/test/data/a.jpg";
                        copy("https://api.sylix-team.cf/bg/mrm.php?url=$file", 'data/rm.png');
                        $inputMediaUploadedPhoto = ['_' => 'inputMediaUploadedPhoto', 'file' => 'data/rm.png'];
                        yield $this->messages->sendMedia([
                            'peer'            => $chat_id,
                            'media'           => $inputMediaUploadedPhoto,
                            'reply_to_msg_id' => $reply_to_msg_id,
                            'parse_mode'      => 'MarkDown'
                        ]);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "Reply To Pic", 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                } //elseif (preg_match("/^[\/\#\!\.]?ts (.*)$/si", $txt, $xxxxx)) {
                // }
                if (preg_match("/^[\/\#\!\.]?ts$/si", $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'supergroup' || $type == 'chat') {
                            $messag = yield $this->channels->getMessages([
                                'channel'         => $chat_id,
                                'id'              => [$reply_to_msg_id]
                            ]);
                        } else {
                            $messag = yield $this->messages->getMessages([
                                'id'              => [$reply_to_msg_id]
                            ]);
                        }
                        if (isset($messag['messages'][0]['media']['photo'])) {
                            $media = $messag['messages'][0]['media'];
                            yield $this->downloadToFile($media, "data/photos.png");
                            $photoName = "data/photos.png";
                            $stickerName = "data/sticker.webp";
                            $img = imagecreatefromjpeg($photoName);
                            imagewebp($img, $stickerName);
                            imagedestroy($img);
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => [
                                    '_'               => 'inputMediaUploadedDocument',
                                    'file'            => $stickerName,
                                    'attributes'      => [[
                                        '_'               => 'documentAttributeSticker',
                                        'mask'            => false,
                                        'alt'             => '',
                                        'stickerset'      => [
                                            '_'               => 'inputStickerSetEmpty'
                                        ],
                                    ]]
                                ]
                            ]);
                            unlink("data/photos.png");
                            unlink("data/sticker.webp");
                        } else {
                            yield $this->messages->editMessage([
                                'peer'            => $chat_id,
                                'id'              => $msg_id,
                                'message'         => "<b>Please Reply To a Photo</b>",
                                'parse_mode'      => 'html'
                            ]);
                        }
                    } else {
                        yield $this->messages->editMessage([
                            'peer'            => $chat_id,
                            'id'              => $msg_id,
                            'message'         => "<b>Please Reply To Message</b>",
                            'parse_mode'      => 'html'
                        ]);
                    }
                }
                if (preg_match("/^[\/\#\!\.]?tp$/si", $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $I = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $I = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $Document = $I['messages'][0]['media']['document'];
                        yield $this->downloadToFile($Document, "data/picc.png");
                        $inputMediaUploadedPhoto = ['_' => 'inputMediaUploadedPhoto', 'file' => 'data/picc.png'];
                        yield $this->messages->sendMedia([
                            'peer' => $chat_id,
                            'media' => $inputMediaUploadedPhoto,
                            'message' => "test",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode' => 'MarkDown'
                        ]);
                    }
                    unlink('data/picc.png');
                }

                #PornHub GIF
                if (preg_match('/^[\#\!\.\/]?phg (.*)/siu', $txt, $xq)) {
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'id'              => $msg_id,
                        'message'         => "<b>Wait...</b>",
                        'parse_mode'      => 'html'
                    ]);
                    $get = json_decode(yield $this->fileGetContents('https://sylix-team.cf/p/ph/phgif.php?q=' . $xq[1]), true)['result'];
                    foreach ($get as $a) {
                        $media = [
                            '_'          =>  'inputMediaUploadedDocument',
                            'file'       => "$a",
                            'attributes' => [
                                [
                                    '_'                  => 'documentAttributeVideo',
                                    'round_message'      => false,
                                    'supports_streaming' => true
                                ]
                            ]
                        ];
                        yield $this->messages->sendMedia(
                            [
                                'peer'    => $chat_id,
                                'message' => 'sylix-self',
                                'media'   => $media
                            ]
                        );
                        yield $this->sleep(4);
                    }
                }

                #Instagram SendMulti
                if (preg_match('/^[\#\!\.\/]?ig (.*)/siu', $txt, $x)) {
                    try {

                        if (strpos($x[1], '@') !== false) {
                        } else {

                            $m = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
                            $a = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$msg_id]] : ['rovoke' => true, 'id' => [$msg_id]];

                            yield $this->$m->deleteMessages($a);
                            $sent = yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<b>Please Wait... \nThis May Take Some Time.</b>",
                                'parse_mode'      => 'html'
                            ]);
                            $sent_id    = ($type == 'supergroup' || $type == 'channel') ? $sent['updates'][0]['id'] : $sent['id'];
                            $go         = file_get_contents("http://sylixgram.herokuapp.com/post.php?url=$x[1]");
                            $go         = strip_tags($go);
                            $go         = json_decode($go, true);
                            $multi      = isset($go['slide']) ? 'ok' : 'no';
                            $link       = $go['dl'];
                            $type       = $go['type'];
                            $inputMedia = ($type == 'video') ? 'inputMediaDocumentExternal' : 'inputMediaPhotoExternal';
                            yield $this->start_time = time();
                            if ($multi == 'ok') {
                                if (!is_dir('data/dl')) {
                                    mkdir('data/dl');
                                }
                                if ($type == 'video') {
                                    #Download Files
                                    foreach ($link as $a) {
                                        if (preg_match('/jpg/sm', $a)) {
                                            $name = 'SylixDeveloper' . rand(100000, 900000) . '.jpg';
                                        } else {
                                            $name = 'SylixDeveloper' . rand(100000, 900000) . '.mp4';
                                        }
                                        $f    = fopen("data/dl/$name", "w");
                                        fwrite($f, file_get_contents($a));
                                        fclose($f);
                                    }
                                    #Upload Files To Telegram
                                    $i = scandir('data/dl');
                                    unset($i[0], $i[1]);
                                    $loc = $_SERVER['SCRIPT_URI'] . 'data/dl/';
                                    $res = [];
                                    foreach ($i as $a) {
                                        if (preg_match('/jpg/sm', $a)) {
                                            $media = [
                                                '_'          =>  'inputMediaUploadedPhoto',
                                                'file'       => "$loc$a",
                                            ];
                                        } else {
                                            $media = [
                                                '_'          =>  'inputMediaUploadedDocument',
                                                'file'       => "$loc$a",
                                                'attributes' => [
                                                    [
                                                        '_'                  => 'documentAttributeVideo',
                                                        'round_message'      => false,
                                                        'supports_streaming' => true
                                                    ]
                                                ]
                                            ];
                                        }

                                        $res[] = yield $this->messages->uploadMedia(
                                            [
                                                'peer'  => $chat_id,
                                                'media' => $media
                                            ]
                                        );
                                    }
                                    #Create Media
                                    $array = [];
                                    foreach ($res as $new) {
                                        $d                 = isset($new['document']) ? $new['document'] : $new['photo'];
                                        $id                = $d['id'];
                                        $ash               = $d['access_hash'];
                                        $fr                = $d['file_reference'];
                                        $inputMedia        = isset($new['document']) ? 'inputMediaDocument' : 'inputMediaPhoto';
                                        $input             = isset($new['document']) ? 'inputDocument'      : 'inputPhoto';
                                        $inputDocument     =
                                            [
                                                '_'              => $input,
                                                'id'             => $id,
                                                'access_hash'    => $ash,
                                                'file_reference' => $fr
                                            ];
                                        $inputMediaDocument =
                                            [
                                                '_'  => $inputMedia,
                                                'id' => $inputDocument
                                            ];

                                        $inputSingleMedia =
                                            [
                                                '_'       => 'inputSingleMedia',
                                                'media'   => $inputMediaDocument,
                                                'message' => 'test'
                                            ];
                                        $array[] = $inputSingleMedia;
                                    }
                                    #SendMedia
                                    yield $this->messages->sendMultiMedia(
                                        [
                                            'peer'        => $chat_id,
                                            'multi_media' => $array
                                        ]
                                    );
                                    #Delete ALL Files
                                    foreach ($i as $l) {
                                        unlink('data/dl/' . $l);
                                    }
                                    $endtime = mediaTimeDeFormater(time() - $this->start_time);

                                    yield $this->messages->editMessage([
                                        'peer'            => $chat_id,
                                        'id'              => $sent_id,
                                        'message'         => "<b>Done in $endtime.</b>",
                                        'parse_mode'      => 'html'
                                    ]);
                                } elseif ($type == 'photo') {
                                    #Download Files
                                    foreach ($link as $a) {
                                        if (preg_match('/jpg/sm', $a)) {
                                            $name = 'SylixDeveloper' . rand(100000, 900000) . '.jpg';
                                        } else {
                                            $name = 'SylixDeveloper' . rand(100000, 900000) . '.mp4';
                                        }
                                        $f    = fopen("data/dl/$name", "w");
                                        fwrite($f, file_get_contents($a));
                                        fclose($f);
                                    }
                                    #Upload Files To Telegram
                                    $i = scandir('data/dl');
                                    unset($i[0], $i[1]);
                                    $loc = "https://" . $_SERVER['HTTP_HOST'] . $this->location . 'data/dl/';
                                    $res = [];
                                    foreach ($i as $a) {
                                        if (preg_match('/jpg/sm', $a)) {
                                            $media = [
                                                '_'          =>  'inputMediaUploadedPhoto',
                                                'file'       => "$loc$a",
                                            ];
                                        } else {
                                            $media = [
                                                '_'          =>  'inputMediaUploadedDocument',
                                                'file'       => "$loc$a",
                                                'attributes' => [
                                                    [
                                                        '_'                  => 'documentAttributeVideo',
                                                        'round_message'      => false,
                                                        'supports_streaming' => true
                                                    ]
                                                ]
                                            ];
                                        }
                                        $res[] = yield $this->messages->uploadMedia(
                                            [
                                                'peer'  => $chat_id,
                                                'media' => $media
                                            ]
                                        );
                                        #Create Media
                                        $array = [];
                                        foreach ($res as $new) {
                                            $d                 = isset($new['document']) ? $new['document'] : $new['photo'];
                                            $id                = $d['id'];
                                            $ash               = $d['access_hash'];
                                            $fr                = $d['file_reference'];
                                            $inputMedia        = isset($new['document']) ? 'inputMediaDocument' : 'inputMediaPhoto';
                                            $input             = isset($new['document']) ? 'inputDocument'      : 'inputPhoto';
                                            $inputDocument     =
                                                [
                                                    '_'              => $input,
                                                    'id'             => $id,
                                                    'access_hash'    => $ash,
                                                    'file_reference' => $fr
                                                ];
                                            $inputMediaDocument =
                                                [
                                                    '_'  => $inputMedia,
                                                    'id' => $inputDocument
                                                ];

                                            $inputSingleMedia =
                                                [
                                                    '_'       => 'inputSingleMedia',
                                                    'media'   => $inputMediaDocument,
                                                    'message' => 'test'
                                                ];
                                            $array[] = $inputSingleMedia;
                                        }
                                    }
                                    #SendMedia
                                    yield $this->messages->sendMultiMedia(
                                        [
                                            'peer'        => $chat_id,
                                            'multi_media' => $array
                                        ]
                                    );
                                    #Delete ALL Files
                                    foreach ($i as $l) {
                                        unlink('data/dl/' . $l);
                                    }
                                    $endtime = mediaTimeDeFormater(time() - $this->start_time);

                                    yield $this->messages->editMessage([
                                        'peer'            => $chat_id,
                                        'id'              => $sent_id,
                                        'message'         => "<b>Done in $endtime.</b>",
                                        'parse_mode'      => 'html'
                                    ]);
                                }
                            } else {
                                yield $this->start_time = time();
                                $a = $go['dl'];
                                yield $this->messages->sendMedia(
                                    [
                                        'peer'    => $chat_id,
                                        'message' => 'sylix-self',
                                        'media'   => ['_' => $inputMedia, 'url' => "$a"]
                                    ]
                                );
                                $endtime = mediaTimeDeFormater(time() - $this->start_time);

                                yield $this->messages->editMessage([
                                    'peer'            => $chat_id,
                                    'id'              => $sent_id,
                                    'message'         => "<b>Done in $endtime.</b>",
                                    'parse_mode'      => 'html'
                                ]);
                            }
                        }
                    } catch (\Throwable $e) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $e->getMessage()
                        ]);
                    }
                }
                /*#Instagram 
                if (preg_match('/^[\#\!\.\/]?ig (.*)/siu', $txt, $x)) {
                    $s = yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'id'              => $msg_id,
                        'message'         => "<b>Wait...</b>",
                        'parse_mode'      => 'html'
                    ]);
                    $go    = file_get_contents("http://sylixgram.herokuapp.com/post.php?url=$x[1]");
                    $go    = strip_tags($go);
                    $go    = json_decode($go, true);
                    $multi = isset($go['slide']) ? 'ok' : 'no';
                    $link  = $go['dl'];
                    $type  = $go['type'];
                    if ($type == 'video') {
                        $inputMedia = 'inputMediaDocumentExternal';
                    } else {
                        $inputMedia = 'inputMediaPhotoExternal';
                    }
                    if ($multi == 'ok') {
                        foreach ($link as $a) {
                            yield $this->messages->sendMedia(
                                [
                                    'peer'    => $chat_id,
                                    'message' => 'sylix-self',
                                    'media'   => ['_' => $inputMedia, 'url' => "$a"]
                                ]
                            );
                        }
                    } else {
                        $a = $go['dl'];
                        yield $this->messages->sendMedia(
                            [
                                'peer'    => $chat_id,
                                'message' => 'sylix-self',
                                'media'   => ['_' => $inputMedia, 'url' => "$a"]
                            ]
                        );
                    }
                }
                if (preg_match('/^[\/\#\!\.]?action (\w*)$/i', $txt, $a)) {
                    $DB['sending_action'] = $a[1];
                    $this->DB($DB);
                    yield $this->messages->sendMessage([
                        'peer'       => $chat_id,
                        'message'    => "*Sending Actions Now Is $a[1]*",
                        'parse_mode' => "markdown"
                    ]);
                }
*/
                #Clone 
                if (preg_match('/^[\/\#\!\.]?clone$/i', $txt)) {
                    try {
                        if (file_exists('data/clone.jpg')) {
                            unlink('data/clone.jpg');
                        }
                        if (file_exists('data/clone.jpg.lock')) {
                            unlink('data/clone.jpg.lock');
                        }
                        if (isset($reply_to_msg_id)) {
                            if ($type == 'channel' || $type == 'supergroup') {
                                $ID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                            } else {
                                $ID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                            }
                            $full    = yield $this->getFullInfo($ID);
                            $fname   = $full['User']['first_name'];
                            $fulll   = $full['full']['full_user'];
                            $about   = isset($fulll['about']) ? $fulll['about'] : null;
                            $bio     = (mb_strlen($about) >= 70) ? mb_substr($about, 0, 68) : $about;
                            $type    = $full['type'];

                            $profile = isset($fulll['profile_photo']) ? $fulll['profile_photo'] : 'havent';

                            $notfication = "<b>Clone was Successfull. \nIam</b><a href='mention:$ID'>[$fname]</a><b> from now.</b>";

                            if ($user_id == $me_id) {
                                yield $this->messages->editMessage(
                                    [
                                        'peer'       => $chat_id,
                                        'message'    => $notfication,
                                        'id'         => $msg_id,
                                        'parse_mode' => "html"
                                    ]
                                );
                            } else {
                                yield $this->messages->sendMessage(
                                    [
                                        'peer'            => $chat_id,
                                        'message'         => $notfication,
                                        'reply_to_msg_id' => $msg_id,
                                        'parse_mode'      => 'html'
                                    ]
                                );
                            }
                            yield $this->account->updateProfile(
                                [
                                    'first_name' => $fname
                                ]
                            );
                            if ($profile == 'havent') {
                                $pic  = yield $this->photos->getUserPhotos(
                                    [
                                        'user_id' => $me_id,
                                        'offset'  => 0,
                                        'max_id'  => 0,
                                        'limit'   => 1
                                    ]
                                )['photos'];
                                yield $this->photos->deletePhotos(
                                    [
                                        'id' => $pic
                                    ]
                                );
                            }
                            if (!is_null($about)) {
                                yield $this->account->updateProfile(
                                    [
                                        'about' => $bio
                                    ]
                                );
                            }
                            $p = yield $this->getPropicInfo($ID);
                            yield $this->downloadToFile($p, './data/clone.jpg');

                            $pic  = yield $this->photos->getUserPhotos(
                                [
                                    'user_id' => $me_id,
                                    'offset'  => 0,
                                    'max_id'  => 0,
                                    'limit'   => 1
                                ]
                            )['photos'];
                            yield $this->photos->deletePhotos(
                                [
                                    'id' => $pic
                                ]
                            );
                            yield $this->photos->uploadProfilePhoto(
                                [
                                    'file' => './data/clone.jpg'
                                ]
                            );
                        } else {
                            yield $this->messages->sendMessage(
                                [
                                    'peer'            => $chat_id,
                                    'message'         => "Reply To User",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => 'Markdown'
                                ]
                            );
                        }
                    } catch (\Throwable $e) {
                        yield $this->messages->sendMessage(
                            [
                                'peer'            => $chat_id,
                                'message'         => $e->getMessage(),
                                'parse_mode'      => 'Markdown'
                            ]
                        );
                    }
                } elseif (preg_match('/^[\/\#\!\.]?clone (\@.*|\d*)/i', $txt, $za)) {
                    try {
                        if (file_exists('data/clone.jpg')) {
                            unlink('data/clone.jpg');
                        }
                        if (file_exists('data/clone.jpg.lock')) {
                            unlink('data/clone.jpg.lock');
                        }
                        $full    = yield $this->getFullInfo($za[1]);
                        $fname   = $full['User']['first_name'];
                        $ID      = $full['User']['id'];
                        $fulll   = $full['full']['full_user'];
                        $about   = isset($fulll['about']) ? $fulll['about'] : null;
                        $bio     = (mb_strlen($about) >= 70) ? mb_substr($about, 0, 68) : $about;
                        $type    = $full['type'];

                        $profile = isset($fulll['profile_photo']) ? $fulll['profile_photo'] : 'havent';

                        $notfication = "<b>Clone was Successfull. \nIam</b><a href='mention:$ID'>[$fname]</a><b> from now.</b>";

                        if ($user_id == $me_id) {
                            yield $this->messages->editMessage(
                                [
                                    'peer'       => $chat_id,
                                    'message'    => $notfication,
                                    'id'         => $msg_id,
                                    'parse_mode' => "html"
                                ]
                            );
                        } else {
                            yield $this->messages->sendMessage(
                                [
                                    'peer'            => $chat_id,
                                    'message'         => $notfication,
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => 'html'
                                ]
                            );
                        }
                        yield $this->account->updateProfile(
                            [
                                'first_name' => $fname
                            ]
                        );
                        if ($profile == 'havent') {
                            $pic  = yield $this->photos->getUserPhotos(
                                [
                                    'user_id' => $me_id,
                                    'offset'  => 0,
                                    'max_id'  => 0,
                                    'limit'   => 1
                                ]
                            )['photos'];
                            yield $this->photos->deletePhotos(
                                [
                                    'id' => $pic
                                ]
                            );
                        }
                        if (!is_null($about)) {
                            yield $this->account->updateProfile(
                                [
                                    'about' => $bio
                                ]
                            );
                        }
                        $p = yield $this->getPropicInfo($ID);
                        yield $this->downloadToFile($p, './data/clone.jpg');

                        $pic  = yield $this->photos->getUserPhotos(
                            [
                                'user_id' => $me_id,
                                'offset'  => 0,
                                'max_id'  => 0,
                                'limit'   => 1
                            ]
                        )['photos'];
                        yield $this->photos->deletePhotos(
                            [
                                'id' => $pic
                            ]
                        );
                        yield $this->photos->uploadProfilePhoto(
                            [
                                'file' => './data/clone.jpg'
                            ]
                        );
                    } catch (\Throwable $e) {
                        yield $this->messages->sendMessage(
                            [
                                'peer'            => $chat_id,
                                'message'         => $e->getMessage(),
                                'parse_mode'      => 'Markdown'
                            ]
                        );
                    }
                }
                if (preg_match('/^[\/\#\!\.]?cpack (.*) (.*) (.*)$/i', $txt, $ppp)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $I = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $I = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $bot = '@Stickers';
                        yield $this->messages->sendMessage([
                            'peer'    => $bot,
                            'message' => '/newpack',
                            'parse_mode' => "markdown"
                        ]);
                        yield $this->sleep(0.1);
                        yield $this->messages->sendMessage([
                            'peer'    => $bot,
                            'message' => $ppp[2],
                            'parse_mode' => "markdown"
                        ]);
                        yield $this->sleep(0.1);
                        $document_sticker = $I['messages'][0]['media'];
                        yield $this->downloadToFile($document_sticker, "data/p.png");
                        $photoName = "data/p.png";
                        $stickerName = "data/s.webp";
                        $img = imagecreatefromjpeg($photoName);
                        imagewebp($img, $stickerName);
                        imagedestroy($img);
                        yield $this->messages->sendMedia([
                            'peer'            => $bot,
                            'media'           => [
                                '_'               => 'inputMediaUploadedDocument',
                                'file'            => $stickerName,
                                'attributes'      => [[
                                    '_'               => 'documentAttributeSticker',
                                    'mask'            => false,
                                    'alt'             => '',
                                    'stickerset'      => [
                                        '_'               => 'inputStickerSetEmpty'
                                    ],
                                ]]
                            ]
                        ]);
                        //unlink("data/photos.png");
                        //unlink("data/sticker.webp");


                    }
                }
                #Create Sticker Pack with Official StickersBot
                if (preg_match('/^[\/\#\!\.]?np (.*) (.*) (.*)$/i', $txt, $mmm)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $I = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $I = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $sticker                  = $I['messages'][0]['media']['document'];
                        $inputStickerSetID        = $I['messages'][0]['media']['document']['attributes'][1]['stickerset'];
                        $stickerset               = yield $this->messages->getStickerSet(['stickerset' => $inputStickerSetID]);
                        $is_animated              = ($stickerset['set']['animated'] == true) ? "yes" : "no";
                        $bot                      = '@Stickers';
                        if ($is_animated == 'no') {
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/newpack',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $mmm[2],
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->forwardMessages(['from_peer' => $chat_id, 'id' => [$reply_to_msg_id], 'to_peer' => $bot]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $mmm[3],
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.5);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/publish',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/skip',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $mmm[1] . 'bysylix',
                                'parse_mode' => "markdown"
                            ]);
                            $tex = "<b>Successfull.<br />i steal it and covert to the new pack<br /> Your Pack Link is ↬</b><a href= 'tg://addstickers?set=" . $mmm[1] . "bysylix'>Your Pack</a> ";
                            yield $this->messages->sendMessage([
                                'peer'    => $chat_id,
                                'message' => $tex,
                                'parse_mode' => "markdown",
                                'reply_to_msg_id' => $reply_to_msg_id
                            ]);
                        } else {
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/newanimated',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $mmm[2],
                                'parse_mode' => "markdown"
                            ]);
                            if (file_exists('data/sos.tgs')) {
                                unlink('data/sos.tgs');
                            }
                            yield $this->downloadToFile($sticker, 'data/sos.tgs');
                            $inputMediaUploadedDocument = ['_' => 'inputMediaUploadedDocument', 'file' => 'data/sos.tgs', 'attributes' => [['_' => 'documentAttributeFilename', 'file_name' => 'sticker.tgs']]];
                            yield $this->messages->sendMedia([
                                'peer'            => $bot,
                                'media'           => $inputMediaUploadedDocument
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $mmm[3],
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/publish',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '<' . $mmm[2] . '>',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/skip',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $mmm[1] . 'bysylix',
                                'parse_mode' => "markdown"
                            ]);
                            $tex = "<b>Successfull.<br />i steal it and covert to the new pack<br /> Your Pack Link is ↬</b><a href= 'tg://addstickers?set=" . $mmm[1] . "bysylix'>Your Pack</a> ";
                            yield $this->messages->sendMessage([
                                'peer'    => $chat_id,
                                'message' => $tex,
                                'parse_mode' => "markdown",
                                'reply_to_msg_id' => $reply_to_msg_id
                            ]);
                        }
                    }
                } elseif (preg_match('/^[\/\#\!\.]?ap (.*) (.*)$/i', $txt, $nnn)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $I = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $I = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $sticker                  = $I['messages'][0]['media']['document'];
                        $inputStickerSetID        = $I['messages'][0]['media']['document']['attributes'][1]['stickerset'];
                        $inputStickerSetShortName = ['_' => 'inputStickerSetShortName', 'short_name' => $nnn[1] . 'bysylix'];
                        $stickerset               = yield $this->messages->getStickerSet(['stickerset' => $inputStickerSetID]);
                        $stickerpack              = yield $this->messages->getStickerSet(['stickerset' => $inputStickerSetShortName]);
                        @$have                    = isset($stickerpack) ? 'have' : null;
                        $pack_animated            = ($stickerpack['set']['animated'] == true) ? "yes" : "no";
                        $is_animated              = ($stickerset['set']['animated'] == true) ? "yes" : "no";
                        $bot                      = '@Stickers';
                        $pack                     = $nnn[1] . 'bysylix';
                        if ($pack_animated == 'yes' && $is_animated == 'yes' || $pack_animated == 'no' && $is_animated == 'no') {
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/addsticker',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $pack,
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            if ($is_animated == 'no') {
                                yield $this->messages->forwardMessages(['from_peer' => $chat_id, 'id' => [$reply_to_msg_id], 'to_peer' => $bot]);
                                yield $this->sleep(0.1);
                                yield $this->messages->sendMessage([
                                    'peer'    => $bot,
                                    'message' => $nnn[2],
                                    'parse_mode' => "markdown"
                                ]);
                                yield $this->sleep(0.1);
                                yield $this->messages->sendMessage([
                                    'peer'    => $bot,
                                    'message' => '/done',
                                    'parse_mode' => "markdown"
                                ]);
                                $tex = "<b>Successfull.<br />I added this sticker to your pack<br /> Your Pack Link is ↬</b><a href= 'tg://addstickers?set=" . $nnn[1] . "bysylix'>Your Pack</a> ";
                                yield $this->messages->sendMessage([
                                    'peer'    => $chat_id,
                                    'message' => $tex,
                                    'parse_mode' => "markdown",
                                    'reply_to_msg_id' => $reply_to_msg_id
                                ]);
                            } else {
                                if (file_exists('data/add.tgs')) {
                                    unlink('data/add.tgs');
                                }
                                yield $this->downloadToFile($sticker, 'data/add.tgs');
                                $inputMediaUploadedDocument = ['_' => 'inputMediaUploadedDocument', 'file' => 'data/add.tgs', 'attributes' => [['_' => 'documentAttributeFilename', 'file_name' => 'sticker.tgs']]];
                                yield $this->messages->sendMedia([
                                    'peer'            => $bot,
                                    'media'           => $inputMediaUploadedDocument
                                ]);
                                yield $this->sleep(0.1);
                                yield $this->messages->sendMessage([
                                    'peer'    => $bot,
                                    'message' => $nnn[2],
                                    'parse_mode' => "markdown"
                                ]);
                                yield $this->messages->sendMessage([
                                    'peer'    => $bot,
                                    'message' => '/done',
                                    'parse_mode' => "markdown"
                                ]);
                                $tex = "<b>Successfull<br />I added this sticker to your pack<br /> Your Pack Link is ↬</b><a href= 'tg://addstickers?set=" . $nnn[1] . "bysylix'>Your Pack</a> ";
                                yield $this->messages->sendMessage([
                                    'peer'    => $chat_id,
                                    'message' => $tex,
                                    'parse_mode' => "markdown",
                                    'reply_to_msg_id' => $reply_to_msg_id
                                ]);
                            }
                        } elseif ($pack_animated == 'yes' && $is_animated == 'no') {
                            yield $this->messages->sendMessage([
                                'peer'    => $chat_id,
                                'message' => '<b>error<br />The sticker pack is Animated, but the sticker is not Animated.</b>',
                                'parse_mode' => "markdown",
                                'reply_to_msg_id' => $reply_to_msg_id
                            ]);
                        } elseif ($pack_animated == 'no' && $is_animated == 'yes') {
                            yield $this->messages->sendMessage([
                                'peer'    => $chat_id,
                                'message' => '<b>error<br />The sticker pack is not Animated, but the sticker is Animated.</b>',
                                'parse_mode' => "markdown",
                                'reply_to_msg_id' => $reply_to_msg_id
                            ]);
                        }
                    }
                } elseif (preg_match('/^[\/\#\!\.]?delpack (.*)$/i', $txt, $sos)) {
                    $bot  = '@Stickers';
                    $pack = $sos[1] . 'bysylix';
                    yield $this->messages->sendMessage([
                        'peer'    => $bot,
                        'message' => '/delpack',
                        'parse_mode' => "markdown"
                    ]);
                    yield $this->sleep(0.1);
                    yield $this->messages->sendMessage([
                        'peer'    => $bot,
                        'message' => $pack,
                        'parse_mode' => "markdown"
                    ]);
                    yield $this->sleep(0.1);
                    yield $this->messages->sendMessage([
                        'peer'    => $bot,
                        'message' => 'Yes, I am totally sure.',
                        'parse_mode' => "markdown"
                    ]);
                    yield $this->messages->sendMessage([
                        'peer'    => $chat_id,
                        'message' => '<b>Your sticker pack was deleted with the name [' . $sos[1] . ']</b>',
                        'parse_mode' => "markdown",
                        'reply_to_msg_id' => $msg_id
                    ]);
                }
                if (preg_match('/^[\/\#\!\.]?spamall$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $I = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $I = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $inputStickerSetID = $I['messages'][0]['media']['document']['attributes'][1]['stickerset'];
                        $stickerset        = yield $this->messages->getStickerSet(['stickerset' => $inputStickerSetID]);
                        $dec               = $stickerset['documents'];
                        for ($i = 0; $i <= count($dec); $i++) {
                            @$DOCID             = $dec[$i]['id'];
                            @$ACCESS            = $dec[$i]['access_hash'];
                            @$REFERENCE         = $dec[$i]['file_reference'];
                            $inputDocument      = ['_' => 'inputDocument', 'id' => $DOCID, 'access_hash' => $ACCESS, 'file_reference' => $REFERENCE];
                            $inputMediaDocument = ['_' => 'inputMediaDocument', 'id' => $inputDocument];

                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $inputMediaDocument
                            ]);
                        }
                    }
                }


                if (preg_match('/^[\/\#\!\.]?stealall (.*) (.*) (.*)$/i', $txt, $aaa)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $I = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $I = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $sticker                  = $I['messages'][0]['media']['document'];
                        $inputStickerSetID        = $I['messages'][0]['media']['document']['attributes'][1]['stickerset'];
                        $stickerset               = yield $this->messages->getStickerSet(['stickerset' => $inputStickerSetID]);
                        $is_animated              = ($stickerset['set']['animated'] == true) ? "yes" : "no";
                        $bot                      = '@Stickers';
                        $dec                      = $stickerset['documents'];
                        if ($is_animated == 'no') {
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/newpack',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $aaa[2],
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->forwardMessages(['from_peer' => $chat_id, 'id' => [$reply_to_msg_id], 'to_peer' => $bot]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $aaa[3],
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/publish',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => '/skip',
                                'parse_mode' => "markdown"
                            ]);
                            yield $this->sleep(0.1);
                            yield $this->messages->sendMessage([
                                'peer'    => $bot,
                                'message' => $aaa[1] . 'bysylix',
                                'parse_mode' => "markdown"
                            ]);
                            for ($i = 0; $i <= count($dec); $i++) {
                                @$emoji                   = $stickerset['packs'][$i]['emoticon'];
                                @$DOCID                   = $dec[$i]['id'];
                                @$ACCESS                  = $dec[$i]['access_hash'];
                                @$REFERENCE               = $dec[$i]['file_reference'];
                                $inputDocument            = ['_' => 'inputDocument', 'id' => $DOCID, 'access_hash' => $ACCESS, 'file_reference' => $REFERENCE];
                                $inputStickerSetItem      = ['_' => 'inputStickerSetItem', 'document' => $inputDocument, 'emoji' => $emoji];
                                $inputStickerSetShortName = ['_' => 'inputStickerSetShortName', 'short_name' =>  $aaa[1] . 'bysylix'];
                                yield $this->stickers->addStickerToSet(['stickerset' => $inputStickerSetShortName, 'sticker' => $inputStickerSetItem]);
                            }
                            $tex = "<b>Successfull.<br />i steal it and covert to the new pack<br /> Your Pack Link is ↬</b><a href= 'tg://addstickers?set=" . $aaa[1] . "bysylix'>Your Pack</a> ";
                            yield $this->messages->sendMessage([
                                'peer'    => $chat_id,
                                'message' => $tex,
                                'parse_mode' => "markdown",
                                'reply_to_msg_id' => $reply_to_msg_id
                            ]);
                        }
                    }
                }

                /* Create Sticker Pack With Sylix
                if (preg_match('/^[\/\#\!\.]?cns (.*) (.*) (.*)$/i', $txt, $b)) {
                    if (isset($reply_to_msg_id)) {
                        $bot = '@sylixhelperbot';
                        yield $this->messages->sendMessage([
                            'peer'    => $bot,
                            'message' => $txt,
                            'parse_mode' => "markdown"
                        ]);
                        sleep(1);
                        yield $this->messages->forwardMessages(['from_peer' => $chat_id, 'id' => [$reply_to_msg_id], 'to_peer' => $bot]);
                        $tex = "<b>Successfull.<br />i steal it and covert to the new pack<br /> Your Pack Link is ↬</b><a href= 'tg://addstickers?set=" . $b[1] . "_by_" . substr($bot, 1, strlen($bot)) . "'>Your Pack</a> ";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $tex,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '*Reply To the Sticker I will Steal it for You*',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    }
                }
                if (preg_match('/^[\/\#\!\.]?as (.*) (.*)$/i', $txt, $b)) {
                    if (isset($reply_to_msg_id)) {
                        $bot = '@sylixhelperbot';
                        yield $this->messages->sendMessage([
                            'peer'    => $bot,
                            'message' => $txt,
                            'parse_mode' => "markdown"
                        ]);
                        sleep(0.5);
                        yield $this->messages->forwardMessages(['from_peer' => $chat_id, 'id' => [$reply_to_msg_id], 'to_peer' => $bot]);
                        $tex = "<b>I Add that Sticker Into Your robbed Pack</b><br /><a href= 'tg://addstickers?set=" . $b[1] . "_by_" . substr($bot, 1, strlen($bot)) . "'>Your Pack</a> ";
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $tex,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "HTML"
                        ]);
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '*Reply To the Sticker I will Steal it for You*',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    }
                }
*/

                if (preg_match('/^[\/\!\#\.]?sanswerm (.*)/', $txt, $acc)) {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $reply = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                    } else {
                        $reply = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                    }
                    $document_sticker = $reply['messages'][0]['media']['document'];

                    if ($document_sticker) {
                        $ds_id = $document_sticker['id'];
                        $ds_ah = $document_sticker['access_hash'];
                        $ds_fr = $document_sticker['file_reference'];
                        $is    = ['_' => 'inputDocument', 'id' => $ds_id, 'access_hash' => $ds_ah, 'file_reference' => $ds_fr];
                        $imuds = ['_' => 'inputMediaDocument', 'id' => $is];
                        @$DB['MediaAnswers'][0] = ['text' => "%test%", 'media' => 'kos'];
                        $push = ['text' => $acc[1], 'media' => $imuds];
                        array_push($DB['MediaAnswers'], $push);
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => "<pre>Media Answer Successfully Saved For This Word -> ($acc[1])</pre>",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "html"
                        ]);
                        $this->DB($DB);
                    }
                }
                /*
                    $type     = $Document['mime_type'];
                    if ($type == 'video/mp4') {
                        yield $this->downloadToFile($Document, 'data/d.mp4');
                        $DB['answers'][$acc[1]]['media'] = 'video';
                        $this->DB($DB);
                    } elseif ($type == 'image/webp') {
                        yield $this->downloadToFile($Document, 'data/d.webp');
                        $DB['answers'][$acc[1]]['media'] = 'sticker';
                        $this->DB($DB);
                    } elseif ($type == 'application/x-tgsticker') {
                        yield $this->downloadToFile($Document, 'data/d.tgs');
                        $DB['answers'][$acc[1]]['media'] = 'animated';
                        $this->DB($DB);
                    }
                    */ elseif (preg_match('/^[\/\!\#\.]?danswerm (.*)/', $txt, $accc)) {
                    for ($i = 0; $i <= count($DB['MediaAnswers']); $i++) {
                        if ($DB['MediaAnswers'][$i]['text'] == $accc[1]) {
                            unset($DB['MediaAnswers'][$i]);
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => "<pre>Media Ansewr Successfully Deleted for This Word -> ($accc[1])</pre>",
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "html"
                            ]);
                            $this->DB($DB);
                        }
                    }
                }

                if ($txt == '.i.') {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $uID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                    } else {
                        $uID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                    }
                    $document_sticker = $uID['messages'][0]['media']['document'];
                    if (isset($document_sticker)) {
                        $ds_id = $document_sticker['id'];
                        $ds_ah = $document_sticker['access_hash'];
                        $ds_fr = $document_sticker['file_reference'];
                        $is    = ['_' => 'inputDocument', 'id' => $ds_id, 'access_hash' => $ds_ah, 'file_reference' => $ds_fr];
                        $imuds = ['_' => 'inputMediaDocument', 'id' => $is];
                        yield $this->messages->sendMedia([
                            'peer'            => $chat_id,
                            'media'           => $imuds,
                            'reply_to_msg_id' => $msg_id,
                        ]);
                    }
                }

                #User Inforamtion
                # 3 methods reply,put UserID , put Username
                if ($txt == '/res') {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $uID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                    } else {
                        $uID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                    }
                    $get = yield $this->getFullInfo($uID);
                    $get = json_encode($get, 128);
                    file_put_contents('data/fullinfo.json', $get);
                }


                if (preg_match('/^[\#\!\.\/]?inf$/si', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $uID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        } else {
                            $uID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        }
                        $GETFULLINFO       = yield $this->getFullInfo($uID);
                        $USER              = $GETFULLINFO['User'];
                        $PHONE             = isset($USER['phone'])         ? $USER['phone']     : '--';
                        $LASTNAME          = isset($USER['last_name'])     ? $USER['last_name'] : '--';
                        $CONTACT           = ($USER['contact']  == false)  ? 'no'               : 'yes';
                        $IS_BOT            = ($USER['bot']      == false)  ? 'no'               : 'yes';
                        $SCAM              = ($USER['scam']     == false)  ? 'no'               : 'yes';
                        $VERIFIED          = ($USER['verified'] == false)  ? 'no'               : 'yes';
                        $SUPPORT           = ($USER['support']  == false)  ? 'no'               : 'yes';
                        $FULL              = $GETFULLINFO['full']['full_user'];
                        $n                 = $USER['first_name'];
                        $iD                = $FULL['id'];
                        $bio               = isset($FULL['about'])                                        ? $FULL['about']                                              : "Haven't";
                        $un                = isset($FULL['username'])                                     ? $FULL['username']                                           : "Haven't";
                        $profile           = isset($FULL['profile_photo'])                                ? $FULL['profile_photo']                                      : 'havent';
                        $status            = isset($GETFULLINFO['full']['users'][0]['status']['_'])       ? substr($GETFULLINFO['full']['users'][0]['status']['_'], 10) : '--';
                        $last_seen         = isset($GETFULLINFO['full']['users'][0]['status']['was_online']) ? $GETFULLINFO['full']['users'][0]['status']['was_online']       : '--';
                        if ($last_seen != '--') {
                            $last_seen = date('H:i:s', $last_seen);
                        }
                        $common_chats      = isset($FULL['common_chats_count'])  ? $FULL['common_chats_count']  : '--';
                        $IS_BLOCKED        = ($FULL['blocked'] == false) ? 'no' : 'yes';
                        $ALLOW_CALLS       = ($FULL['phone_calls_available'] == false) ? 'no' : 'yes';
                        $ALLOW_VID_CALLS   = ($FULL['video_calls_available'] == false) ? 'no' : 'yes';
                        $photos            = yield $this->photos->getUserPhotos(['user_id' => $iD, 'offset' => 0, 'max_id' => 0, 'limit' => 0]);
                        $pic_counts        = isset($photos['photos']) ? count($photos['photos']) : '0';
                        $inforamtion =
                            "**Information Of **[$n](mention:$iD)\n\n"
                            . align(
                                [
                                    'Name'                      => $n,
                                    'LastName'                  => $LASTNAME,
                                    'UserID'                    => $iD,
                                    'Phone'                     => $PHONE,
                                    'Your Contact'              => $CONTACT,
                                    'Is Bot'                    => $IS_BOT,
                                    'Scam'                      => $SCAM,
                                    'Verified'                  => $VERIFIED,
                                    'Support'                   => $SUPPORT,
                                    'Blocked'                   => $IS_BLOCKED,
                                    'Allow Calls'               => $ALLOW_CALLS,
                                    'Allow Video Calls'         => $ALLOW_VID_CALLS,
                                    'Username'                  => $un,
                                    'Bio'                       => $bio,
                                    'Status'                    => $status,
                                    'LastSeen'                  => $last_seen,
                                    'Profile Picture'           => $pic_counts,
                                    'Common Groups'             => $common_chats,
                                    'Current ChatID'            => $chat_id
                                ],
                                '` ↬ (`',
                                '├ • `',
                                '`)'
                            );
                        if ($profile == 'havent') {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $inforamtion,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => 'markdown'
                            ]);
                        } else {
                            $profile_ID        = $profile['id'];
                            $profile_hash      = $profile['access_hash'];
                            $profile_reference = $profile['file_reference'];
                            $input_photo       = ['_' => "inputPhoto", 'id' => $profile_ID, 'access_hash' => $profile_hash, 'file_reference' => $profile_reference];
                            $input_media_photo = ['_' => "inputMediaPhoto", 'id' => $input_photo];
                            yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => $input_media_photo,
                                'message'         => $inforamtion,
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => "markdown"
                            ]);
                        }
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "*Reply To Message or put UserID or Username.*", 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                } elseif (preg_match('/^[\#\!\.\/]?inf (\@.*|\d*)$/si', $txt, $ar)) {
                    if ($ar[1] == '@this') {
                        try {
                            //if ($type == 'supergroup' || $type == 'channel') {
                            if ($type != 'user') {
                                $inf  = yield $this->getFullInfo($chat_id);
                                $chat = $inf['Chat'];
                                $is_super_group       = ($chat['megagroup'] == false)      ? 'no'                  : 'yes';
                                $verified             = ($chat['verified']  == false)      ? 'no'                  : 'yes';
                                $scam                 = ($chat['scam']      == false)      ? 'no'                  : 'yes';
                                $title                = $chat['title'];
                                $username             = isset($chat['username'])           ? $chat['username']     : '--';
                                $full                 = $inf['full'];
                                $pic                  = isset($full['chat_photo'])         ? $full['chat_photo']   : '--';
                                $about                = isset($full['about'])              ? $full['about']        : '--';
                                $members_count        = $full['participants_count'];
                                $online_count         = $full['online_count'];
                                $unread_count         = $full['unread_count'];

                                /*$sticker_set          = isset($full['stickerset'])          ? $full['stickerset']   : '--';
                            $sticker_set_name     = isset($sticker_set['title'])        ? $sticker_set['title'] : '--';
                            $sticker_set_link     = isset($sticker_set['short_name'])   ? "tg://addsticker?set={$sticker_set['short_name']}" : '--';
                            $sticker_set_count    = isset($sticker_set['count'])        ? $sticker_set['count'] : '--';
                            //$sticker_set_archived = ($sticker_set['archived'] == false) ? 'no' : 'yes';
                            //$sticker_set_official = ($sticker_set['official'] == false) ? 'no' : 'yes';
                            $sticker_set_animated = ($sticker_set['animated'] == false) ? 'no' : 'yes';
                            $sticker_set_masks    = ($sticker_set['masks']    == false) ? 'no' : 'yes';
                            */

                                $send =
                                    "**Information Of **[$title]\n\n"
                                    . align(
                                        [
                                            'Name'          => $title,
                                            'Username'      => $username,
                                            'Scam'          => $scam,
                                            'About'         => $about,
                                            'Members Count' => $members_count,
                                            'Online Count'  => $online_count,
                                            'Unread Count'  => $unread_count,
                                            'Verified'      => $verified
                                        ],
                                        ' ↬ (`',
                                        '├ • ',
                                        '`)'
                                    );
                                /*if ($sticker_set != '--') {
                                $send .= "\n**StickerSetInfo **\n\n"
                                    . align(
                                        [
                                            'StickerName'   => $sticker_set_name,
                                            'Link'          => $sticker_set_link,
                                            'Sticker Count' => $sticker_set_count,
                                            'Animated'      => $sticker_set_animated,
                                            //'Archived'      => $sticker_set_archived,
                                            //'Official'      => $sticker_set_official,
                                            'Masks'         => $sticker_set_masks,

                                        ],
                                        ' ↬ (`',
                                        '├ • ',
                                        '`)'
                                    );
                            }*/
                                if ($pic == '--') {
                                    yield $this->messages->sendMessage([
                                        'peer'            => $chat_id,
                                        'message'         => "$send",
                                        'reply_to_msg_id' => $msg_id,
                                        'parse_mode'      => 'markdown'
                                    ]);
                                } else {
                                    $pic_id            = $pic['id'];
                                    $pic_hash          = $pic['access_hash'];
                                    $pic_reference     = $pic['file_reference'];
                                    $input_photo       = ['_' => "inputPhoto", 'id' => $pic_id, 'access_hash' => $pic_hash, 'file_reference' => $pic_reference];
                                    $input_media_photo = ['_' => "inputMediaPhoto", 'id' => $input_photo];
                                    yield $this->messages->sendMedia([
                                        'peer'            => $chat_id,
                                        'media'           => $input_media_photo,
                                        'message'         => $send,
                                        'reply_to_msg_id' => $msg_id,
                                        'parse_mode'      => "markdown"
                                    ]);
                                }
                            } else {
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => "<b>Use This Method On Supergroups.</b>",
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => 'HTML'
                                ]);
                            }
                        } catch (\Throwable $e) {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $e->getMessage() . PHP_EOL . $e->getLine(),
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => 'HTML'
                            ]);
                        }
                    } else {
                        try {
                            $GETFULLINFO       = yield $this->getFullInfo($ar[1]);
                            $USER              = $GETFULLINFO['User'];
                            $PHONE             = isset($USER['phone'])         ? $USER['phone']     : '--';
                            $LASTNAME          = isset($USER['last_name'])     ? $USER['last_name'] : '--';
                            $CONTACT           = ($USER['contact']  == false)  ? 'no'               : 'yes';
                            $IS_BOT            = ($USER['bot']      == false)  ? 'no'               : 'yes';
                            $SCAM              = ($USER['scam']     == false)  ? 'no'               : 'yes';
                            $VERIFIED          = ($USER['verified'] == false)  ? 'no'               : 'yes';
                            $SUPPORT           = ($USER['support']  == false)  ? 'no'               : 'yes';
                            $FULL              = $GETFULLINFO['full']['full_user'];
                            $n                 = $USER['first_name'];
                            $iD                = $FULL['id'];
                            $bio               = isset($FULL['about'])                                        ? $FULL['about']                                              : "Haven't";
                            $un                = isset($FULL['username'])                                     ? $FULL['username']                                           : "Haven't";
                            $profile           = isset($FULL['profile_photo'])                                ? $FULL['profile_photo']                                      : 'havent';
                            $status            = isset($GETFULLINFO['full']['users'][0]['status']['_'])       ? substr($GETFULLINFO['full']['users'][0]['status']['_'], 10) : '--';
                            $last_seen         = isset($GETFULLINFO['full']['users'][0]['status']['was_online']) ? $GETFULLINFO['full']['users'][0]['status']['was_online']       : '--';
                            if ($last_seen != '--') {
                                $last_seen = date('H:i:s', $last_seen);
                            }
                            $common_chats      = isset($FULL['common_chats_count'])  ? $FULL['common_chats_count']  : '--';
                            $IS_BLOCKED        = ($FULL['blocked'] == false) ? 'no' : 'yes';
                            $ALLOW_CALLS       = ($FULL['phone_calls_available'] == false) ? 'no' : 'yes';
                            $ALLOW_VID_CALLS   = ($FULL['video_calls_available'] == false) ? 'no' : 'yes';
                            $photos            = yield $this->photos->getUserPhotos(['user_id' => $iD, 'offset' => 0, 'max_id' => 0, 'limit' => 0]);
                            $pic_counts        = isset($photos['photos']) ? count($photos['photos']) : '0';
                            $inforamtion =
                                "**Information Of **[$n](mention:$iD)\n\n"
                                . align(
                                    [
                                        'Name'                      => $n,
                                        'LastName'                  => $LASTNAME,
                                        'UserID'                    => $iD,
                                        'Phone'                     => $PHONE,
                                        'Your Contact'              => $CONTACT,
                                        'Is Bot'                    => $IS_BOT,
                                        'Scam'                      => $SCAM,
                                        'Verified'                  => $VERIFIED,
                                        'Support'                   => $SUPPORT,
                                        'Blocked'                   => $IS_BLOCKED,
                                        'Allow Calls'               => $ALLOW_CALLS,
                                        'Allow Video Calls'         => $ALLOW_VID_CALLS,
                                        'Username'                  => $un,
                                        'Bio'                       => $bio,
                                        'Status'                    => $status,
                                        'LastSeen'                  => $last_seen,
                                        'Profile Picture'           => $pic_counts,
                                        'Common Groups'             => $common_chats,
                                        'Current ChatID'            => $chat_id
                                    ],
                                    '` ↬ (`',
                                    '├ • `',
                                    '`)'
                                );
                            if ($profile == 'havent') {
                                yield $this->messages->sendMessage([
                                    'peer'            => $chat_id,
                                    'message'         => $inforamtion,
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => 'markdown'
                                ]);
                            } else {
                                $profile_ID        = $profile['id'];
                                $profile_hash      = $profile['access_hash'];
                                $profile_reference = $profile['file_reference'];
                                $input_photo       = ['_' => "inputPhoto", 'id' => $profile_ID, 'access_hash' => $profile_hash, 'file_reference' => $profile_reference];
                                $input_media_photo = ['_' => "inputMediaPhoto", 'id' => $input_photo];
                                yield $this->messages->sendMedia([
                                    'peer'            => $chat_id,
                                    'media'           => $input_media_photo,
                                    'message'         => $inforamtion,
                                    'reply_to_msg_id' => $msg_id,
                                    'parse_mode'      => "markdown"
                                ]);
                            }
                        } catch (\Throwable $e) {
                            yield $this->messages->sendMessage([
                                'peer'            => $chat_id,
                                'message'         => $e->getMessage(),
                                'reply_to_msg_id' => $msg_id,
                                'parse_mode'      => 'markdown'
                            ]);
                        }
                    }
                }

                #End Part of User Inforamtion

                if (preg_match('/^[\/\#\!\.]?restore$/i', $txt)) {
                    $name = file_get_contents('data/name.txt');
                    $bio  = file_get_contents('data/bio.txt');
                    $pic   = yield $this->photos->getUserPhotos(['user_id' => $me_id, 'offset' => 0, 'max_id' => 0, 'limit' => 1])['photos'];
                    yield $this->photos->deletePhotos(['id' => $pic]);
                    yield $this->account->updateProfile(['first_name' => $name, 'about' => $bio]);
                    yield $this->photos->uploadProfilePhoto(['file' => './data/backup.jpg']);
                    if ($user_id == $me_id) {
                        yield $this->messages->editMessage(['peer' => $chat_id, 'message' => '*Recovery Successful.*', 'id' => $msg_id, 'parse_mode' => "markdown"]);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "*Recovery Successful.*", 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                }

                if (preg_match('/^[\/\#\!\.]?gp (\d*)$/i', $txt, $f)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $rpID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        } else {
                            $rpID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['users'][0]['id'];
                        }
                        $photos          = yield $this->photos->getUserPhotos(['user_id' => $rpID, 'offset' => $f[1], 'max_id' => 0, 'limit' => 1]);
                        $p               = $photos['photos']['0'];
                        $p_id            = $p['id'];
                        $hash            = $p['access_hash'];
                        $file_reference  = $p['file_reference'];
                        $inputPhoto      = ['_' => 'inputPhoto', 'id' => $p_id, 'access_hash' => $hash, 'file_reference' => $file_reference];
                        $inputMediaPhoto = ['_' => 'inputMediaPhoto', 'id' => $inputPhoto];
                        yield $this->messages->sendMedia([
                            'peer'            => $chat_id,
                            'media'           => $inputMediaPhoto,
                            'message'         => "test",
                            'parse_mode'      => 'MarkDown',
                            'reply_to_msg_id' => $msg_id
                        ]);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "Reply To User", 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                }

                if (preg_match('/^[\#\!\/\.]?dl$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $replyID = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $replyID = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $media = $replyID['messages'][0]['media']['photo'];
                        if (file_exists('data/a.jpg')) {
                            unlink('data/a.jpg');
                        }
                        yield $this->downloadToFile($media, 'data/a.jpg');
                        $inputMediaUploadedPhoto = ['_' => 'inputMediaUploadedPhoto', 'file' => 'data/a.jpg'];
                        yield $this->messages->sendMedia([
                            'peer' => $chat_id,
                            'media' => $inputMediaUploadedPhoto,
                            'message' => "~~SylixSelf V1~~",
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode' => 'MarkDown'
                        ]);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "Reply To User", 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                }

                if (preg_match('/^[\/\!\.\#]?del (\d+)/i', $txt, $r)) {
                    $sent = yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => '<i>Please Wait...</i>',
                        'parse_mode'      => "html"
                    ]);
                    foreach (array_chunk(range($msg_id, $msg_id - $r[1]), $r[1]) as $n) {
                        if ($type == 'supergroup' or $type == 'channel') {
                            yield $this->channels->deleteMessages([
                                'channel' => $chat_id,
                                'id'      => $n
                            ]);
                        } else {
                            yield $this->messages->deleteMessages([
                                'rovoke' => true,
                                'id'     => $n
                            ]);
                        }
                    }
                    $sent_id = ($type == 'supergroup' || $type == 'channel') ? $sent['updates'][2]['message']['id'] : $sent['updates'][1]['message']['id'];
                    yield $this->messages->editMessage([
                        'peer'            => $chat_id,
                        'message'         => "<i>$r[1] Messages Successfully Deleted.</i>",
                        'id'              => $sent_id,
                        'parse_mode'      => "html"
                    ]);
                } elseif (preg_match('/^[\/\!\.\#]?delall/i', $txt)) {
                    $array = range($msg_id, 1);
                    $chunk = array_chunk($array, 100);
                    foreach ($chunk as $v) {
                        sleep(0.05);
                        yield $this->channels->deleteMessages(['channel' => $chat_id, 'id' => $v]);
                    }
                }
                if (preg_match('/^[\/\!\#]?fosh (\d*)$/i', $txt, $b)) {
                    if (isset($reply_to_msg_id)) {
                        if (in_array($type, ['channel', 'supergroup'])) {
                            $reply_id = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['messages'][0]['id'];
                        } else {
                            $reply_id = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]])['messages'][0]['id'];
                        }
                        $e        = ["😀", "😃", "😄", "😁", "😆", "😅", "😂", "🤣", "😭", "😗", "😙", "😚", "😘", "🥰", "😍", "🤩", "🥳", "🤗", "🙃", "🙂", "☺️", "😊", "😏", "😌", "😉", "🤭", "😶", "🤔", "🤪", "😜", "😝", "😛", "😋", "😔", "😑", "😐", "🤨", "🧐", "🙄", "😒", "😤", "😠", "😡", "🤬", "☹️", "😰", "🤫", "🤐", "😬", "😳", "🥺", "😟", "😕", "🙁", "😨", "😧", "😦", "😮", "😯", "😲", "😱", "🤯", "😢", "😥", "😓", "😞", "😣", "😖", "😩", "😫", "🤤", "🥱", "🤮", "😇", "😵", "🤥", "🤓", "😎", "🤑", "🤠"];
                        $f        = ["کیرم تو خارت", "بصیک بچه کونی", "بای بده ننه پولی", "کیرم تو ننت اوبی", "نگامت کص ننه ", "کص ننه پرده ارتجاعیت", "ننتو شبی چند میدی؟", "خارتو با روغن جامد گاییدم", "کص آبجیت ", "زنا زادع ", "ننه خیابونی", "گی ننه", "آبم لا کص ننت چجوری میشه", "بالا باش ننه کیر دزد", "ننت مجلسی میزنه؟کصصصص ننت جووووون", "ننه جریده", "گی پدر زنا زادع ", "ننتو کرایه میدی؟", "شل ننه بالا باش", "خارکصده به ننت بگو رو کیرم خوش میگذره؟", "ننه توله کص ننتو جر میدم", "بیا ننتو ببر زخمش کردم", "کص ننتو بزارم یکم بخندیم", "به ننت بگو بیاد واسم پر توف بزنه خرجتونو بدم یتیم", "فلج تیز باش ننتو بیار", "ننت پر توف میزنی بابات شم؟", "اوب کونی بزن به چاک تا ننتو جلوت حامله نکردمننه کون طلا بیا بالا😂", "یتیم بیا بغلم ", "ننت گنگ بنگ دوس داره؟", "بیا بگامت شاد شی خار کصده", "کیرم تو کص ننت بگو باشه😂", "داداش دوس داری یا آبجی ننه پولی", "۵۰ میدم ننتو بدهکیرم کص آبجی کص طلاااات", "ننه پولی چند سانت دوس داری؟", "دست و پا نزن ننه کص گشاد", "ننه ساکر هویت میخوای؟", "کیر سگا تو کص آبجیت ", "از ننت بپرس آب کیر پرتقالی دوس داره؟", "پستون ننت چنده", "تخخخخ بیا بالا ادبی", "مادرت دستو پا میزنه زیرم", "ننه سکسی بیا یه ساک بزن بخندیم", "خمینی اومد جاده دهاتتونو آسفالت کرد اومدید شهر و گرنه ننت کجا کص میداد؟", "گص کش", "کس ننه", "کص ننت", "کس خواهر", "کس خوار", "کس خارت", "کس ابجیت", "کص لیس", "ساک بزن", "ساک مجلسی", "ننه الکسیس", "نن الکسیس", "ناموستو گاییدم", "ننه زنا", "کس خل", "کس مخ", "کس مغز", "کس مغذ", "خوارکس", "خوار کس", "خواهرکس", "خواهر کس", "حروم زاده", "حرومزاده", "خار کس", "تخم سگ", "پدر سگ", "پدرسگ", "پدر صگ", "پدرصگ", "ننه سگ", "نن سگ", "نن صگ", "ننه صگ", "ننه خراب", "تخخخخخخخخخ", "نن خراب", "مادر سگ", "مادر خراب", "مادرتو گاییدم", "تخم جن", "تخم سگ", "مادرتو گاییدم", "ننه حمومی", "نن حمومی", "نن گشاد", "ننه گشاد", "نن خایه خور", "تخخخخخخخخخ", "نن ممه", "کس عمت", "کس کش", "کس بیبیت", "کص عمت", "کص خالت", "کس بابا", "کس خر", "کس کون", "کس مامیت", "کس مادرن", "مادر کسده", "خوار کسده", "تخخخخخخخخخ", "ننه کس", "بیناموس", "بی ناموس", "شل ناموس", "سگ ناموس", "ننه جندتو گاییدم باو ", "چچچچ نگاییدم سیک کن پلیز D:", "ننه حمومی", "چچچچچچچ", "لز ننع", "ننه الکسیس", "کص ننت", "بالا باش", "ننت رو میگام", "کیرم از پهنا تو کص ننت", "مادر کیر دزد", "ننع حرومی", "تونل تو کص ننت", "کیر تک تک بکس تلع گلد تو کص ننت", "کص خوار بدخواه", "خوار کصده", "ننع باطل", "حروم لقمع", "ننه سگ ناموس", "منو ننت شما همه چچچچ", "ننه کیر قاپ زن", "ننع اوبی", "ننه کیر دزد", "ننه کیونی", "ننه کصپاره", "زنا زادع", "کیر سگ تو کص نتت پخخخ", "ولد زنا", "ننه خیابونی", "هیس بع کس حساسیت دارم", "کص نگو ننه سگ که میکنمتتاااا", "کص نن جندت", "ننه سگ", "ننه کونی", "ننه زیرابی", "بکن ننتم", "ننع فاسد", "ننه ساکر", "کس ننع بدخواه", "نگاییدم", "مادر سگ", "ننع شرطی", "گی ننع", "بابات شاشیدتت چچچچچچ", "ننه ماهر", "حرومزاده", "ننه کص", "کص ننت باو", "پدر سگ", "سیک کن کص ننت نبینمت", "کونده", "ننه ولو", "ننه سگ", "مادر جنده", "کص کپک زدع", "ننع لنگی", "ننه خیراتی", "سجده کن سگ ننع", "ننه خیابونی", "ننه کارتونی", "تکرار میکنم کص ننت", "تلگرام تو کس ننت", "کص خوارت", "خوار کیونی", "پا بزن چچچچچ", "مادرتو گاییدم", "گوز ننع", "کیرم تو دهن ننت", "ننع همگانی", "کیرم تو کص زیدت", "کیر تو ممهای ابجیت", "ابجی سگ", "کس دست ریدی با تایپ کردنت چچچ", "ابجی جنده", "ننع سگ سیبیل", "بده بکنیم چچچچ", "کص ناموس", "شل ناموس", "ریدم پس کلت چچچچچ", "ننه شل", "ننع قسطی", "ننه ول", "دست و پا نزن کس ننع", "ننه ولو", "خوارتو گاییدم", "محوی!؟", "ننت خوبع!؟", "کس زنت", "شاش ننع", "ننه حیاطی \\\\\/:", "نن غسلی", "کیرم تو کس ننت بگو مرسی چچچچ", "ابم تو کص ننت :\\\\\/", "فاک یور مادر خوار سگ پخخخ", "کیر سگ تو کص ننت", "کص زن", "ننه فراری", "بکن ننتم من باو جمع کن ننه جنده \\\\\/:::", "ننه جنده بیا واسم ساک بزن", "حرف نزن که نکنمت هااا :|", "کیر تو کص ننت😐", "کص کص کص ننت😂", "کصصصص ننت جووون", "سگ ننع", "کص خوارت", "کیری فیس", "کلع کیری", "تیز باش سیک کن نبینمت", "فلج تیز باش چچچ", "بیا ننتو ببر", "بکن ننتم باو ", "کیرم تو بدخواه", "چچچچچچچ", "ننه جنده", "ننه کص طلا", "ننه کون طلا", "کس ننت بزارم بخندیم!؟", "کیرم دهنت", "مادر خراب", "ننه کونی", "هر چی گفتی تو کص ننت خخخخخخخ", "کص ناموست بای", "کص ننت بای :\\\\\/\\\\\/", "کص ناموست باعی تخخخخخ", "کون گلابی!", "ریدی آب قطع", "کص کن ننتم کع", "نن کونی", "نن خوشمزه", "ننه لوس", " نن یه چشم ", "ننه چاقال", "ننه جینده", "ننه حرصی ", "نن لشی", "ننه ساکر", "نن تخمی", "ننه بی هویت", "نن کس", "نن سکسی", "نن فراری", "لش ننه", "سگ ننه", "شل ننه", "ننه تخمی", "ننه تونلی", "ننه کوون", "نن خشگل", "نن جنده", "نن ول ", "نن سکسی", "نن لش", "کس نن ", "نن کون", "نن رایگان", "نن خاردار", "ننه کیر سوار", "نن پفیوز", "نن محوی", "ننه بگایی", "ننه بمبی", "ننه الکسیس", "نن خیابونی", "نن عنی", "نن ساپورتی", "نن لاشخور", "ننه طلا", "ننه عمومی", "ننه هر جایی", "نن دیوث", "تخخخخخخخخخ", "نن ریدنی", "نن بی وجود", "ننه سیکی", "ننه کییر", "نن گشاد", "نن پولی", "نن ول", "نن هرزه", "ننه لاشی کیری", "ننه ویندوزی", "نن تایپی", "نن برقی", "نن شاشی", "ننه درازی", "شل ننع", "یکن ننتم که", "کس خوار بدخواه", "آب چاقال", "ننه جریده", "ننه سگ سفید", "آب کون", "ننه 85", "ننه سوپری", "بخورش", "کس ن", "خوارتو گاییدم", "خارکسده", "گی پدر", "آب چاقال", "زنا زاده", "زن جنده", "سگ پدر", "مادر جنده", "ننع کیر خور", "چچچچچ", "تیز بالا", "ننه سگو با کسشر در میره", "کیر سگ تو کص ننت", "kos kesh", "kir", "kiri", "nane lashi", "kos", "kharet", "blis kirmo", "اوبی کونی هرزه", "کیرم لا کص خارت", "کیری", "ننه لاشی", "ممه", "کص", "کیر", "بی خایه", "ننه لش", "بی پدرمادر", "خارکصده", "مادر جنده", "کصکش", "کیرم کون مادرت😂😂😂😂", "بالا باش کیرم کص مادرت😂😂😂", "مادرتو میگام نوچه جون بالا😂😂??", "اب خارکصته تند تند تایپ کن ببینم", "مادرتو میگام بخای فرار کنی", "لال شو", "کیرم تو خارت", "بصیک بچه کونی", "بای بده ننه پولی", "کیرم تو ننت اوبی", "نگامت کص ننه ", "کص ننه پرده ارتجاعیت", "ننتو شبی چند میدی؟", "خارتو با روغن جامد گاییدم", "کص آبجیت ", "زنا زادع ", "ننه خیابونی", "گی ننه", "آبم لا کص ننت چجوری میشه", "بالا باش ننه کیر دزد", "ننت مجلسی میزنه؟", "کصصصص ننت جووووون", "ننه جریده", "گی پدر زنا زادع ", "ننتو کرایه میدی؟", "شل ننه بالا باش", "خارکصده به ننت بگو رو کیرم خوش میگذره؟", "ننه توله کص ننتو جر میدم", "بیا ننتو ببر زخمش کردم", "کص ننتو بزارم یکم بخندیم", "به ننت بگو بیاد واسم پر توف بزنه خرجتونو بدم یتیم", "ننه کون طلا بیا بالا😂", "یتیم بیا بغلم ", "ننت گنگ بنگ دوس داره؟", "بیا بگامت شاد شی خار کصده", "کیرم تو کص ننت بگو باشه😂", "داداش دوس داری یا آبجی ننه پولی", "۵۰ میدم ننتو بده", "فلج تیز باش ننتو بیار", "کیرم کص آبجی کص طلاااات", "ننه پولی چند سانت دوس داری؟", "دست و پا نزن ننه کص گشاد", "ننه ساکر هویت میخوای؟", "کیر سگا تو کص آبجیت ", "از ننت بپرس آب کیر پرتقالی دوس داره؟", "پستون ننت چنده", "تخخخخ بیا بالا ادبی", "مادرت دستو پا میزنه زیرم", "ننه سکسی بیا یه ساک بزن بخندیم", "خمینی اومد جاده دهاتتونو آسفالت کرد اومدید شهر و گرنه ننت کجا کص میداد؟", "کیرم تا ته و از پهنا تو کص مادرت", "کص ناموس مادرت", "مادر کص پاپیونی ", "مادر جنده حروم تخمی", "اوبی زاده حقیر", "بابات زیر کیرم بزرگ شد", "اسمم رو کون مادرت تتو شده", "خیخیخیخیخی", "چچچچچچچچ", "زجه بزن ناموس گلابی", "مادرت کیرمه ", "بابات منم ", "تخم سگ حروم زاده ", "کص ناموست ", "خواهرتو گاییدم", "ریدم بهت بیشعور", " بی شرف", " ریدم تو مغزت", " بی ارزش", " کصکش", " ریدم توی ناموست", " بی ناموس", " مادرجنده", " خواهر کصکش", " ریدم توی کل طایفت", " بی ناموس برو", " خوشم ازت نمیاد کصکش", " تو کصکشی", " برو خواهر جنده", "برو مادرجنده", " برو برادر کونی", " کونکش", "عوض بی ناموس", "ریدم تو قبر مادرت", "ریدم تو قبر پدرت", " ریدم تو قبرت", " ریدم تو زاتت", " ریدم تو خواهر جنده", " خواهر جندت خوبه", " مادر جندت خوبه", " پدر کونکشت خوبه", "برادر کونیت خوب", " پدرسگ", " مادر سگ", " برادر سگ", " خواهر سگ", " خواهر جندت چی", " مادر جندت چی", " پدر کونیت چی", " برادر کونیت چی", " اره جنده ها", " تو جنده ای", " تو کونی ای", " توی کصکشی", " خوشم از جنده ها نمیاد", " خواهرت جنده شده", " مادرت جنده شده", " جنده برو خودت رو جمع کن", " مامانت امشب روی کی هستش", " خواهرت پیش کیه", " برادرت داره کجا کون میده", " بابای قرمساقت کو", " خواهرت امشب روی کی هستش", " مادرت امشب روی کی خوابیده", "ننت پر توف میزنی بابات شم؟", "اوب کونی بزن به چاک تا ننتو جلوت حامله نکردم", " ریدم بهت", " بیشعور", " بی شرف", " ریدم تو مغزت", " بی ارزش", " کصکش", " ریدم توی ناموست", " بی ناموس", " مادرجنده", " خواهر کصکش", " ریدم توی کل طایفت", " بی ناموس برو", " خوشم ازت نمیاد کصکش", " تو کصکشی", " برو خواهر جنده", " برو مادرجنده", " برو برادر کونی", " کونکش", " عوض بی ناموس", " ریدم تو قبر مادرت", " ریدم تو قبر پدرت", " ریدم تو قبرت", " ریدم تو زاتت", " ریدم تو خواهر جنده", " خواهر جندت خوبه", " مادر جندت خوبه", " پدر کونکشت خوبه", " برادر کونیت خوب", " پدرسگ", " مادر سگ", " برادر سگ", " خواهر سگ", " خواهر جندت چی", " مادر جندت چی", " پدر کونیت چی", " برادر کونیت چی", " اره جنده ها", " تو جنده ای", " تو کونی ای", " توی کصکشی", " خوشم از جنده ها نمیاد", " خواهرت جنده شده", " مادرت جنده شده", " جنده برو خودت رو جمع کن", " مامانت امشب روی کی هستش", " خواهرت پیش کیه", " برادرت داره کجا کون میده", " بابای قرمساقت کو", " خواهرت امشب روی کی هستش", " مادرت امشب روی کی خوابیده", "کیرم کون مادرت😂😂😂😂", "بالا باش کیرم کص مادرت😂😂😂", "مادرتو میگام نوچه جون بالا😂😂😂", "اب خارکصته تند تند تایپ کن ببینم", "مادرتو میگام بخای فرار کنی", "لال شو دیگه نوچه", "مادرتو میگام اف بشی", "کیرم کون مادرت", "کیرم کص مص مادرت بالا", "کیرم تو چشو چال مادرت", "کون مادرتو میگام بالا", "بیناموس  خسته شدی؟", "نبینم خسته بشی بیناموس", "ننتو میکنم", "کیرم کون مادرت 😂😂😂😂😂😂😂", "صلف تو کصننت بالا", "بیناموس بالا باش بهت میگم", "کیر تو مادرت", "کص مص مادرتو بلیسم؟", "کص مادرتو چنگ بزنم؟", "به خدا کصننت بالا ", "مادرتو میگام ", "کیرم کون مادرت بیناموس", "مادرجنده بالا باش", "بیناموس تا کی میخای سطحت گح باشه", "اپدیت شو بیناموس خز بود", "کیرم از پهنا تو ننت", "و اما تو بیناموس چموش", "تو یکیو مادرتو میکنم", "کیرم تو ناموصت ", "کیر تو ننت", "ریش روحانی تو ننت", "کیر تو مادرت😂😂😂", "کص مادرتو مجر بدم", "صلف تو ننت", "بات تو ننت ", "مامانتو میکنم بالا", "کیر ترکا به ناموست", "سطحشو نگا", "تایپ کن بیناموس", "خشاب؟", "کیرم کون مادرت بالا", "بیناموس نبینم خسته بشی", "مادرتو بگام؟", "گح تو سطحت شرفت رف", "بیناموس شرفتو نابود کردم یه کاری کن", "وای کیرم تو سطحت", "بیناموس روانی شدی", "روانیت کردما", "مادرتو کردم کاری کن", "تایپ تو ننت", "بیپدر بالا باش", "و اما تو لر خر", "ننتو میکنم بالا باش", "کیرم لب مادرت بالا😂😂😂", "چطوره بزنم نصلتو گح کنم", "داری تظاهر میکنی ارومی ولی مادرتو کوص کردم", "مادرتو کردم بیغیرت", "هرزه", "وای خدای من اینو نگا", "کیر تو کصننت", "ننتو بلیسم", "منو نگا بیناموس", "کیر تو ننت بسه دیگه", "خسته شدی؟", "ننتو میکنم خسته بشی", "وای دلم کون مادرت بگام", "اف شو احمق", "بیشرف اف شو بهت میگم", "مامان جنده اف شو", "کص مامانت اف شو", "کص لش وا ول کن اینجوری بگو؟", "ای بیناموس چموش", "خارکوصته ای ها", "مامانتو میکنم اف نشی", "گح تو ننت", "سطح یه گح صفتو", "گح کردم تو نصلتا", "چه رویی داری بیناموس", "ناموستو کردم", "رو کص مادرت کیر کنم؟😂😂😂", "نوچه بالا", "کیرم تو ناموصتاا😂😂", "یا مادرتو میگام یا اف میشی", "لالشو دیگه", "بیناموس", "مادرکصته", "ناموص کصده", "وای بدو ببینم میرسی", "کیرم کون مادرت چیکار میکنی اخه", "خارکصته بالا دیگه عه", "کیرم کصمادرت😂😂😂", "کیرم کون ناموصد😂😂😂", "بیناموس من خودم خسته شدم توچی؟", "ای شرف ندار", "مامانتو کردم بیغیرت", "و اما مادر جندت", "تو یکی زیر باش", "اف شو", "خارتو کوص میکنم", "کوصناموصد", "ناموص کونی", "خارکصته ی بۍ غیرت", "شرم کن بیناموس", "مامانتو کرد ", "ای مادرجنده", "بیغیرت", "کیرتو ناموصت", "بیناموس نمیخای اف بشی؟", "ای خارکوصته", "لالشو دیگه", "همه کس کونی", "حرامزاده", "مادرتو میکنم", "بیناموس", "کصشر", "اف شو مادرکوصته", "خارکصته کجایی", "ننتو کردم کاری نمیکنی؟", "کیرتو مادرت لال", "کیرتو ننت بسه", "کیرتو شرفت", "مادرتو میگام بالا", "کیر تو مادرت", "کونی ننه ی حقیر زاده", "وقتی تو کص ننت تلمبه های سرعتی میزدم تو کمرم بودی بعد الان برا بکنه ننت شاخ میشی هعی   ", "تو یه کص ننه ای ک ننتو به من هدیه کردی تا خایه مالیمو کنی مگ نه خخخخ", "انگشت فاکم تو کونه ناموست", "تخته سیاهه مدرسه با معادلات ریاضیه روش تو کص ننت اصلا خخخخخخخ ", "کیرم تا ته خشک خشک با کمی فلفل روش تو کص خارت ", "کص ننت به صورت ضربدری ", "کص خارت به صورت مستطیلی", "رشته کوه آلپ به صورت زنجیره ای تو کص نسلت خخخخ ", "10 دقیقه بیشتر ابم میریخت تو کس ننت این نمیشدی", "فکر کردی ننت یه بار بهمـ داده دیگه شاخی", "اگر ننتو خوب کرده بودم حالا تو اینجوری نمیشدی"];

                        for ($i = 1; $i <= $b[1]; $i++) {
                            $fosh     = $f[array_rand($f)];
                            $emoji    = $e[array_rand($e)];
                            yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $fosh . ' ' . $emoji, 'parse_mode' => 'Markdown', 'parse_mode' => "markdown", 'reply_to_msg_id' => $reply_id]);
                            sleep(@$DB['foshlimit']);
                        }
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => 'reply to user', 'reply_to_msg_id' => $msg_id]);
                    }
                }



                if (preg_match('/^[\#\/\!\.]?(banall)$/', $txt)) {
                    $channelParticipantsRecent = ['_' => 'channelParticipantsRecent'];
                    $getresult                 = yield $this->channels->getParticipants([
                        'channel' => $chat_id,
                        'filter'  => $channelParticipantsRecent,
                        'offset'  => 0,
                        'limit'   => 100
                    ]);
                    $users                     = $getresult['users'];
                    $ChatBannedRights          = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => -1];
                    foreach ($users as $new) {
                        $id = $new['id'];
                        try {
                            yield $this->channels->editBanned([
                                'channel'       => $chat_id,
                                'participant'   => $id,
                                'banned_rights' => $ChatBannedRights,
                            ]);
                        } catch (\Throwable $e) {
                            echo $e->getMessage();
                        }
                    }
                } elseif (preg_match('/^[\#\/\!\.]?banall (.*)$/', $txt, $la)) {
                    $channelParticipantsRecent = ['_' => 'channelParticipantsRecent'];
                    $getresult                 = yield $this->channels->getParticipants([
                        'channel' => $la[1],
                        'filter'  => $channelParticipantsRecent,
                        'offset'  => 0,
                        'limit'   => 100
                    ]);
                    $users                     = $getresult['users'];
                    $ChatBannedRights          = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => -1];
                    foreach ($users as $new) {
                        $id = $new['id'];
                        try {
                            yield $this->channels->editBanned([
                                'channel'       => $chat_id,
                                'participant'   => $id,
                                'banned_rights' => $ChatBannedRights,
                            ]);
                        } catch (\Throwable $e) {
                            echo $e->getMessage();
                        }
                    }
                }
                if (preg_match('/^[\#\/\!\.]?(bandels)$/', $txt)) {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $chats = yield $this->getAllDeletes($chat_id);
                        $ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => -1];
                        $baned = 0;
                        foreach ($chats as $new) {
                            $id = $new['id'];
                            try {
                                yield $this->channels->editBanned([
                                    'channel'       => $chat_id,
                                    'participant'   => $id,
                                    'banned_rights' => $ChatBannedRights,
                                ]);
                                $baned++;
                            } catch (\Throwable $e) {
                                /*yield $this->messages->sendMessage([
                                    'peer' => $chat_id,
                                    'message' => $e->getMessage(),
                                    'parse_mode' => 'Markdown'
                                ]); 
                                */
                            }
                        }
                        yield $this->messages->sendMessage([
                            'peer' => $chat_id,
                            'message' => "**Done : Count Ban **(`$baned`)",
                            'parse_mode' => 'Markdown'
                        ]);
                    }
                }

                if (preg_match('/^[\#\/\!\.]?tall$/', $txt)) {
                    if ($type == 'channel' || $type == 'supergroup') {
                        $chats = yield $this->getAllUsers($chat_id);
                        $mentioned = 0;
                        while (sizeof($chats) >= 4) {
                            $spl = $chats;
                            $Safa = false;
                            $chats = array_splice($spl, 4);
                            foreach ($spl as $number => $up) {
                                $mentioned++;
                                $id   = $up['id'];
                                $name = fix($up['first_name']);
                                $Safa .= $mentioned . "-[$name](tg://user?id=$id) \n";
                            }
                            yield $this->messages->sendMessage([
                                'peer' => $chat_id,
                                'message' => "$Safa",
                                'parse_mode' => 'Markdown'
                            ]);
                        }
                        $Safa = false;
                        foreach ($chats as $number => $up) {
                            $mentioned++;
                            $id = $up['id'];
                            $name = fix($up['first_name']);
                            $Safa .= $mentioned . "-[$name](tg://user?id=$id) \n";
                        }
                        yield $this->messages->sendMessage([
                            'peer' => $chat_id,
                            'message' => "$Safa",
                            'parse_mode' => 'Markdown'
                        ]);
                        return;
                    }
                }

                if (preg_match('/^[\/\!\#]?comment (\w*)$/i', $txt, $r)) {
                    @$DB['Fun']['FirstComment']['status'] = $r[1];
                    //file_put_contents('data/comment.txt', $r[1]);
                    $rr = "*first comment now Is $r[1]*";
                    if ($user_id == $me_id) {
                        yield $this->messages->editMessage(['peer' => $chat_id, 'message' => $rr, 'id' => $msg_id, 'parse_mode' => 'Markdown']);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $rr, 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                    $this->DB($DB);
                } elseif (preg_match('/^[\.]?sfcom (.*)$/i', $txt, $rrr)) {
                    if (!isset($reply_to_msg_id)) {
                        if (isset($DB['Fun']['FirstComment']['media'])) {
                            unset($DB['Fun']['FirstComment']['media']);
                        }
                        $DB['Fun']['FirstComment']['text'] = $rrr[1];
                        $rr = "*Successfull.*";
                        if ($user_id == $me_id) {
                            yield $this->messages->editMessage(['peer' => $chat_id, 'message' => $rr, 'id' => $msg_id, 'parse_mode' => 'Markdown']);
                        } else {
                            yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $rr, 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                        }
                        $this->DB($DB);
                    }
                } elseif (preg_match('/^[\.]?sfcom$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if ($type == 'channel' || $type == 'supergroup') {
                            $reply = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        } else {
                            $reply = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$reply_to_msg_id]]);
                        }
                        $xx = $reply['messages'][0]['message'] ?: null;
                        $document_sticker = $reply['messages'][0]['media']['document'];
                        if ($document_sticker) {
                            $ds_id = $document_sticker['id'];
                            $ds_ah = $document_sticker['access_hash'];
                            $ds_fr = $document_sticker['file_reference'];
                            $is    = ['_' => 'inputDocument', 'id' => $ds_id, 'access_hash' => $ds_ah, 'file_reference' => $ds_fr];
                            $imuds = ['_' => 'inputMediaDocument', 'id' => $is];
                            unset($DB['Fun']['FirstComment']['text']);
                            $DB['Fun']['FirstComment']['media'] = $imuds;
                            $rr = "*MediaAnswer Successfully Saved For FirstComment.*";
                            if ($user_id == $me_id) {
                                yield $this->messages->editMessage(['peer' => $chat_id, 'message' => $rr, 'id' => $msg_id, 'parse_mode' => 'Markdown']);
                            } else {
                                yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $rr, 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                            }
                            $this->DB($DB);
                        }
                    }
                }

                if (preg_match('/^[\/\!\#]?[\/\#\!]?mem$/i', $txt)) {
                    $mem_usage = round((memory_get_usage() / 1024) / 1024, 1) . 'MB';
                    $ms = "*Ram Usage: $mem_usage*";
                    if ($user_id == $me_id) {
                        yield $this->messages->editMessage(['peer' => $chat_id, 'message' => $ms, 'id' => $msg_id, 'parse_mode' => 'Markdown']);
                    } else {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $ms, 'reply_to_msg_id' => $msg_id, 'parse_mode' => 'Markdown']);
                    }
                }
                if ($txt == 'getdialogs') {
                    $r = yield $this->getDialogs();
                    $r = \json_encode($r, 128);
                    file_put_contents('dialogs.json', $r);
                }

                if ($txt == '..') {
                    if (!file_exists('data/uptime.txt')) {
                        file_put_contents('data/uptime.txt', $this->timen);
                    }
                    file_put_contents('data/lastupdate.txt', time());
                    if ($user_id != $me_id) {
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => "OK RESTART COMPLACTED.", 'reply_to_msg_id' => $msg_id]);
                    } else {
                        yield $this->messages->editMessage(['peer' => $chat_id, 'message' => "OK RESTART COMPLACTED.", 'id' => $msg_id]);
                    }
                    yield $this->restart();
                }

                if ($txt == '.') {
                    $domain = 'tcp://149.154.167.51';
                    $port = 443;
                    $starttime = microtime(true);
                    $file = fsockopen($domain, $port, $s, $s, 1);
                    $stoptime = microtime(true);
                    fclose($file);
                    $ping = floor(($stoptime - $starttime) * 1000);
                    $load         = sys_getloadavg()[0];
                    $uptime       = (file_exists('data/uptime.txt'))     ? file_get_contents('data/uptime.txt')     : $this->timen;
                    $uptime       = mediaTimeDeFormater(time() - $uptime);
                    $last         = (file_exists('data/lastupdate.txt')) ? file_get_contents('data/lastupdate.txt') : $this->timen;
                    $lastupdate   = mediaTimeDeFormater(time() - $last);
                    $mem_usage    = round((memory_get_usage() / 1024) / 1024, 1) . 'MB';
                    $s            =  "**SylixSelf Status** \n\n" . align(
                        [
                            'Ping'           => $ping . ' ms',
                            'Load'           => round($load) . ' ms',
                            'Uptime'         => $uptime,
                            'LastUpdate'     => $lastupdate,
                            'Ram Usage'      => $mem_usage,
                            'PHP version'    => PHP_VERSION,
                            'Source Version' => "v1",
                            'Library'        => 'MadelineProto'
                        ],
                        '` ↬ (`',
                        '├ • `',
                        '`)'
                    );
                    if ($user_id != $me_id) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $s,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    } else {
                        yield $this->messages->editMessage([
                            'peer'       => $chat_id,
                            'message'    => $s,
                            'id'         => $msg_id,
                            'parse_mode' => "markdown"
                        ]);
                    }
                }

                if ($txt == '...') {
                    $uptime             = shell_exec('uptime -p');
                    $system_inforamtion = system("uname -a");
                    $memory_usage       = system("free -m");
                    $disk_usage         = system("df -h");
                    $cpu_information    = system("cat /proc/cpuinfo | grep \"model name\\|processor\"");
                    $text =
                        "**System Information**\n"
                        . align(
                            [
                                'Uptime'                    => $uptime,
                                'System Information'        => $system_inforamtion,
                                'Memory'                    => $memory_usage,
                                'Disk'                      => $disk_usage,
                                'Cpu Information'           => $cpu_information,
                            ],
                            ': ',
                            '`• ',
                            '`'
                        );
                    if ($user_id != $me_id) {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => $text,
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => "markdown"
                        ]);
                    } else {
                        yield $this->messages->editMessage([
                            'peer'       => $chat_id,
                            'message'    => $text,
                            'id'         => $msg_id,
                            'parse_mode' => "markdown"
                        ]);
                    }
                }

                #Account

                if (preg_match('/[\.\/\!\#]?sn (.*)$/i', $txt, $x)) {
                    $text = "<b>Your New Name Is $x[1]</b>";
                    yield $this->account->updateProfile(['first_name' => $x[1]]);
                    yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $text, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                } elseif (preg_match('/[\.\/\!\#]?sb (.*)$/', $txt, $x)) {
                    $text = "<b>Your New Bio Is $x[1]</b>";
                    yield $this->account->updateProfile(['about' => $x[1]]);
                    yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $text, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                } elseif (preg_match('/[\.\/\!\#]?dp (.*)$/i', $txt, $x)) {
                    $text   = "<b>Your Profile[$x[1]] Successfuly Deleted.</b>";
                    yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $text, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                    $photos = yield $this->photos->getUserPhotos(['user_id' => $me_id, 'offset' => $x[1], 'max_id' => 0, 'limit' => 1])['photos'];
                    yield $this->photos->deletePhotos(['id' => $photos]);
                } elseif (preg_match('/[\.\/\!\#]?sp$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if (file_exists('data/pic.jpg')) {
                            unlink('data/pic.jpg');
                        }
                        $get = yield $this->getMessages($chat_id, [$reply_to_msg_id]);
                        $pic = $get['messages'][0]['media']['photo'];
                        yield $this->downloadToFile($pic, 'data/pic.jpg');
                        $text = "<b>Your New Profile was set.</b>";
                        yield $this->photos->uploadProfilePhoto(['file' => 'data/pic.jpg']);
                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $text, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                    }
                }

                if (preg_match('/[\.\/\!\#]?rm$/i', $txt)) {
                    if (isset($reply_to_msg_id)) {
                        if (file_exists('data/back.jpg')) {
                            unlink('data/back.jpg');
                        }
                        $get = yield $this->getMessages($chat_id, [$reply_to_msg_id]);
                        $pic = $get['messages'][0]['media']['photo'];
                        yield $this->downloadToFile($pic, 'data/back.jpg');


                        yield $this->messages->sendMessage(['peer' => $chat_id, 'message' => $res, 'reply_to_msg_id' => $msg_id, 'parse_mode' => "HTML"]);
                    }
                }


                if (preg_match('/(\d+?) (.*)/', $txt, $yesh)) {
                    $num = $yesh[1];
                    $x = 0;
                    //@$one  = (strpos($txt,'یک') !== false) ? 1 : (strpos($txt,'یه') !== false) ? 1 : (strpos($txt,'یه دونه') !== false) ? 1 : null;
                    $two   = (strpos($txt, 'دو') !== false) ? 2 : null;
                    $three = (strpos($txt, 'سه') !== false) ? 3 : null;
                    $four  = (strpos($txt, 'چهار') !== false) ? 4 : null;
                    $five  = (strpos($txt, 'پنج') !== false) ? 5 : null;
                    //@$six  = (strpos($txt,'شیش') !== false) ? 6 : (strpos($txt,'شش') !== false) ? 6 :null;

                    if (strpos($yesh[2], 'زوج') !== false) {
                        $even = [2, 4, 6];
                        while (true) {
                            $sent            = yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => ['_' => 'inputMediaDice', 'emoticon' => "🎲"]
                            ]);
                            $sent_id         = isset($sent['updates'][2]['message']['id']) ? $sent['updates'][2]['message']['id']                         : $sent['updates'][1]['message']['id'];
                            $sent_dice_value = isset($sent['updates'][2]['message']['media']['value']) ? $sent['updates'][2]['message']['media']['value'] : $sent['updates'][1]['message']['media']['value'];
                            if (!in_array($sent_dice_value, $even)) {
                                $m = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
                                $a = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$sent_id]] : ['rovoke' => true, 'id' => [$sent_id]];
                                yield $this->$m->deleteMessages($a);
                            } else {
                                $x += 1;
                            }
                            if ($x == $num) {
                                $x = 0;
                                break;
                            }
                            yield $this->sleep(2);
                        }
                    } elseif (strpos($yesh[2], 'فرد') !== false) {
                        $odd = [1, 3, 5];
                        while (true) {
                            $sent            = yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => ['_' => 'inputMediaDice', 'emoticon' => "🎲"]
                            ]);
                            $sent_id         = isset($sent['updates'][2]['message']['id']) ? $sent['updates'][2]['message']['id']                         : $sent['updates'][1]['message']['id'];
                            $sent_dice_value = isset($sent['updates'][2]['message']['media']['value']) ? $sent['updates'][2]['message']['media']['value'] : $sent['updates'][1]['message']['media']['value'];
                            if (!in_array($sent_dice_value, $odd)) {
                                $m = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
                                $a = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$sent_id]] : ['rovoke' => true, 'id' => [$sent_id]];
                                yield $this->$m->deleteMessages($a);
                            } else {
                                $x += 1;
                            }
                            if ($x == $num) {
                                $x = 0;
                                break;
                            }
                            yield $this->sleep(2);
                        }
                    }
                }
                #SEND DICE
                if (preg_match('/[\/\.\#\!\.]?(sd) (\w*) (\d*)$/', $txt, $dfdf)) {
                    $dices = [
                        'tas'    => "🎲",
                        'top'    => "🏀",
                        'dat'    => "🎯",
                        'boling' => "🎳",
                        'kazino' => "🎰",
                    ];
                    $b = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
                    $q = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$msg_id]] : ['rovoke' => true, 'id' => [$msg_id]];
                    yield $this->$b->deleteMessages($q);

                    if (isset($dices[$dfdf[2]])) {
                        $dice = $dices[$dfdf[2]];
                        $num  = $dfdf[3];
                        while (true) {
                            $sent            = yield $this->messages->sendMedia([
                                'peer'            => $chat_id,
                                'media'           => ['_' => 'inputMediaDice', 'emoticon' => $dice]
                            ]);
                            $sent_id         = isset($sent['updates'][2]['message']['id']) ? $sent['updates'][2]['message']['id']                         : $sent['updates'][1]['message']['id'];
                            $sent_dice_value = isset($sent['updates'][2]['message']['media']['value']) ? $sent['updates'][2]['message']['media']['value'] : $sent['updates'][1]['message']['media']['value'];
                            if ($sent_dice_value != $num) {
                                $m = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
                                $a = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$sent_id]] : ['rovoke' => true, 'id' => [$sent_id]];
                                yield $this->$m->deleteMessages($a);
                            } else {
                                break;
                            }
                        }
                    } else {
                        yield $this->messages->sendMessage([
                            'peer'            => $chat_id,
                            'message'         => '**i cant found your dice**',
                            'reply_to_msg_id' => $msg_id,
                            'parse_mode'      => 'markdown'
                        ]);
                    }
                }

                if (preg_match('/^[\/\.\#\!\.]?(dice) (\w*)/', $txt, $yyy)) {
                    $alert = "<pre>Dice Detection Now Is $yyy[2]</pre>";
                    @$DB['Fun']['DiceDetection'] = $yyy[2];
                    yield $this->messages->sendMessage([
                        'peer'            => $chat_id,
                        'message'         => $alert,
                        'reply_to_msg_id' => $msg_id,
                        'parse_mode'      => 'html'
                    ]);
                    $this->DB($DB);
                }
                if (preg_match('/[\/\.\#\!\.](run)\s?(.*)$/usi', $txt, $match)) {
                    $result   = null;
                    $errors   = null;
                    $eval     = "return (function () use 
                        (&\$update,&\$chat_id,&\$msg_id,&\$reply_to_msg_id,&\$user_id,&\$type){
                            {$match[2]}
                        }
                    )();";
                    ob_start();
                    try {
                        (yield eval($eval));
                        $result .= ob_get_contents() . "\n";
                    } catch (\Throwable $e) {
                        $errors .= $e->getMessage() . "\n" . "ᴀᴛ ʟɪɴᴇ ‣‣‣ " . $e->getLine() . "\n ɪɴ ꜰɪʟᴇ ‣‣‣" . $e->getFile();
                    }

                    ob_end_clean();
                    if (empty($result)) {
                        $answer = "𝔠𝔬𝔡𝔢 ‣‣‣<pre>/run <br />$match[2]</pre>\n𝖊𝖗𝖗𝖔𝖗𝖘 ‣‣‣ $errors";
                        yield $this->messages->editMessage([
                            'peer'       => $chat_id,
                            'message'    => $answer,
                            'id'         => $msg_id,
                            'parse_mode' => "html"
                        ]);
                        return;
                    }
                    $errors = $errors ?? 'ⁿᵒᵗʰⁱⁿᵍ';
                    $answer = "𝔠𝔬𝔡𝔢 ‣‣‣<pre>/run <br />$match[2]</pre> \n 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 ‣‣‣ \n$result \n𝖊𝖗𝖗𝖔𝖗𝖘 ‣‣‣ $errors";

                    yield $this->messages->editMessage([
                        'peer'       => $chat_id,
                        'message'    => $answer,
                        'id'         => $msg_id,
                        'parse_mode' => "html"
                    ]);
                }
                if (preg_match('/^[\/\!]?(dl) (.*)/ius', $txt, $match)) {
                    $peer = $chat_id;
                    $sent = yield $this->messages->sendMessage([
                        'peer'    => $peer,
                        'message' => 'Preparing...'
                    ]);
                    $id   = $sent['id'] ?? $sent['updates'][0]['id'];
                    $name = \basename($match[2]) ?? 'Unkowon';
                    $url  = new \danog\MadelineProto\FileCallback(
                        $match[2],
                        function ($progress, $speed, $time) use ($peer, $id) {
                            static $prev = 0;
                            $now = \time();
                            if ($now - $prev < 10 && $progress < 100) {
                                return;
                            }
                            $prev = $now;
                            $progress = round($progress);
                            try {
                                yield $this->messages->editMessage([
                                    'peer'    => $peer,
                                    'id'      => $id,
                                    'message' => "Upload progress: $progress%\nSpeed: $speed mbps\nTime elapsed since start: $time"
                                ]);
                            } catch (\Throwable $e) {
                            }
                        }
                    );
                    yield $this->messages->sendMedia([
                        'peer' => $peer,
                        'media' => [
                            '_' => 'inputMediaUploadedDocument',
                            'file' => $url,
                            'attributes' => [
                                ['_' => 'documentAttributeFilename', 'file_name' => $name]
                            ]
                        ],
                        'message' => 'By @MadelineProto !'
                    ]);
                }
            }


            #MEMBERS CAN USE
            /*
            if (isset($DB['MediaAnswers'][$txt])) {
                $media = $DB['MediaAnswers'][$txt]['media'];
                yield $this->messages->sendMedia([
                    'peer'            => $chat_id,
                    'media'           => $media,
                    'reply_to_msg_id' => $msg_id,
                ]);
            }
            */
            if (isset($DB['MediaAnswers'])) {
                foreach ($DB['MediaAnswers'] as $key => $value) {
                    $result = mt($txt, $value['text']);
                    if ($result == true) {
                        $media = $value['media'];
                        yield $this->messages->sendMedia([
                            'peer'            => $chat_id,
                            'media'           => $media,
                            'reply_to_msg_id' => $msg_id,
                        ]);
                    }
                }
            }


            #CHECK SENDED DICE 
            if ($dice_value != null && @$DB['Fun']['DiceDetection'] == 'on') {
                yield $this->messages->sendMessage([
                    'peer'            => $chat_id,
                    'message'         => "<pre>Value Is : $dice_value</pre>",
                    'parse_mode'      => 'html',
                    'reply_to_msg_id' => $msg_id
                ]);
            }
        } catch (\Throwable $e) {
            $this->report("Surfaced: $e");
        }
    }
}

$settings = [
    'serialization'                    => [
        'cleanup_before_serialization' => true,
    ],
    'logger'       => [
        'max_size' => 1 * 1024 * 1024,
    ],
    'peer'                           => [
        'full_fetch'                 => false,
        'cache_all_peers_on_startup' => false,
    ],
    'app_info'     => [
        'api_id'   => 3063880,
        'api_hash' => 'e0f71a9affe6526b56ab254c0bea9b1b'
    ],
   
];


$bot = new \danog\MadelineProto\API('X.session', $settings);
$bot->startAndLoop(XHandler::class);
